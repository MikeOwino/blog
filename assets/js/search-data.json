{
  
    
        "post0": {
            "title": "Mike Owino Documentation",
            "content": ". DEDAN KIMATHI UNIVERSITY OF TECHNOLOGY . SCHOOL OF COMPUTER SCIENCE AND INFORMATION TECHNOLOGY . DEPARTMENT OF INFORMATION TECHNOLOGY . A PROJECT PROPOSAL FOR THE FINAL YEAR STUDENT IN BSc BUSINESS INFORMATION TECHNOLOGY . PROJECT TITLE: COVIDLY . SUBMITTED BY . NAME: OWINO MIKE OKUMU . REG.NO: C027-01-1110/2017 . SUPERVISOR . MR. MICHAEL KAGIRI . A project submitted in partial fulfillment of the requirements for the degree in Business . Information Technology to the Department of Computer Science and . Information Technology. . DECLARATION . I hereby declare that the project entitled COVIDLY submitted for the B.Sc. Business Information Technology degree is my original work and the project has not formed the basis for an award of any degree, diploma or any other similar titles. . Name: OWINO MIKE OKUMU . Signature ……………………………….. . Date: …………………………………… . This project has been submitted for examination with my approval as a University Supervisor. Name MR. MICHAEL KAGIRI. . Signature ……………………………… . Date: …………………………………… . DEDICATION . I dedicate this project to my father, Alfred Okumu for his financial support and constant encouragement throughout my education and paving for me to do this course. I also dedicate it to my family members who has been of constant help during my way Degree program. God bless them abundantly. . ACKNOLEDGEMENT . I would like to express my very great appreciation to Mr. Kagiri Michael for his valuable and constructive guidance during the entire development of this research work. His willingness to give his time so generously is much appreciated. . I would also like to express my gratitude to Mrs. Kuria Jane for her advice and assistance in moderating my research proposal. . I would like to acknowledge the role played by the department of Information Technology as well as all my lecturers in the B.Sc. Business Information Technology degree program. . I am particularly grateful to Mrs. Ndunge Elizabeth who tutored Research Methods, a subject that did helped a lot in this research. . I also acknowledge the help from all my classmates, specifically Nicholas, Denis, Jennifer among others. Finally, I wish to thank my family and friends for their support and encouragement throughout my study. God bless. . # . # . # . # . # . # . # . # . # . # . # . ABSTRACT . In early December 2019, an outbreak of coronavirus disease 2019 (COVID-19)(Organization &amp; others, 2020), caused by a novel severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2). . It occurred in Wuhan City, Hubei Province, China. On January 30, 2020, the World Health Organization declared the outbreak as a Public Health Emergency of International Concern. As of February 14, 2020, 49,053 laboratory-confirmed and 1,381(Worldometers, 2020) deaths have been reported globally. . Perceived risk of acquiring disease has led to many governments to institute a variety of control measures of reducing the spread of the virus and ways of ensuring that their citizens are well equipped with the required information about the virus. . The project aims to reduce the burden on the head of going to a website in search of the covid cases by developing a convincing Chabot where that information can be easily accessed. . A suitable algorithm is devised to search through the set of data and find a potential number. The program then replies to the user and provides a relevant web link if after the user is sent the reply. . Table of Contents . DECLARATION ii . DEDICATION iii . ACKNOLEDGEMENT v . ABSTRACT vi . List of figures ix . List of Tables x . ABREVIATIONS xi . CHAPTER 1: INTRODUCTION 1 . 1.1 BACKGROUND 1 . 1.2 PROBLEM STATEMENT 2 . 1.3 RESEARCH OBJECTIVES 3 . 1.3.1 General Objectives 3 . 1.3.2 Specific Objectives 3 . 1.3.3 Justification of the Study 3 . 1.3.4 Scope of the Study 4 . 1.3.5 Study Limitation 4 . CHAPTER 2: LITERATURE REVIEW 5 . 2.1 Case Studies 5 . 2.1.1 CASE 1 5 . 2.1.2 CASE 2 6 . 2.1.3 CASE 3 7 . 2.1.4 CASE 4 8 . CHAPTER 3: METHODOLOGY 9 . 3.1 INTRODUCTION 9 . 3.2 SYSTEM DEVELOPMENT LIFE CYCLE 9 . The purpose of waterfall method is that it allows for departmentalization and control. A schedule can be set with deadlines for each stage of development and a product can proceed through the development process model phases one by one. 9 . 3.2.1 REQUIREMENTS 10 . 3.2.2 RESEARCH DESIGN 11 . 3.2.3 IMPLEMENTATION 11 . 3.2.4 TESTING 11 . 3.2.5 DEPLOYMENT 12 . 3.2.6 MAINTENANCE 12 . 3.3 TOTAL POPULATION 12 . 3.4 SAMPLING PROCEDURE 12 . 3.4.1 Sample size 12 . 3.4.2 Sampling Design 13 . 3.5 DATA COLLECTION METHOD 13 . 3.5.1 Documents and Records 13 . 3.5.2 Internet Research 13 . CHAPTER FOUR: DESIGN AND ANALYSIS 14 . 4.1 INTRODUCTION 14 . 4.2 REQUIREMENT ANALYSIS 14 . 4.2.1 Functional Requirements 14 . 4.2.2 Non-Functional Requirements 14 . 4.3 DATA PROCESSING AND ANALYSIS 15 . 4.3.1 Questionnaire 15 . 4.4 SYSTEM ANALYSIS 18 . 4.4.1 INTRODUCTION 18 . 4.4.2 Sequence Diagram 18 . 4.4.3 Use Case Diagram 19 . CHAPTER FIVE: TESTING AND IMPLEMENTATION 20 . 5.1 CONFIGURING THE DEVELOPMENT ENVIRONMENT 20 . 5.1.1 PYTHON 3.5 20 . 5.1.2 INSTALLING PYTHON 3.5 REQUIREMENTS 21 . 5.2 THE IMPORT SYSTEM 21 . 5.3 RUNNING BOT.PY 22 . 5.3.1 BOT COMMANDS 24 . 5.3.2 START COMMAND 24 . 5.3.3 HELP COMMAND 25 . 5.3.4 WORLD COMMAND 26 . 5.3.5 FAQS COMMAND 27 . 5.3.6 SUBSCRIBE COMMAND 28 . 28 . 5.4 HEROKU 28 . 5.4.1 DEPLOYING TO HEROKU 29 . CHAPTER SIX: DISCUSSION, CONCLUSION AND RECOMMENDATIONS 31 . 5.1 INTRODUCTION 31 . 5.2 DISCUSSIONS 31 . 5.3 CONCLUSIONS 33 . 5.4 RECOMMENDATION 33 . 5.5 LIMITATIONS OF THE STUDY 34 . References 35 . Appendix A 38 . A1 PYTHON LANGUAGE GRAMMER SPECIFICATIONS 38 . A2 JSON LANGUAGE GRAMMER SPECIFICATIONS 43 . Appendix B 45 . Sample source code and output listing 45 . B1 COMMANDS CODE FOR THE BOT AND REPLIES 45 . B2 CODE FOR ACCESSING THE COVID-19 API SERVERS 50 . B3 MAIN SOURCE CODE OF THE BOT INCLUDING ACCESS TO THE BOT API TOKEN AND NOTIFY TIME FOR SENDING THE DAILY NOTIFICATIONS 53 . B4 JSON CODE CONTAINING BOT TOKEN AND TIMER 65 . List of figures . Figure 1 infected countries on a logarithmic scale.(AaronWard, 2020) 5 . Figure 2 Covid-19 visualization(localeai, 2020) 6 . Figure 3 Corona Virus Tracker Swift UI(alfianlosari, 2020) 7 . Figure 4 Deaths Per Million of Inhabitants(github, 2020) 8 . Figure 5 Waterfall model(creately.com, 2020) 10 . Figure 6 Respondents response on having used a chatbot before(docs.google.com, 2020) 16 . Figure 7 Respondents response on having faced challenges as they used the chatbot(docs.google.com, 2020) 16 . Figure 8 Respondents response on need of a covid chatbot(docs.google.com, 2020) 17 . Figure 9 Sequence Diagram(draw.io, 2020) 18 . Figure 10 Use Case Diagram(draw.io, 2020) 19 . Figure 11 Python download page 20 . Figure 12 pip argument 20 . Figure 13 python pip 20 . Figure 14 py -m pip 20 . Figure 15 requirements.txt 21 . Figure 16 pip install 21 . Figure 17 import modules 22 . Figure 18 bot.py run 22 . Figure 19 config.json 23 . Figure 20 CONFIG_FILE 23 . Figure 21 Commands list 23 . Figure 22 /start command 24 . Figure 23 /help command 25 . Figure 24 /world command 26 . Figure 25 /faqs command 27 . Figure 26 /subscribe command 28 . Figure 27 git push heroku master 28 . Figure 28 heroku login 29 . Figure 29 git clone 29 . Figure 30 clone 29 . Figure 31 commit 29 . Figure 32 Procfile 30 . Figure 33 console 30 . Figure 34 Console python3 bot.py 30 . List of Tables . Table 1 Respondents response 15 . ABREVIATIONS . API - Application programming interface . COVID-19 - Coronavirus Disease 2019 . SARS-CoV-2 - Severe acute respiratory syndrome coronavirus 2 . ARIMA - Autoregressive integrated moving average . URL - Uniform Resource Locator . ArcGIS – Arc Geographic Information System . WHO - World Health Organization . Q &amp;A - Question and Answer . ESRI - Environmental Systems Research Institute . CHAPTER 1: INTRODUCTION . 1.1 BACKGROUND . Since the outbreak of the corona virus there has been a need to have systems that will enable citizens of a country to have readily available information to make them get required information of what is going on. . This is after the famous Spanish flu(B. J. Jester et al., 2018) that hit the world 100 years ago(B. Jester et al., 2019) and people were not prepared enough for it despite technological inventions but as per the current technological inventions that we are now there is need to have some applications that allow people to get the required information to minimize the spread of the virus. . The purpose of the project is to build a telegram-based bot that feeds the subscriber information based on the latest count of corona virus that is current statistics of local total confirmed, deaths, and recovered cases. . The bot also provides advice from the government and the required rules to be followed provided by the government. The research findings help the Kenyan citizens to be aware and equipped with the knowledge of how to handle the virus situation and follow the regulations laid out by the government and also get track of the statistics in the country. . PROBLEM STATEMENT . According to the way the information about corona virus is being passed out via the television, radio, twitter(MOH_Kenya, 2020) and websites(Worldometers, 2020) there has been an ignorance of the information being conveyed thus seen the increase in the number of the corona virus related cases due to ignorance despite the information given. . The increase in the number of cases has been attributed to the ignorance of the information being conveyed by the government which has led to many people succumbing to the virus. . The aim of this project is to come up with an alternative method of information circulation to the people of Kenya to get timely the information provided by the government and follow up direct from their mobile phone (Telegram(telegram.org, 2020)). . RESEARCH OBJECTIVES . General Objectives . | | The main objective of this study is to contribute to the solution of updating people of the corona virus cases by developing a telegram bot that shows the daily count of corona virus cases in Kenya and the global count of the virus. . Specific Objectives . 1) To develop an information resource were all the relevant information about the questions and the answers will be stored. . 2) To provide a summarized format of the covid-19 cases such as the deaths, infected and recovered cases. . 3) To develop a bot interface which aims to give the ability to potential users and their friends to request data of covid-19 related cases in the chatbot and get convincing replies. . 1. ### Justification of the Study . The significance of the study should is to provide a channel for transmission of information about the corona virus cases directly from the government. It is important as the bot users will be able to get first-hand information from the government directly from their chat application saving their time of going to the website or other sources. . Scope of the Study . The study focuses on the telegram users and all other people in Kenya who are capable of joining telegram to make use of its open source API the encamp uses of running a bot . 1.3.5 Study Limitation . The bot does not provide previous data of the covid-19 related cases such data of the previous months or days. . CHAPTER 2: LITERATURE REVIEW . 2.1 Case Studies . 2.1.1 CASE 1 . Covidify . Corona virus report and dataset generator for python(AaronWard, 2020) that creates a time series dataset, Creates a daily stats dataset, forecast global and country confirmed cases, generate visualizations ,filter by country, filter by country, shows number of people currently infected and generates an excel report including all of the above. . An ARIMA model is trained and used to forecast the cumulative cases for N number of days into the future. . The following figure gives an example of Covidify displaying covid-19 data. . . Figure 1 infected countries on a logarithmic scale.(AaronWard, 2020) . 2.1.2 CASE 2 . Covid-19 live visualization . API project which gives the layers data to the webapp(localeai, 2020). The webapp currently supports the layers that are picked up from periodically generated file from GitHub repository. . The GitHub api url for the repo holds the layers data. It is used to pick up the last updated date from the latest commit to the repo. It uses the GitHub API, along with the static repository URL. . The following figure gives an example of Covid-19 live visualization displaying covid-19 data. . . Figure 2 Covid-19 visualization(localeai, 2020) . 2.1.3 CASE 3 . Corona Virus Tracker Swift UI . The project gets current statistics of global total confirmed, deaths, recovered cases, statistics of countries and regions total cases count World map with annotation pin and description of affected regions Datasets is provided by ArcGIS Esri Corona Virus dataset(alfianlosari, 2020). Basic advice to prevent and handle virus, myth busters Q &amp;A from WHO. . . Figure 3 Corona Virus Tracker Swift UI(alfianlosari, 2020) . 2.1.4 CASE 4 . Covid19-Dashboard . This project was supported by a virtual team of open source collaborators that gather data, make visualizations and perform analysis regarding the COVID-19 epidemic(github, 2020). . We saw that data scientists were struggling to share information with each other, so we used this project to aid in the sharing of data and information. . This project aims to offer an accessible way for data professionals to share dashboards (that are updated with new data automatically) without requiring any expertise in front end development. . . Figure 4 Deaths Per Million of Inhabitants(github, 2020) . CHAPTER 3: METHODOLOGY . 3.1 INTRODUCTION . This chapter deals with the research method that will be adopted and the analysis of the data collected. This study entails a descriptive survey design; the population that was the Kenya’s and the world population, sample design, data collection and analysis. . 3.2 SYSTEM DEVELOPMENT LIFE CYCLE . ### . The design and development of the bot will be followed by the waterfall model. . The purpose of waterfall method is that it allows for departmentalization and control. A schedule can be set with deadlines for each stage of development and a product can proceed through the development process model phases one by one. . It is easy to manage due to the rigidity of the model as each phase has specific deliverables and a review process and phases are processed and completed one at a time and they do not overlap. The waterfall model also works well for smaller projects like mine where requirements are very well understood. . The sample waterfall model is as shown in the diagram below. . . Figure 5 Waterfall model(creately.com, 2020) . 3.2.1 REQUIREMENTS . In this phase I will focus on possible requirements of the system for the development. Requirements to be gathered subsequent to the end user consultation includes Google Cloud platform(cloud.google.com, 2020) , Heroku(heroku.com, 2020) ,Telegram generated bot with a working API , Internet connection ,personal computer , mobile phone , Visual Studio Code(code.visualstudio.com, 2020) ,Git(git-scm.com, n.d.) client and python environment installed on the computer. . 3.2.2 RESEARCH DESIGN . Prior to beginning the actual coding, it is inevitable to understand what actions are to be taken and what they should like. The requirement specifications will be studied in detail in this phase and the design of the bot is prepared. The design specifications will be the base for the implementation and unit testing model phase. . Visual Studio Code will be used in the designing of the bot together with the bot to get the layout of the buttons to be used by the users and the texts to be displayed on the press of the button. . IMPLEMENTATION . After receiving the system design documents, the work will be shared into various modules and the real coding is commenced by use of Visual Studio Code. The system will be developed into small coding files such as the API file and the layout file. These units will later be integrated in the subsequent phase. Every unit will be tested for its functionality to meet the bot functionality. . 3.2.4 TESTING . The modules that will be divided into units will be integrated into a complete system and tested for proper coordination among modules and system behaves as per the specifications. The bot will be tested by being deployed to Google Cloud for its integration with the telegram bot API to start operational testing. . 3.2.5 DEPLOYMENT . Once the testing is completed and the bot is found to meet the user requirements it will be deployed to Heroku via the git client as Heroku only supports deployment by use of git.Postress(data.heroku.com, 2020) will be used to connect the bot with the database accessible(NovelCOVID REST API (NovelCOVID, 2020)) of the covid-19 cases the to the bots API and displayed to the users. . 3.2.6 MAINTENANCE . It is a never-ending phase. Once the system is running in production environment, problems may come up such as change of the database access URL. The issues that are related to the bot will be solved only after deployment of the system. The problems may arise from time to time and need to be solved. . ## . 3.3 TOTAL POPULATION . The total population to be considered it the world population which has already been counted for use by Worldometer that will be further broken down into Kenyan population and the top most affected countries in the world to see how other countries are doing with the corona virus. . 3.4 SAMPLING PROCEDURE . 3.4.1 Sample size . The sample size includes the world data that is fetched from the covid19 API which the main focus will be put on the Kenyan data such as the frequently asked questions highlighted in the bot and the Kenya command which makes it more accessible for users to get the Kenya data. . Sampling Design . Out of the world population data available in the API website ill sample Kenyan data to deal with and narrow down to the infected, deaths and recovered persons. . 3.5 DATA COLLECTION METHOD . 3.5.1 Documents and Records . Data is examined from documents containing relevant covid-19 cases such as journals and records containing covid-19 cases such as data of ArcGIS from GitHub spreadsheets . 3.5.2 Internet Research . The Internet will be a great source of information and material, majority of the research to be carried out will be done here to avoid reinventing the wheel. . CHAPTER FOUR: DESIGN AND ANALYSIS . 4.1 INTRODUCTION . In this chapter I looked at requirement analysis that is functional and non-functional requirements by mentioning, describing and giving examples. There is data analysis that is fetched from the COVID-19 API(lmao.ninja, 2020) and then and then analyzed and presented to the users to get the desired reply. Moreover, the analysis of the data can be analyzed and presented in an incremental or decrement format. The flow of the data from the COVID-19 API to the users will be represented by use-case diagram and sequence diagram by use of the python-telegram-bot. . 4.2 REQUIREMENT ANALYSIS . 4.2.1 Functional Requirements . The bot users can get immediate feedback of the daily infections, recovered and the death count of the day. . | The bot users can get the frequently asked questions about Corona Virus and provided the national help line which will be used to contact the government in case of imprecations. . | . 4.2.2 Non-Functional Requirements . Ease of accessibility – As the users can easily access the data by use of commands and the notification function that notifies the users with the daily updates of the Corona Virus. | . 4.3 DATA PROCESSING AND ANALYSIS . The processed data is not stored to any database within the bot but it is stored in the COVID-19 API database where several people can access it for research purpose and Governments for comparison. . 4.3.1 Questionnaire . The questionnaires we were able to reach out to 25 people. Out of the 7 questionnaires, 24 of them responded to the affirmative, whereas the other 1 did not see the proposed bot as a solution to the contribution of updating people of the COVID-19 cases. This translated to 95% positive response as compared to 5% to the negative. The following is the tabulated data and resultant table . Table 1 Respondents response . Number of Questionnaires . Respondents . Positive response Negative response . 25 | 24 | 1 | . 4.3.2 Charts and Graphs . . Figure 6 Respondents response on having used a chatbot before(docs.google.com, 2020) . Out of the 25 responses, 21 agreed to have used a bot before and therefore it would be easier to build a bot as many of them are familiar with how it works. . . Figure 7 Respondents response on having faced challenges as they used the chatbot(docs.google.com, 2020) . Out of the 25 responses 18 agreed that while they interacted with the bots they never experience problems using them, 5 of them had problems with the bot while 1 had a challenge that he highlighted. . . Figure 8 Respondents response on need of a covid chatbot(docs.google.com, 2020) . Out of the 25 responses from the questionnaires sent out 20 agreed that indeed they needed a chatbot with enabled features of accessing the covid 19 statistics as it will be simple for them to access the data. . 4.4 SYSTEM ANALYSIS . 4.4.1 INTRODUCTION . In this subchapter Sequence diagram and Use-case diagrams will be used to explain in details the flow of data from the API to the users as they interact with the bot . 4.4.2 Sequence Diagram . This diagram was instrumental in determining the sequence of actions executed on the system which included user input and system responses. It outlines the roles played by both the bot users and the API system via the bot in providing feedback to the users. . . Figure 9 Sequence Diagram(draw.io, 2020) . 4.4.3 Use Case Diagram . The class diagram demonstrates the relationships between the different objects in the system. Its importance is emphasized by the fact that the covid bot has an underlying database as opposed to a relational database thus it was instrumental in the design of the database. . . Figure 10 Use Case Diagram(draw.io, 2020) . CHAPTER FIVE: TESTING AND IMPLEMENTATION . # . In this chapter the functionality of the bot is outlined. The bot was implemented using python programming language and adhered to python-telegram-bot flow as stated in chapter 4 Design and Analysis. Specific testing is done to different functionalities of the bot. . 5.1 CONFIGURING THE DEVELOPMENT ENVIRONMENT . 5.1.1 PYTHON 3.5 . The first environment to install the python library from python.org which will run the codes that will be used by then bot. . . Figure 11 Python download page . This is followed by installing pip which is a command line program. When you install pip, a pip command is added to the system, which can be run from the command prompt as follows: . . Figure 12 pip argument . . Figure 13 python pip . . Figure 14 py -m pip . 5.1.2 INSTALLING PYTHON 3.5 REQUIREMENTS . . Figure 15 requirements.txt . Requirements include the files containing a list of items to be installed using pip install. In our case we shall use the pip install –r requirements.txt as follows: . . Figure 16 pip install . 5.2 THE IMPORT SYSTEM . The import statement is the most common way of invoking the import machinery, but it is not the only way. Functions such as importlib. import_module() and built-in __import__() can also be used to invoke the import machinery. . The import statement combines two operations; it searches for the named module, then it binds the results of that search to a name in the local scope. The search operation of the import statement is defined as a call to the __import__() function, with the appropriate arguments. . The return value of __import__() is used to perform the name binding operation of the import statement. See the import statement for the exact details of that name binding operation. . . Figure 17 import module . The datetime module imports the date of the day and the current time from the system that that the bot is running. . The import json command imports the .json library that will be used to access the config.json file which contains the bot token and the set notify_time. . The import sleep contains the set time rule that is set to avoid flood limits which is requirement when building telegram bots to avoid causing traffic in their servers. . 5.3 RUNNING BOT.PY . The bot.py file contains the executable command that is required by the python language to run the file. . . Figure 18 bot.py run . The bot.py file contains the accessible to the config.json file which contains the bot token that links the bot with the code in use. . . Figure 19 config.json . The CONFIG_FILE fetches the config.json during the START command intiate. . . Figure 20 CONFIG_FILE . After the /Start command, the bot is initiated and the users’ username is collected and stored in the bot database where the users’ commands will be stored and incase the user subscribes to to the notifications, their usernames’ will be used to send the notifications. . . Figure 21 Commands list . 5.3.1 BOT COMMANDS . ## . /start - Start the bot . /help - List of other available commands . /world - Worldwide stats . /kenya - Kenya’s current stats . /setcountry - Set to get notifications daily followed by i.e ‘kenya’ . /faqs - Frequently Asked Questions about COVID-19 . /today - Today’s summarized cases . /list - Arrange the world countries in list from most cases . /subscribe - Subscribe to daily notification updates . /donate - Donate to this project to move to fast servers . 5.3.2 START COMMAND . The start button is global command set to initialize the bot on the first run by the user, In this covidly bot the /start command initiates a reply to the user with the other basic commands to be used within the bot. . . Figure 22 /start command . 5.3.3 HELP COMMAND . The /help command is a global command in telegram bots that returns a help message. It can be a short text about what your bot can do and a list of commands and also includes the contacts to the developer and feedback button if necessary. In this bot it highlights the available commands to be used by the users and additional features by the bot such as the inline mode to tag the bot in any group chat and get a reply of the called country. . Data source of the bot’s figures are also highlighted and data access. . . Figure 23 /help command . 5.3.4 WORLD COMMAND . The /world command returns the total value of the worldwide corona virus cases as from the covid API. In case a picture of the command being called is found in the Wikipedia page, it will be returned together by the data and if no picture is found only data will be returned. . . Figure 24 /world command . 5.3.5 FAQS COMMAND . The /faqs command is shortened from frequently asked questions which basically is one of the key features of the bot to return to its users a list of frequently asked questions about corona virus which were fetched from the ministry of health official website. . . Figure 25 /faqs command . 5.3.6 SUBSCRIBE COMMAND . The /subscribe button triggers the [update.message.chat.id] functions which sends messages automatically to the users who pressed the command by storing their chat id in a database that will be triggered daily to send to the specified users notifications daily. This command only works if the user had previously selected the country Kenya then followed by the command /subscribe. . ## . . Figure 26 /subscribe command . ## . ## . ## . ## . ## . ## . 5.4 HEROKU . Heroku platform lets you deploy, run and manage applications written in Ruby, Node.js, Java, Python, Clojure, Scala, Go and PHP. The platform provides great flexibility in the choice of programming language, application framework, and organization of code thus the need for deploying my python app to Heroku as it will be easily accessible and every time a call is made by the users’ a feedback is quickly provided as compared to hosting the app locally. . To get started with Heroku an account is needed in order to be provided with the services. To deploy apps to Heroku, the git client will be used to push the apps over their servers. . . Figure 27 git push heroku master . 5.4.1 DEPLOYING TO HEROKU . . Figure 28 heroku login . ## . A login to Heroku via the git client to authenticate with the user account and allow deploying the worked files over to the Heroku servers. . ## . . Figure 29 git clone . ## . . Figure 30 clone . Cloning the empty repository which was created over the web to the local machine and the changing the working directory to the specified covidly repository. . ## . . Figure 31 commit . ## . After a successful clone the worked file is to be copied to the repository then pushed to the Heroku master repository which will automatically run detect the app language python and the install the requirements.txt file items to the python console. This is all achieved by use of the Procfile file in the root directory of the repository which specifies the command that will be used to run the entire app during the deployment period python3 bot.py . ## . . Figure 32 Procfile . ## . During the first run an access to the Heroku cloud will be necessary to start the bot worker after which the bot will run continuously on the Heroku cloud making it cheaper and affordable to run the bot for a long time compared to running the bot locally where the bot could have stopped in case the computer lost access to internet access or got shut down. . . Figure 33 console . . Figure 34 Console python3 bot.py . ## . References . AaronWard. (2020). covidify. . alfianlosari. (2020). CoronaVirusTrackerSwiftUI. . cloud.google.com. (2020). cloud.google.com. . code.visualstudio.com. (2020). code.visualstudio.com. . creately.com. (2020). creately.com. . data.heroku.com. (2020). data.heroku.com. . de Groot, R. J., Baker, S. C., Baric, R. S., Brown, C. S., Drosten, C., Enjuanes, L., Fouchier, R. A. M., Galiano, M., Gorbalenya, A. E., Memish, Z. A., Perlman, S., Poon, L. L. M., Snijder, E. J., Stephens, G. M., Woo, P. C. Y., Zaki, A. M., Zambon, M., &amp; Ziebuhr, J. (2013). Middle East Respiratory Syndrome Coronavirus (MERS-CoV): Announcement of the Coronavirus Study Group. Journal of Virology, 87(14), 7790–7792. https://doi.org/10.1128/jvi.01244-13 . git-scm.com. (n.d.). git . AaronWard. (2020). covidify.alfianlosari. (2020). CoronaVirusTrackerSwiftUI.cloud.google.com. (2020). cloud.google.com.code.visualstudio.com. (2020). code.visualstudio.com.creately.com. (2020). creately.com.data.heroku.com. (2020). data.heroku.com.docs.google.com. (2020). forms.draw.io. (2020). diagrams.net.git-scm.com. (n.d.). git-scm.com.github. (2020). covid19-dashboard.heroku.com. (2020). heroku.com.Jester, B. J., Uyeki, T. M., Patel, A., Koonin, L., &amp; Jernigan, D. B. (2018). 100 Years of Medical Countermeasures and Pandemic Influenza Preparedness. American Journal of Public Health, 108(11), 1469–1472. https://doi.org/10.2105/AJPH.2018.304586Jester, B., Uyeki, T. M., Jernigan, D. B., &amp; Tumpey, T. M. (2019). Historical and clinical aspects of the 1918 H1N1 pandemic in the United States. Virology, 527(May 2018), 32–37. https://doi.org/10.1016/j.virol.2018.10.019lmao.ninja. (2020). corona.localeai. (2020). covid19-live-visualization.NovelCOVID. (2020). API.Organization, W. H., &amp; others. (2020). Coronavirus disease 2019 (COVID-19): situation report, 72.telegram.org. (2020). telegram.org.Worldometers. (2020). COVID-19 Coronavirus Pandemic.-scm.com. . github. (2020). covid19-dashboard. . heroku.com. (2020). heroku.com. . Jester, B. J., Uyeki, T. M., Patel, A., Koonin, L., &amp; Jernigan, D. B. (2018). 100 Years of Medical Countermeasures and Pandemic Influenza Preparedness. American Journal of Public Health, 108(11), 1469–1472. https://doi.org/10.2105/AJPH.2018.304586 . Jester, B., Uyeki, T. M., Jernigan, D. B., &amp; Tumpey, T. M. (2019). Historical and clinical aspects of the 1918 H1N1 pandemic in the United States. Virology, 527(May 2018), 32–37. https://doi.org/10.1016/j.virol.2018.10.019 . localeai. (2020). covid19-live-visualization. . MOH_Kenya. (2020). #KomeshaCorona. . NovelCOVID. (2020). API. . Organization, W. H., &amp; others. (2020). Coronavirus disease 2019 (COVID-19): situation report, 72. . Rajendran, D. K., Rajagopal, V., Alagumanian, S., Santhosh Kumar, T., Sathiya Prabhakaran, S. P., &amp; Kasilingam, D. (2020). Systematic literature review on novel corona virus SARS-CoV-2: a threat to human era. VirusDisease. https://doi.org/10.1007/s13337-020-00604-z . Shereen, M. A., Khan, S., Kazmi, A., Bashir, N., &amp; Siddique, R. (2020). COVID-19 infection: Origin, transmission, and characteristics of human coronaviruses. Journal of Advanced Research, 24, 91–98. https://doi.org/10.1016/j.jare.2020.03.005 . Worldometers. (2020). COVID-19 Coronavirus Pandemic. . Zhang, C., Zheng, W., Huang, X., Bell, E. W., Zhou, X., &amp; Zhang, Y. (2020). Protein Structure and Sequence Reanalysis of 2019-nCoV Genome Refutes Snakes as Its Intermediate Host and the Unique Similarity between Its Spike Protein Insertions and HIV-1. Journal of Proteome Research, 19(4), 1351–1360. https://doi.org/10.1021/acs.jproteome.0c00129 . Zhang, L., &amp; Liu, Y. (2020). Potential interventions for novel coronavirus in China: A systematic review. In Journal of Medical Virology (Vol. 92, Issue 5). https://doi.org/10.1002/jmv.25707 . Appendix A . A1 PYTHON LANGUAGE GRAMMER SPECIFICATIONS . # Grammar for Python . # NOTE WELL: You should also follow all the steps listed at . # https://devguide.python.org/grammar/ . # Start symbols for the grammar: . # single_input is a single interactive statement; . # file_input is a module or sequence of commands read from an input file; . # eval_input is the input for the eval() functions. . # func_type_input is a PEP 484 Python 2 function type comment . # NB: compound_stmt in single_input is followed by extra NEWLINE! . # NB: due to the way TYPE_COMMENT is tokenized it will always be followed by a NEWLINE . single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE | . file_input: (NEWLINE | stmt)* ENDMARKER | . eval_input: testlist NEWLINE* ENDMARKER . decorator: ‘@’ dotted_name [ ‘(‘ [arglist] ‘)’ ] NEWLINE . decorators: decorator+ . decorated: decorators (classdef | funcdef | async_funcdef) | . async_funcdef: ASYNC funcdef . funcdef: ‘def’ NAME parameters [’-&gt;’ test] ‘:’ [TYPE_COMMENT] func_body_suite . parameters: ‘(‘ [typedargslist] ‘)’ . # The following definition for typedarglist is equivalent to this set of rules: . # . # arguments = argument (‘,’ [TYPE_COMMENT] argument)* . # argument = tfpdef [’=’ test] . # kwargs = ‘**’ tfpdef [’,’] [TYPE_COMMENT] . # args = ‘*’ [tfpdef] . *# kwonly_kwargs = (‘,’ [TYPE_COMMENT] argument)* (TYPE_COMMENT | [’,’ [TYPE_COMMENT] [kwargs]])* | . *# args_kwonly_kwargs = args kwonly_kwargs | kwargs* | . *# poskeyword_args_kwonly_kwargs = arguments ( TYPE_COMMENT | [’,’ [TYPE_COMMENT] [args_kwonly_kwargs]])* | . *# typedargslist_no_posonly = poskeyword_args_kwonly_kwargs | args_kwonly_kwargs* | . *# typedarglist = (arguments ‘,’ [TYPE_COMMENT] ‘/’ [’,’ [[TYPE_COMMENT] typedargslist_no_posonly]]) | (typedargslist_no_posonly)”* | . # . # It needs to be fully expanded to allow our LL(1) parser to work on it. . typedargslist: ( . (tfpdef [’=’ test] (‘,’ [TYPE_COMMENT] tfpdef [’=’ test])* ‘,’ [TYPE_COMMENT] ‘/’ [’,’ [ [TYPE_COMMENT] tfpdef [’=’ test] ( . ’,’ [TYPE_COMMENT] tfpdef [’=’ test])* (TYPE_COMMENT | [’,’ [TYPE_COMMENT] [ | . ’*’ [tfpdef] (‘,’ [TYPE_COMMENT] tfpdef [’=’ test])* (TYPE_COMMENT | [’,’ [TYPE_COMMENT] [’**’ tfpdef [’,’] [TYPE_COMMENT]]]) | . ’**’ tfpdef [’,’] [TYPE_COMMENT]]]) | . ’*’ [tfpdef] (‘,’ [TYPE_COMMENT] tfpdef [’=’ test])* (TYPE_COMMENT | [’,’ [TYPE_COMMENT] [’**’ tfpdef [’,’] [TYPE_COMMENT]]]) | . ’**’ tfpdef [’,’] [TYPE_COMMENT]]] ) | . (tfpdef [’=’ test] (‘,’ [TYPE_COMMENT] tfpdef [’=’ test])* (TYPE_COMMENT | [’,’ [TYPE_COMMENT] [ | . ’*’ [tfpdef] (‘,’ [TYPE_COMMENT] tfpdef [’=’ test])* (TYPE_COMMENT | [’,’ [TYPE_COMMENT] [’**’ tfpdef [’,’] [TYPE_COMMENT]]]) | . ’**’ tfpdef [’,’] [TYPE_COMMENT]]]) | . ’*’ [tfpdef] (‘,’ [TYPE_COMMENT] tfpdef [’=’ test])* (TYPE_COMMENT | [’,’ [TYPE_COMMENT] [’**’ tfpdef [’,’] [TYPE_COMMENT]]]) | . ’**’ tfpdef [’,’] [TYPE_COMMENT]) | . ) . tfpdef: NAME [’:’ test] . # The following definition for varargslist is equivalent to this set of rules: . # . # arguments = argument (‘,’ argument )* . # argument = vfpdef [’=’ test] . # kwargs = ‘**’ vfpdef [’,’] . # args = ‘*’ [vfpdef] . # kwonly_kwargs = (‘,’ argument )* [’,’ [kwargs]] . *# args_kwonly_kwargs = args kwonly_kwargs | kwargs* | . # poskeyword_args_kwonly_kwargs = arguments [’,’ [args_kwonly_kwargs]] . *# vararglist_no_posonly = poskeyword_args_kwonly_kwargs | args_kwonly_kwargs* | . *# varargslist = arguments ‘,’ ‘/’ [’,’[(vararglist_no_posonly)]] | (vararglist_no_posonly)* | . # . # It needs to be fully expanded to allow our LL(1) parser to work on it. . varargslist: vfpdef [’=’ test ](‘,’ vfpdef [’=’ test])* ‘,’ ‘/’ [’,’ [ (vfpdef [’=’ test] (‘,’ vfpdef [’=’ test])* [’,’ [ . ’*’ [vfpdef] (‘,’ vfpdef [’=’ test])* [’,’ [’**’ vfpdef [’,’]]] . ’**’ vfpdef [’,’]]] | . ’*’ [vfpdef] (‘,’ vfpdef [’=’ test])* [’,’ [’**’ vfpdef [’,’]]] | . ’**’ vfpdef [’,’]) ]] | (vfpdef [’=’ test] (‘,’ vfpdef [’=’ test])* [’,’ [ | . ’*’ [vfpdef] (‘,’ vfpdef [’=’ test])* [’,’ [’**’ vfpdef [’,’]]] . ’**’ vfpdef [’,’]]] | . ’*’ [vfpdef] (‘,’ vfpdef [’=’ test])* [’,’ [’**’ vfpdef [’,’]]] | . ’**’ vfpdef [’,’] | . ) . vfpdef: NAME . stmt: simple_stmt | compound_stmt | . simple_stmt: small_stmt (‘;’ small_stmt)* [’;’] NEWLINE . small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt | . import_stmt | global_stmt | nonlocal_stmt | assert_stmt) | . expr_stmt: testlist_star_expr (annassign | augassign (yield_expr | testlist) | . [(‘=’ (yield_expr | testlist_star_expr))+ [TYPE_COMMENT]] ) | . annassign: ‘:’ test [’=’ (yield_expr | testlist_star_expr)] | . testlist_star_expr: (test | star_expr) (‘,’ (test | star_expr))* [’,’] | . augassign: (‘+=’ | ’-=’ | ’*=’ | ’@=’ | ’/=’ | ’%=’ | ‘&amp;=’ | ’ | =’ | ’^=’ | . ’&lt;&lt;=’ | ’&gt;&gt;=’ | ’**=’ | ’//=’) | . # For normal and annotated assignments, additional restrictions enforced by the interpreter . del_stmt: ‘del’ exprlist . pass_stmt: ‘pass’ . flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt | . break_stmt: ‘break’ . continue_stmt: ‘continue’ . return_stmt: ‘return’ [testlist_star_expr] . yield_stmt: yield_expr . raise_stmt: ‘raise’ [test [‘from’ test]] . import_stmt: import_name | import_from | . import_name: ‘import’ dotted_as_names . *# note below: the (‘.’ | ‘…’) is necessary because ‘…’ is tokenized as ELLIPSIS* | . import_from: (‘from’ ((‘.’ | ‘…’)* dotted_name | (‘.’ | ‘…’)+) | . ‘import’ (‘*’ | ’(‘ import_as_names ‘)’ | import_as_names)) | . import_as_name: NAME [‘as’ NAME] . dotted_as_name: dotted_name [‘as’ NAME] . import_as_names: import_as_name (‘,’ import_as_name)* [’,’] . dotted_as_names: dotted_as_name (‘,’ dotted_as_name)* . dotted_name: NAME (‘.’ NAME)* . global_stmt: ‘global’ NAME (‘,’ NAME)* . nonlocal_stmt: ‘nonlocal’ NAME (‘,’ NAME)* . assert_stmt: ‘assert’ test [’,’ test] . compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt | . async_stmt: ASYNC (funcdef | with_stmt | for_stmt) | . if_stmt: ‘if’ namedexpr_test ‘:’ suite (‘elif’ namedexpr_test ‘:’ suite)* [‘else’ ‘:’ suite] . while_stmt: ‘while’ namedexpr_test ‘:’ suite [‘else’ ‘:’ suite] . for_stmt: ‘for’ exprlist ‘in’ testlist ‘:’ [TYPE_COMMENT] suite [‘else’ ‘:’ suite] . try_stmt: (‘try’ ‘:’ suite . ((except_clause ‘:’ suite)+ . [‘else’ ‘:’ suite] . [‘finally’ ‘:’ suite] | . ‘finally’ ‘:’ suite)) . with_stmt: ‘with’ with_item (‘,’ with_item)* ‘:’ [TYPE_COMMENT] suite . with_item: test [‘as’ expr] . # NB compile.c makes sure that the default except clause is last . except_clause: ‘except’ [test [‘as’ NAME]] . suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT | . namedexpr_test: test [’:=’ test] . test: or_test [‘if’ or_test ‘else’ test] | lambdef | . test_nocond: or_test | lambdef_nocond | . lambdef: ‘lambda’ [varargslist] ‘:’ test . lambdef_nocond: ‘lambda’ [varargslist] ‘:’ test_nocond . or_test: and_test (‘or’ and_test)* . and_test: not_test (‘and’ not_test)* . not_test: ‘not’ not_test | comparison | . comparison: expr (comp_op expr)* . # &lt;&gt; isn’t actually a valid comparison operator in Python. It’s here for the . # sake of a __future__ import described in PEP 401 (which really works :-) . comp_op: ‘&lt;’ | ’&gt;’ | ’==’ | ’&gt;=’ | ’&lt;=’ | ’&lt;&gt;’ | ’!=’ | ‘in’ | ‘not’ ‘in’ | ‘is’ | ‘is’ ‘not’ | . star_expr: ‘*’ expr . expr: xor_expr (‘ | ’ xor_expr)* | . xor_expr: and_expr (‘^’ and_expr)* . and_expr: shift_expr (‘&amp;’ shift_expr)* . shift_expr: arith_expr ((‘&lt;&lt;’ | ’&gt;&gt;’) arith_expr)* | . arith_expr: term ((‘+’ | ’-‘) term)* | . term: factor ((‘*’ | ’@’ | ’/’ | ’%’ | ’//’) factor)* | . factor: (‘+’ | ’-‘ | ’~’) factor | power | . power: atom_expr [’**’ factor] . atom_expr: [AWAIT] atom trailer* . atom: (‘(‘ [yield_expr | testlist_comp] ‘)’ | . ’[’ [testlist_comp] ‘]’ | . ’{‘ [dictorsetmaker] ‘}’ | . NAME | NUMBER | STRING+ | ‘…’ | ‘None’ | ‘True’ | ‘False’) | . testlist_comp: (namedexpr_test | star_expr) ( comp_for | (‘,’ (namedexpr_test | star_expr))* [’,’] ) | . trailer: ‘(‘ [arglist] ‘)’ | ’[’ subscriptlist ‘]’ | ’.’ NAME | . subscriptlist: subscript (‘,’ subscript)* [’,’] . subscript: test | [test] ‘:’ [test] [sliceop] | . sliceop: ‘:’ [test] . exprlist: (expr | star_expr) (‘,’ (expr | star_expr))* [’,’] | . testlist: test (‘,’ test)* [’,’] . dictorsetmaker: ( ((test ‘:’ test | ’**’ expr) | . (comp_for | (‘,’ (test ‘:’ test | ’**’ expr))* [’,’])) | . ((test | star_expr) | . (comp_for | (‘,’ (test | star_expr))* [’,’])) ) | . classdef: ‘class’ NAME [’(‘ [arglist] ‘)’] ‘:’ suite . arglist: argument (‘,’ argument)* [’,’] . # The reason that keywords are test nodes instead of NAME is that using NAME . # results in an ambiguity. ast.c makes sure it’s a NAME. . # “test ‘=’ test” is really “keyword ‘=’ test”, but we have no such token. . # These need to be in a single rule to avoid grammar that is ambiguous . # to our LL(1) parser. Even though ‘test’ includes ‘*expr’ in star_expr, . # we explicitly match ‘*’ here, too, to give it proper precedence. . # Illegal combinations and orderings are blocked in ast.c: . # multiple (test comp_for) arguments are blocked; keyword unpackings . # that precede iterable unpackings are blocked; etc. . argument: ( test [comp_for] | . test ‘:=’ test | . test ‘=’ test | . ’**’ test | . ’*’ test ) . comp_iter: comp_for | comp_if | . sync_comp_for: ‘for’ exprlist ‘in’ or_test [comp_iter] . comp_for: [ASYNC] sync_comp_for . comp_if: ‘if’ test_nocond [comp_iter] . # not used in grammar, but may appear in “node” passed from Parser to Compiler . encoding_decl: NAME . yield_expr: ‘yield’ [yield_arg] . yield_arg: ‘from’ test | testlist_star_expr | . # the TYPE_COMMENT in suites is only parsed for funcdefs, . # but can’t go elsewhere due to ambiguity . func_body_suite: simple_stmt | NEWLINE [TYPE_COMMENT NEWLINE] INDENT stmt+ DEDENT | . func_type_input: func_type NEWLINE* ENDMARKER . func_type: ‘(‘ [typelist] ‘)’ ‘-&gt;’ test . # typelist is a modified typedargslist (see above) . typelist: (test (‘,’ test)* [’,’ . [’*’ [test] (‘,’ test)* [’,’ ‘**’ test] | ’**’ test]] | . ’*’ [test] (‘,’ test)* [’,’ ‘**’ test] | ’**’ test) | . ## A2 JSON LANGUAGE GRAMMER SPECIFICATIONS . { .     ”links”: { .       ”self”: ”http://example.com/articles”, .       ”next”: ”http://example.com/articles?page[offset]=2”, .       ”last”: ”http://example.com/articles?page[offset]=10” .     }, .     ”data”: [{ .       ”type”: ”articles”, .       ”id”: ”1”, .       ”attributes”: { .         ”title”: ”JSON:API paints my bikeshed!” .       }, .       ”relationships”: { .         ”author”: { .           ”links”: { .             ”self”: ”http://example.com/articles/1/relationships/author”, .             ”related”: ”http://example.com/articles/1/author” .           }, .           ”data”: { ”type”: ”people”, ”id”: ”9” } .         }, .         ”comments”: { .           ”links”: { .             ”self”: ”http://example.com/articles/1/relationships/comments”, .             ”related”: ”http://example.com/articles/1/comments” .           }, .           ”data”: [ .             { ”type”: ”comments”, ”id”: ”5” }, .             { ”type”: ”comments”, ”id”: ”12” } .           ] .         } .       }, .       ”links”: { .         ”self”: ”http://example.com/articles/1” .       } .     }], .     ”included”: [{ .       ”type”: ”people”, .       ”id”: ”9”, .       ”attributes”: { .         ”firstName”: ”Dan”, .         ”lastName”: ”Gebhardt”, .         ”twitter”: ”dgeb” .       }, .       ”links”: { .         ”self”: ”http://example.com/people/9” .       } .     }, { .       ”type”: ”comments”, .       ”id”: ”5”, .       ”attributes”: { .         ”body”: ”First!” .       }, .       ”relationships”: { .         ”author”: { .           ”data”: { ”type”: ”people”, ”id”: ”2” } .         } .       }, .       ”links”: { .         ”self”: ”http://example.com/comments/5” .       } .     }, { .       ”type”: ”comments”, .       ”id”: ”12”, .       ”attributes”: { .         ”body”: ”I like XML better” .       }, .       ”relationships”: { .         ”author”: { .           ”data”: { ”type”: ”people”, ”id”: ”9” } .         } .       }, .       ”links”: { .         ”self”: ”http://example.com/comments/12” .       } .     }] .   } . Appendix B . Sample source code and output listing . B1 COMMANDS CODE FOR THE BOT AND REPLIES . { .     ”start”: [ .         ”Greetings {}!”, .         ””, .         ”You just found @Coronaviruskenyabot  uD83E uDDA0. This bot gives you up-to-date information on Kenya and worldwide spread of the Covid-19 disease.”, .         ””, .         ”To get a quick overview of the current status, try /today ,/kenya or /world.”, .         ”You can view detailed statistics of your country by using the /list command.”, .         ”Subscribe to daily updates with /subscribe for automatic notifications.”, .         ”*MAKE SURE TO USE THE /setcountry COMMAND TO SET YOUR COUNNTRY FOLLOWED BY /subscribe TO GET DAILY NOTIFICATIONS*”, .         ””, .         ”*To get the FAQs about corona virus disease* use /faqs”, .         ””, .         ”*You have no idea what COVID-19 is or having doubts* use /faqs”, .         ””, .         ”For more, see /help.” .     ], .     ”donate”:[ .         ” uD83E uDDA0 @Coronaviruskenyabot  *Donate*  *#STAYSAFE*”, .         ”Donate to this project for  more exclusive platforms such as WhatsApp. n”, .         ”*If you’d like to donate do it* [HERE](https://mikeowino.com/donation)” .     ], .     ”help”: [ .         ” uD83E uDDA0 @Coronaviruskenyabot Help *#STAYSAFE*”, .         ””, .         ”This bot gives you up-to-date information on the worldwide spread of the COVID-19 disease.”, .         ””, .         ”*/world*   u2022  Worldwide case statistics.”, .         ”*/today*   u2022  Summary of today’s cases.”, .         ”*/list*   u2022  List of countries ordered by number of cases.”, .         ”*/subscribe*   u2022  Subscribe to daily status updates with new case statistics.”, .         ”*/help*   u2022  Show this help.”, .         ””, .         ”You can use this bot in any chat or group without adding it by typing `@Coronaviruskenyabot [country]`.”, .         ””, .         ”—”, .         ” u2139 uFE0F For issues and feedback, [Contact Me](https://t.me/decipha). n”, .         ”Sources: [WORLDOMETERS](https://www.worldometers.info/coronavirus/country/kenya/), [WHO](https://covid19.who.int), [MOH](https://twitter.com/MOH_Kenya). n”, .         ”Data is accessed via [NovelCOVID API](https://github.com/NovelCOVID/API).” .     ], .     ”faqs”: [ .         ” uD83E uDDA0 @Coronaviruskenyabot FAQs *#STAYSAFE*”, .         ””, .         ”*From the Government*”, .         ””, .         ”*IF YOU FEEL UNWELL, HAVE A COLD, A COUGH OR FEVER, PLEASE CALL* 719 *OR TEXT* 719”, .         ””, .         ”*What is a Coronavirus ?*”, .         ”Coronaviruses are a large family of viruses that are known to cause illness ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS) and Severe Acute Respiratory Syndrome (SARS).”, .         ””, .         ”*What is novel coronavirus ?*”, .         ”A novel coronavirus (CoV) is a new strain of coronavirus that has not been previously identified in humans.”, .         ””, .         ”*Can humans get infected from novel coronavirus from animal source ?*”, .         ”Coronaviruses are a large family of viruses that are common in animals. Occasionally, people get infected with these viruses which may then spread to other people.Possible animal sources of COVID-19 have not yet been confirmed.”, .         ”To protect yourself, such as when visiting live animal markets, avoid direct contact with animals and surfaces in contact with animals. Ensure good food safety practices at all times. Handle raw meat, milk or animal organs with care to avoid contamination of uncooked foods and avoid consuming raw or undercooked animal products.”, .         ””, .         ”*What are the symptoms of COVID-19 ?*”, .         ”common signs include respiratory *symptoms, fever, cough, shortness of breath, and breathing difficulties.* In more severe cases, infection can cause *pneumonia, severe acute respiratory syndrome, kidney failure and even death.*”, .         ””, .         ”*Can the virus that causes COVID-19 be transmitted through the air ?*”, .         ”Studies to date suggest that the virus that causes COVID-19 is mainly transmitted through contact with respiratory droplets rather than through the air”, .         ””, .         ”*Is there a vaccine for novel coronavirus ?*”, .         ”Not yet. To date, there is no vaccine and no specific antiviral medicine to prevent or treat COVID-2019. However, those affected should receive care to relieve symptoms. People with serious illness should be hospitalized. Most patients recover thanks to supportive care.” .      .     ], .     ”today”: [ .         ” uD83D uDCDD Status on {:%Y-%m-%d} at {:%H:%m} UTC *#STAYSAFE*”, .         ””, .         ” uD83C uDF10 Worldwide, `{:,}` COVID-19 infections have been reported. `{:,}` infected people died.”, .         ” uD83E uDDA0 Today, there have been `{:,}` new cases.”, .         ” u26B0 uFE0F The number of deaths since 0:00 UTC is `{:,}`.”, .         ”More: /world”, .         ”” .     ], .     ”today_country”: [ .         ”{} In {}, `{:,}` infections have been reported. `{:,}` infected people died.”, .         ” uD83E uDDA0 Today, there have been `{:,}` new cases.”, .         ” u26B0 uFE0F The number of deaths since 0:00 UTC is `{:,}`.”, .         ”More: /{}”, .         ”” .     ], .     ”today_footer”: ”/list   u2022  /setcountry   u2022  /help”, .     ”stats_table”: [ .         ”COVID-19 Statistics for *{}* {}”, .         ””, .         ” uD83E uDDA0  `{:,}`  estimated cases”, .         ” uD83C uDF21  `{:,}`  active (`{:.1%}`)”, .         ” uD83D uDD06  `{:,}`  recovered (`{:.1%}`)”, .         ” u26B0 uFE0F  `{:,}`  deaths (`{:.1%}`)”, .         ””, .         ”_Today_  uD83D uDCC6”, .         ” uD83E uDDA0  `+ {:,}`  new cases”, .         ” u26B0 uFE0F  `+ {:,}`  deaths”, .         ”” .     ], .     ”stats_table_more”: [ .         ” uD83D uDC65  `{:,}`  cases per million people”, .         ” uD83D uDC65  `{:,}` deaths per million people”, .         ”” .     ], .     ”stats_table_simple”: [ .         ”COVID-19 Statistics for *{}* {}”, .         ””, .         ” uD83E uDDA0  `{:,}`  estimated cases”, .         ” u26B0 uFE0F  `{:,}`  deaths (`{:.1%}`)”, .         ”” .     ], .     ”stats_updated”: ”_Updated: {:%Y-%m-%d %H:%m} UTC_”, .     ”stats_more”: ”More”, .     ”stats_less”: ”Less”, .     ”more”: ”More: @Coronaviruskenyabot”, .     ”page_left”: ” u25C0 uFE0F Page {}”, .     ”page_right”: ”Page {}  u25B6 uFE0F”, .     ”to_start”: ” u23EA To Start”, .     ”to_end”: ”To End  u23E9”, .     ”list_header”: ” uD83D uDCCA Countries by *{}* n”, .     ”no_data”: ”Sorry, no data available! Try again later.”, .     ”unknown_place”: ”Please use the available commands to get a reply.”, .     ”no_country_set”: ”IFf you have not configured your country. Use /setcountry to configure it.”, .     ”setcountry_start”: [ .         ”To set your country, send your country name.”, .         ”Send /cancel to cancel.” .     ], .     ”cancel”: ”Cancelled.”, .     ”setcountry_success”: ”Successfully set your country to *{}*.”, .     ”subscribe”: [ .         ”You have subscribed to daily case updates.”, .         ”To unsubscribe, send /unsubscribe.” .     ], .     ”unsubscribe”: [ .         ”You have unsubscribed from daily updates.”, .         ”To re-subscribe, send /subscribe.” .     ], .     ”sort_order”: ”Sort order  uD83D uDCCA”, .     ”back”: ” u25C0 uFE0F Back”, .     ”sort_order_cases”: ” uD83E uDDA0 total”, .     ”sort_order_casesPerOneMillion”: ” uD83E uDDA0 / million”, .     ”sort_order_todayCases”: ” uD83E uDDA0 today”, .     ”sort_order_deaths”: ” u26B0 uFE0F total”, .     ”sort_order_deathsPerOneMillion”: ” u26B0 uFE0F / million”, .     ”sort_order_todayDeaths”: ” u26B0 uFE0F today” . } . ## . B2 CODE FOR ACCESSING THE COVID-19 API SERVERS . import requests . BASE_URL=”https://corona.lmao.ninja/v2/” . class CovidApi: .     ”&quot;”A simple wrapper for the NovelCOVID API (https://github.com/NovelCOVID/API). .     ””” .     def __init__(self): .         self.countries = self._all_countries() .         self.name_map = self._build_name_map(self.countries) .         self.us_states = self._all_us_states() .         self.de_states = self._all_de_states() .     def _clean(self, s): .         s = s.replace(‘ xad’, ’’) .         s = s.replace(‘ n’, ’’) .         return s .     def _build_name_map(self, countries): .         name_map = {} .         for iso2, country in countries.items(): .             name_map[country[‘iso2’].lower()] = iso2 .             name_map[country[‘iso3’].lower()] = iso2 .             name_map[country[‘name’].lower()] = iso2 .         return name_map .     def _all_countries(self): .         response = requests.get(BASE_URL+”countries”) .         if response.status_code == 200: .             countries = {} .             for item in response.json(): .                 iso2 = item[‘countryInfo’][‘iso2’] .                 if iso2: .                     countries[iso2] = item[‘countryInfo’] .                     countries[iso2][‘name’] = item[‘country’] .             return countries .         else: .             return {} .     def _all_us_states(self): .         response = requests.get(BASE_URL+”states”) .         if response.status_code == 200: .             countries = [] .             for item in response.json(): .                 countries.append(item[‘state’]) .             return countries .         else: .             return [] .     def _all_de_states(self): .         response = requests.get(BASE_URL+”gov/de”) .         if response.status_code == 200: .             countries = [] .             for item in response.json(): .                 if item[‘province’].lower() != ’total’: .                     countries.append(self._clean(item[‘province’])) .             return countries .         else: .             return [] .     def cases_world(self): .         response = requests.get(BASE_URL+”all”) .         if response.status_code == 200: .             return response.json() .         else: .             return None .     def cases_country_list(self, sort_by=”cases”): .         response = requests.get(BASE_URL+”countries”, params={‘sort’: sort_by}) .         if response.status_code == 200: .             return [item for item in response.json() if item[‘countryInfo’][‘iso2’]] .         else: .             return [] .     def cases_country(self, country): .         country_code = self.name_map[country.lower()] .         response = requests.get(BASE_URL+”countries/{}”.format(country_code)) .         if response.status_code == 200: .             data = response.json() .             del data[‘countryInfo’] .             return data .         else: .             return None .     def cases_us_state(self, state): .         response = requests.get(BASE_URL+”states/{}”.format(state)) .         if response.status_code == 200: .             data = response.json() .             # additions to unify format with countries .             data[‘recovered’] = data[‘cases’] - data[‘active’] - data[‘deaths’] .             return data .         else: .             return None .     def cases_de_state(self, state): .         response = requests.get(BASE_URL+”gov/de”) .         if response.status_code == 200: .             data = response.json() .             filtered = [item for item in data if self._clean(item[‘province’].lower()) == state.lower()] .             return filtered[0] if len(filtered) &gt; 0 else None .         else: .             return None . B3 MAIN SOURCE CODE OF THE BOT INCLUDING ACCESS TO THE BOT API TOKEN AND NOTIFY TIME FOR SENDING THE DAILY NOTIFICATIONS . #!/usr/bin/env python3 . from datetime import datetime . import json . import logging . import re . import requests . from time import sleep . from telegram import ParseMode . from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent . from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, InlineQueryHandler . from telegram.ext import PicklePersistence, ConversationHandler, DispatcherHandlerStop . from telegram.error import TelegramError . from statistics_api import CovidApi . import wikidata . from resources.resolver import resolve . from utils import * . CONFIG_FILE=”config.json” . logging.basicConfig(format=’%(asctime)s - %(name)s - %(levelname)s - %(message)s’, .                     level=logging.INFO) . logger = logging.getLogger(__name__) . WORLD_IDENT=”world” . api = CovidApi() . # command /start . def command_start(update, context): .     update.message.reply_markdown(resolve(‘start’, lang(update), update.message.from_user.first_name)) . #command /faqs . def command_faqs(update, context): .     update.message.reply_markdown(resolve(‘faqs’, lang(update)), disadle_web_page_preview=True) . #command /donate . def command_donate(update, context): .     update.message.reply_markdown(resolve(‘donate’, lang(update)), disable_web_page_preview=True) . # command /help . @handler_decorator . def command_help(update, context): .     update.message.reply_markdown(resolve(‘help’, lang(update)), disable_web_page_preview=True) . ### World &amp; country stats + status report ### . def format_stats(update, code, data, icon=None, detailed=False): .     if code in api.countries: .         name = api.countries[code][‘name’] .     elif code == WORLD_IDENT: .         name = ”the World” .         icon = ’ U0001f310’ .     else: .         name = code .     if not icon: .         icon = flag(code) .     p_dead = data[‘deaths’] / data[‘cases’] .     if ’active’ in data and ’todayCases’ in data: # we have detailed data, so use more detailed view .         p_active = data[‘active’] / data[‘cases’] .         p_recov = data[‘recovered’] / data[‘cases’] .         text = resolve(‘stats_table’, lang(update), name, icon, data[‘cases’], .                 data[‘active’], p_active, data[‘recovered’], p_recov, data[‘deaths’], p_dead, .                 data[‘todayCases’], data[‘todayDeaths’]) .         if detailed: .             text += ’ n’+resolve(‘stats_table_more’, lang(update), data[‘casesPerOneMillion’] or 0, .                             data[‘deathsPerOneMillion’] or 0) .     else: # we only have limited data .         text = resolve(‘stats_table_simple’, lang(update), name, icon, data[‘cases’], data[‘deaths’], p_dead) .     text += ’ n’+resolve(‘stats_updated’, lang(update), datetime.utcfromtimestamp(data[‘updated’] / 1e3)) .     return text . def get_stats_keyboard(update, country_code, is_detailed=False): .     keyboard = [[]] .     caption_key = ’stats_more’ if not is_detailed else ’stats_less’ .     caption = resolve(caption_key, lang(update)) .     keyboard[0].append(InlineKeyboardButton(caption, .                     callback_data=”stats {} {}”.format(country_code, 1 if is_detailed else 0))) .     return InlineKeyboardMarkup(keyboard) . # the text used for daily notifications and /today . def get_status_report(country_code=None, lang=”en”): .     data = api.cases_world() .     if data: .         dt = datetime.utcfromtimestamp(data[‘updated’] / 1e3) .         text = resolve(‘today’, lang, .                 dt, dt, data[‘cases’], data[‘deaths’], data[‘todayCases’], data[‘todayDeaths’]) .         # fetch data of home country if set .         if country_code: .             country_data = api.cases_country(country_code) .             text += ’ n’+resolve(‘today_country’, lang, flag(country_code), .                             api.countries[country_code][‘name’], country_data[‘cases’], country_data[‘deaths’], .                             country_data[‘todayCases’], country_data[‘todayDeaths’], country_code.lower()) .         else: .             text += ’ n_‘+resolve(‘no_country_set’, lang)+’_ n’ .         text += ’ n’+resolve(‘today_footer’, lang) .     else: .         text = resolve(‘no_data’,lang) .     return text . # command /today . @handler_decorator . def command_today(update, context): .     if ’country’ in context.chat_data: .         country_code = context.chat_data[‘country’] .     else: .         country_code = None .     text = get_status_report(country_code, lang(update)) .     update.message.reply_markdown(text) . def format_list_item(data, order): .     code = data[‘countryInfo’][‘iso2’].lower() .     icon = resolve(‘sort_order_‘+order, None).split(‘ ’)[0] .     number = data[order] .     text = ””” . {} *{}  -  {}*  -  {} `{:,}` .     ””“.format(flag(code), data[‘country’], ’/’+code, icon, number) .     return text . def get_list_keyboard(update, current_index, limit, last=False): .     keyboard = [[]] .     if current_index &gt; 0: .         keyboard[0].append(InlineKeyboardButton(resolve(‘page_left’, lang(update), current_index), .                                 callback_data=”list {} {}”.format(current_index-1, limit))) .     if not last: .         keyboard[0].append(InlineKeyboardButton(resolve(‘page_right’, lang(update), current_index+2), .                                 callback_data=”list {} {}”.format(current_index+1, limit))) .     if current_index &gt; 0: .         keyboard.append([ .             InlineKeyboardButton(resolve(‘to_start’, lang(update)), callback_data=”list 0 {}”.format(limit))]) .     else: .         keyboard.append([ .             InlineKeyboardButton(resolve(‘to_end’, lang(update)), callback_data=”list -1 {}”.format(limit))]) .     keyboard.append([ .         InlineKeyboardButton(resolve(‘sort_order’, lang(update)), .                 callback_data=”list_order_menu 1 ({} {} {})”.format(current_index, limit, int(last))) .     ]) .     return InlineKeyboardMarkup(keyboard) . SORT_ORDERS = [‘cases’, ’deaths’, ’casesPerOneMillion’, ’deathsPerOneMillion’, ’todayCases’, ’todayDeaths’] . def get_list_order_keyboard(update, current_index, limit, last=False): .     keyboard = [] .     for i, sort_order in enumerate(SORT_ORDERS): .         button = InlineKeyboardButton(resolve(“sort_order_“+sort_order, lang(update)), callback_data=”list_order {} {}”.format(sort_order, limit)) .         if i % 2 == 0: .             l = [button] .         else: .             l.append(button) .             keyboard.append(l) .     keyboard.append([InlineKeyboardButton(resolve(‘back’, lang(update)), .                 callback_data=”list_order_menu 0 ({} {} {})”.format(current_index, limit, int(last)))]) .     return InlineKeyboardMarkup(keyboard) . # command /world . @handler_decorator . def command_world(update, context): .     photo_file = wikidata.cases_world_map() .     data = api.cases_world() .     if data: .         text = format_stats(update, WORLD_IDENT, data) .         update.message.reply_photo(photo=photo_file, caption=text, parse_mode=ParseMode.MARKDOWN, .                                    reply_markup=get_stats_keyboard(update, WORLD_IDENT)) .     else: .         update.message.reply_text(resolve(‘no_data’, lang(update))) . # command /[country] . @handler_decorator . def command_country(update, context, country_code): .     photo_file = wikidata.cases_country_map(country_code) .     data = api.cases_country(country_code) .     if data: .         text = format_stats(update, country_code, data) .         if photo_file: .             update.message.reply_photo(photo=photo_file, caption=text, parse_mode=ParseMode.MARKDOWN, .                                        reply_markup=get_stats_keyboard(update, country_code)) .         else: .             update.message.reply_markdown(text, reply_markup=get_stats_keyboard(update, country_code)) .     else: .         update.message.reply_text(resolve(‘no_data’, lang(update))) . def command_us_state(update, context, state): .     data = api.cases_us_state(state) .     if data: .         text = format_stats(update, state.title(), data, icon=’ uD83C uDDFA uD83C uDDF8’) .         update.message.reply_markdown(text) .     else: .         update.message.reply_text(resolve(‘no_data’, lang(update))) . def command_de_state(update, context, state): .     data = api.cases_de_state(state) .     if data: .         text = format_stats(update, state.title(), data, icon=’ uD83C uDDE9 uD83C uDDEA’) .         update.message.reply_markdown(text) .     else: .         update.message.reply_text(resolve(‘no_data’, lang(update))) . def callback_stats(update, context): .     query = update.callback_query .     country_code = context.match.group(1) .     # True if we want to *show* detailed mode, False otherwise .     is_detailed = not bool(int(context.match.group(2))) .     if country_code == WORLD_IDENT: .         data = api.cases_world() .     else: .         data = api.cases_country(country_code) .     if data: .         text = format_stats(update, country_code, data, detailed=is_detailed) .         if query.message.caption: .             query.edit_message_caption(caption=text, parse_mode=ParseMode.MARKDOWN, .                                        reply_markup=get_stats_keyboard(update, country_code, is_detailed)) .         else: .             query.edit_message_text(text=text, parse_mode=ParseMode.MARKDOWN, .                                     reply_markup=get_stats_keyboard(update, country_code, is_detailed)) . ### Country list ### . # command /list . @handler_decorator . def command_list(update, context): .     # set or retrieve sort order .     if len(context.args) &gt; 0: .         order = context.args[0] .         context.chat_data[‘order’] = order .     elif ’order’ in context.chat_data: .         order = context.chat_data[‘order’] .     else: .         # use first possible order as default .         order = SORT_ORDERS[0] .         context.chat_data[‘order’] = order .     # by default, return 7 items. min 2 and max 20. .     limit = int(context.args[1]) if len(context.args) &gt; 1 else 7 .     limit = min(max(2, limit), 20) .     case_list = api.cases_country_list(sort_by=order)[:limit] .     if len(case_list) &gt; 0: .         text = resolve(‘list_header’, lang(update), resolve(“sort_order_“+order, lang(update))) .         for item in case_list: .             text += format_list_item(item, order) .         update.message.reply_markdown(text, reply_markup=get_list_keyboard(update, 0, limit)) .     else: .         update.message.reply_text(resolve(‘no_data’, lang(update))) . def callback_list_pages(update, context): .     query = update.callback_query .     order = context.chat_data.get(‘order’, SORT_ORDERS[0]) # for backward comp .     page, limit = int(context.match.group(1)), int(context.match.group(2)) .     case_list = api.cases_country_list(sort_by=order) .     if page &gt;= 0: .         case_list = case_list[page*limit:(page+1)*limit] .     else: .         # if the given page number is negative, we want to access the last page .         page = len(case_list) // limit .         offset = len(case_list) % limit .         case_list = case_list[-offset:] .     query.answer() .     if len(case_list) &gt; 0: .         text = resolve(‘list_header’, lang(update), resolve(“sort_order_“+order, lang(update))) .         for item in case_list: .             text += format_list_item(item, order) .         query.edit_message_text(text=text, parse_mode=ParseMode.MARKDOWN, .                                 reply_markup=get_list_keyboard(update, page, limit, len(case_list) &lt; limit)) .     else: .         query.edit_message_text(resolve(‘no_data’, lang(update)), .                                 reply_markup=get_list_keyboard(update, page, limit, len(case_list) &lt; limit)) . def callback_list_order_menu(update, context): .     query = update.callback_query .     on = int(context.match.group(1)) .     payload = [int(g) for g in context.match.group(2).split(“ ”)] .     query.answer() .     if on: .         query.edit_message_reply_markup(reply_markup=get_list_order_keyboard(update, *payload)) .     else: .         query.edit_message_reply_markup(reply_markup=get_list_keyboard(update, *payload)) . def callback_list_order(update, context): .     query = update.callback_query .     order = context.match.group(1) .     # save the selected order .     context.chat_data[‘order’] = order .     limit = int(context.match.group(2)) .     case_list = api.cases_country_list(sort_by=order)[:limit] .     query.answer() .     if len(case_list) &gt; 0: .         text = resolve(‘list_header’, lang(update), resolve(“sort_order_“+order, lang(update))) .         for item in case_list: .             text += format_list_item(item, order) .         query.edit_message_text(text=text, parse_mode=ParseMode.MARKDOWN, .                                 reply_markup=get_list_keyboard(update, 0, limit, len(case_list) &lt; limit)) .     else: .         query.edit_message_text(resolve(‘no_data’, lang(update)), .                                 reply_markup=get_list_keyboard(update, 0, limit, len(case_list) &lt; limit)) . ### Free text &amp; inline ### . # free text input . @handler_decorator . def handle_text(update, context): .     query_string = update.message.text.lower() .     if query_string in api.name_map: .         command_country(update, context, api.name_map[query_string]) .     elif WORLD_IDENT in query_string: .         command_world(update, context) .     elif check_flag(query_string): .         code = code_from_flag(query_string).lower() .         if code in api.name_map: .             command_country(update, context, api.name_map[code]) .     elif query_string.title() in api.us_states: .         command_us_state(update, context, query_string) .     elif query_string.title() in api.de_states: .         command_de_state(update, context, query_string) .     else: .         update.message.reply_text(resolve(‘unknown_place’, lang(update))) . # inline queries . def handle_inlinequery(update, context): .     inline_query = update.inline_query .     query_string = inline_query.query.lower() .     if not query_string: .         return .     results = [] .     # a special case matching ’world’ .     if WORLD_IDENT.startswith(query_string): .         results.append((WORLD_IDENT, WORLD_IDENT)) .     for name in api.name_map.keys(): .         if name.startswith(query_string): .             results.append((name, ”country”)) .         # limit to the first threee results .         if len(results) &gt;= 3: .             break .     if len(results) &lt; 3: .         for state in api.us_states: .             if state.lower().startswith(query_string): .                 results.append((state.lower(), ”us_state”)) .             if len(results) &gt;= 3: .                 break .     if len(results) &lt; 3: .         for state in api.de_states: .             if state.lower().startswith(query_string): .                 results.append((state.lower(), ”de_state”)) .             if len(results) &gt;= 3: .                 break .     query_results = [] .     for i,(s, t) in enumerate(results): .         if t == WORLD_IDENT: .             data = api.cases_world() .             text = format_stats(update, WORLD_IDENT, data, detailed=True) .         elif t == ”us_state”: .             data = api.cases_us_state(s) .             text = format_stats(update, s.title(), data, icon=’ uD83C uDDFA uD83C uDDF8’) .         elif t == ”de_state”: .             data = api.cases_de_state(s) .             text = format_stats(update, s.title(), data, icon=’ uD83C uDDE9 uD83C uDDEA’) .         else: .             country_code = api.name_map[s] .             data = api.cases_country(country_code) .             text = format_stats(update, country_code, data, detailed=True) .         text+=’ n’+resolve(‘more’, lang(update)) .         result_content = InputTextMessageContent(text, parse_mode=ParseMode.MARKDOWN) .         query_results.append( .             InlineQueryResultArticle(id=i, title=s, input_message_content=result_content) .         ) .     inline_query.answer(query_results) . ### Set country ### . # command /setcountry . @handler_decorator . def handle_setcountry_start(update, context): .     update.message.reply_markdown(resolve(‘setcountry_start’, lang(update))) .     return 1 . def handle_setcountry_input(update, context): .     query_string = update.message.text.lower() .     if query_string in api.name_map: .         code = api.name_map[query_string] .         context.chat_data[‘country’] = code .         update.message.reply_markdown( .                 resolve(‘setcountry_success’, lang(update), api.countries[code][‘name’])) .         return ConversationHandler.END .     else: .         update.message.reply_text(resolve(‘unknown_place’, lang(update))) . def handle_setcountry_cancel(update, context): .     update.message.reply_text(resolve(‘cancel’, lang(update))) .     return ConversationHandler.END . ### Notification subscription ### . @handler_decorator . def command_subscribe(update, context): .     if not ’subscribers’ in context.bot_data: .         context.bot_data[‘subscribers’] = [update.message.chat.id] .     elif not update.message.chat.id in context.bot_data[‘subscribers’]: .         context.bot_data[‘subscribers’].append(update.message.chat.id) .     update.message.reply_markdown(resolve(‘subscribe’, lang(update))) . @handler_decorator . def command_unsubscribe(update, context): .     if ’subscribers’ in context.bot_data: .         if update.message.chat.id in context.bot_data[‘subscribers’]: .             context.bot_data[‘subscribers’].remove(update.message.chat.id) .     update.message.reply_markdown(resolve(‘unsubscribe’, lang(update))) . # runs the status notification job once per day . def run_notify(context): .     if not ’subscribers’ in context.bot_data: .         logger.warn(“No subscribers list specified.”) .         return .     count = 0 .     for chat_id in context.bot_data[‘subscribers’]: .         try: .             country_code = context.dispatcher.chat_data[chat_id].get(‘country’, None) .             text = get_status_report(country_code=country_code) # TODO always English .             context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.MARKDOWN) .             count+=1 .             sleep(0.05) # try to avoid flood limits .         except Exception as ex: .             # remove user from subscribers if he blocked or kicked the bot .             if isinstance(ex, TelegramError) and ex.message.startswith(“Forbidden: ”): .                 context.bot_data[‘subscribers’].remove(chat_id) .             logger.error(“Failed to send daily notification to {}”.format(chat_id), exc_info=True) .     logger.info(“Successfully sent daily notification to {} users.”.format(count)) . def error(update, context): .     try: .         raise context.error .     except TelegramError: .         logger.warning(‘Update {} caused error ”{}”‘.format(update, context.error)) . def main(config): .     persistence = PicklePersistence(“database.pkl”) .     updater = Updater(config[‘token’], persistence=persistence, use_context=True) .     # add commands .     dp = updater.dispatcher .     dp.add_handler(CommandHandler(“start”, command_start)) .     dp.add_handler(CommandHandler(“help”, command_help)) .     dp.add_handler(CommandHandler(“faqs”, command_faqs)) .     dp.add_handler(CommandHandler(“donate”, command_donate)) .     dp.add_handler(CommandHandler(“today”, command_today)) .     dp.add_handler(CommandHandler(“world”, command_world)) .     dp.add_handler(CommandHandler(“list”, command_list)) .     # callbacks for page buttons in list .     dp.add_handler(CallbackQueryHandler(callback_list_pages, pattern=r”list (-? d+) ( d+)”)) .     dp.add_handler(CallbackQueryHandler(callback_list_order_menu, pattern=r”list_order_menu ( d+)  (([ d s]+) )”)) .     dp.add_handler(CallbackQueryHandler(callback_list_order, pattern=r”list_order ( w+) ( d+)”)) .     # for every country, add a command for the iso2 and iso3 codes and the name .     for iso, country in api.countries.items(): .         callback = lambda update, context, code=iso: command_country(update, context, code) .         dp.add_handler(CommandHandler(iso, callback)) .         if country[‘iso3’]: .             dp.add_handler(CommandHandler(country[‘iso3’], callback)) .         name_normal = re.sub(r”[^a-z]”, ”_”, country[‘name’].lower()) .         dp.add_handler(CommandHandler(name_normal, callback)) .     # country detailed button callback .     dp.add_handler(CallbackQueryHandler(callback_stats, pattern=r”stats ( w+) ( d)”)) .     # set country (this has to be added before the free text handler) .     dp.add_handler(ConversationHandler( .         entry_points=[CommandHandler(“setcountry”, handle_setcountry_start)], .         states={ .             1: [MessageHandler(Filters.text &amp; ~Filters.command, handle_setcountry_input)] .         }, .         fallbacks=[CommandHandler(“cancel”, handle_setcountry_cancel)], .         conversation_timeout=60*10 # = 10 minutes .     )) .     # subscription .     dp.add_handler(CommandHandler(“subscribe”, command_subscribe)) .     dp.add_handler(CommandHandler(“unsubscribe”, command_unsubscribe)) .     # subscription job .     job_queue = updater.job_queue .     if ’notify_time’ in config: .         job_queue.run_daily(run_notify, datetime.strptime(config[‘notify_time’], ’%H:%M’).time()) .     # free text input .     dp.add_handler(MessageHandler(Filters.text &amp; ~Filters.command, handle_text)) .     dp.add_handler(InlineQueryHandler(handle_inlinequery)) .     dp.add_error_handler(error) .     # start the bot .     updater.start_polling() .     updater.idle() . if __name__ == ”__main__”: .     with open(CONFIG_FILE, ’r’) as f: .         config = json.load(f) .     main(config) . B4 JSON CODE CONTAINING BOT TOKEN AND TIMER . { .     ”token”: ”1098397543:pJm4JTpTTI_l7o5IasqeCj7qw”, .     ”notify_time”: ”17:00” . } .",
            "url": "https://mikeowino.com/blog/2020/08/24/MIKE-OWINO-DOCUMENTATION.html",
            "relUrl": "/2020/08/24/MIKE-OWINO-DOCUMENTATION.html",
            "date": " • Aug 24, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Mgmt Plan",
            "content": "&lt;Project Name&gt; . project Management plan . Version &lt;1.0&gt; . &lt;mm/dd/yyyy&gt; . VERSION HISTORY . [Provide information on how the development and distribution of the was controlled and tracked. Use the table below to provide the version number, the author implementing the version, the date of the version, the name of the person approving the version, the date that particular version was approved, and a brief description of the reason for creating the revised version.] . Version # Implemented . By . Revision . Date . Approved . By . Approval . Date . Reason . 1.0 | &lt;Author name&gt; | &lt;mm/dd/yy&gt; | &lt;name&gt; | &lt;mm/dd/yy&gt; | &lt;reason&gt; | . | | | | | | . | | | | | | . | | | | | | . UP Template Version: 11/30/06 . . Note to the Author*** . [This document is a template of a Project Management Plan document for a project. The template includes instructions to the author, boilerplate text, and fields that should be replaced with the values specific to the project. . Blue italicized text enclosed in square brackets ([text]) provides instructions to the document author, or describes the intent, assumptions and context for content included in this document. . | Blue italicized text enclosed in angle brackets (&lt;text&gt;) indicates a field that should be replaced with information specific to a particular project. . | Text and tables in black are provided as boilerplate examples of wording and formats that may be used or modified as appropriate to a specific project. These are offered only as suggestions to assist in developing project documents; they are not mandatory formats. . | . When using this template for your project document, it is recommended that you follow these steps: . Replace all text enclosed in angle brackets (e.g.,, &lt;Project Name&gt;) with the correct field values. These angle brackets appear in both the body of the document and in headers and footers. To customize fields in Microsoft Word (which display a gray background when selected): . Select File&gt;Properties&gt;Summary and fill in the Title field with the Document Name and the Subject field with the Project Name. . | Select File&gt;Properties&gt;Custom and fill in the Last Modified, Status, and Version fields with the appropriate information for this document. . | After you click OK to close the dialog box, update the fields throughout the document with these values by selecting Edit&gt;Select All (or Ctrl-A) and pressing F9. Or you can update an individual field by clicking on it and pressing F9. This must be done separately for Headers and Footers. . | | Modify boilerplate text as appropriate to the specific project. . | To add any new sections to the document, ensure that the appropriate header and body text styles are maintained. Styles used for the Section Headings are Heading 1, Heading 2 and Heading 3. Style used for boilerplate text is Body Text. . | To update the Table of Contents, right-click and select “Update field” and choose the option- “Update entire table” . | Before submission of the first draft of this document, delete this “Notes to the Author” page and all instructions to the author, which appear throughout the document as blue italicized text enclosed in square brackets.] | TABLE OF CONTENTS . 1 Introduction 4 . 1.1 Purpose of Project Management Plan 4 . 2 Executive Summary of Project Charter 4 . 2.1 Assumptions/Constraints 4 . 3 Scope Management 4 . 3.1 Work Breakdown Structure 4 . 3.2 Deployment Plan 4 . 3.3 Change Control Management 4 . 4 Schedule/Time Management 4 . 4.1 Milestones 5 . 4.2 Project Schedule 5 . 4.2.1 Dependencies 5 . 5 Cost/Budget Management 5 . 6 Quality Management 5 . 7 Human Resource Management 5 . 8 Communications Management 5 . 8.1 Communication Matrix 5 . 9 Risk Management 5 . 9.1 Risk Log 6 . 10 Issue Management 6 . 10.1 Issue Log 6 . 11 Procurement Management 6 . 12 Compliance Related Planning 6 . Appendix A: Project Management Plan Approval 7 . APPENDIX B: REFERENCES 8 . APPENDIX C: KEY TERMS 9 . APPENDIX D: SUMMARY OF SPENDING 10 . # . # Introduction . Purpose of Project Management Plan . [Provide the purpose of the project charter.] . The intended audience of the &lt;Project Name&gt; PMP is all project stakeholders including the project sponsor, senior leadership and the project team. . Executive Summary of Project Charter . [Provide an executive summary of the approved project charter. Provide a reference to the approved Project Charter. Elaborate on any sections within the Project Charter that need further detail contained within the PMP.] . Assumptions/Constraints . [Insert summary of any changes from the project assumptions and/or constraints that were originally outlined in the project charter.] . Scope Management . [Insert the project’s scope management plan or provide a reference to where it is stored.] . Work Breakdown Structure . [Insert the project’s work breakdown structure or provide a reference to where it is stored.] . Deployment Plan . [Example: The project involves deploying an application to state health partners. This section would discuss the approach for rolling out the application to the end users, including conducting environment assessments, developing memorandums of understandings, hardware/software installation, data conversion.] . Change Control Management . [Example of Change Control: If a development server for your project is administered by another organization that is responsible for installing machine upgrades and there are scheduled outages that will impact your project schedule. Changes to the project will need to be made to deal with the potential impact of the scheduled outage.] . Schedule/Time Management . [Example of schedule management approach: Establish a baseline within the first two weeks of the project and monitor progress against the baseline on a weekly basis. The Project Manager will be responsible for ensuring the project schedule is updated with the latest information and never more than three business days out of date. For variances on executive milestones greater than 10%, the project may choose to use guidance specified by CPIC. See the CDC UP Project Schedule document for more guidance on project schedules and for Project Schedule templates.] . Milestones . The table below lists the milestones for this project, along with their estimated completion timeframe. . Milestones Estimated Completion Timeframe . [Insert milestone information (e.g., Project planned and authorized to proceed)] | [Insert completion timeframe (e.g., Two weeks after project concept is approved)] | . [Add additional rows as necessary] |   | . Project Schedule . [Insert the project’s schedule or provide a reference to where it is stored.] . Dependencies . [Insert the schedule/project dependencies (both internal and external).] . Cost/Budget Management . [Insert the project’s cost management plan or provide a reference to where it is stored.] . Quality Management . [Example: For an information system, controlling the consistency of screen layouts would include reviewing all screens to make sure they match the standards. Quality measures may be no bugs or defects for certain critical requirements, consistent screen layouts, or correctly calculating variables. Quality may be ensured through inspections, audits, formal testing and documentation of defects in a defect tracking system to ensure defects are fixed, retested and closed. Some projects may choose to use a traceability matrix to determine if critical requirements have been met.] . Human Resource Management . [Insert the project’s human resource management plan or provide a reference to where it is stored.] . Communications Management . [Insert the project’s communication management plan or provide a reference to where it is stored.] . Communication Matrix . [Insert the project’s communication matrix or provide a reference to where it is stored.] . Stakeholder Messages Vehicles Frequency Communicators Feedback Mechanisms .   |   |   |   |   |   | .   |   |   |   |   |   | . Communications Matrix . Risk Management . [Insert the project’s risk management plan or provide a reference to where it is stored.] . Risk Log . [The Risk Log is normally maintained as a separate document. Provide a reference to where it is stored.] . Issue Management . [Insert the project’s issue management plan or provide a reference to where it is stored.] . Issue Log . [The Issue Log is normally maintained as a separate document. Provide a reference to where it is stored.] . Procurement Management . [Example: This can include information such as ensuring project team members are assigned computers, how development and test servers are procured or can go into more detail and include an acquisition strategy that details how the project will be staffed (e.g., performance based fixed price contract, CITS contractors).] . Compliance Related Planning . [Insert a list of compliance related processes the project must adhere to. For assistance with determining which compliance processes need to be followed visit http://www2.cdc.gov/cdcup/document_library/project_assessment.asp] . Appendix A: Project Management Plan Approval . The undersigned acknowledge they have reviewed the &lt;Project Name&gt; Project Management Plan and agree with the approach it presents. Changes to this Project Management Plan will be coordinated with and approved by the undersigned or their designated representatives. . [List the individuals whose signatures are desired. Examples of such individuals are Business Steward, Project Manager or Project Sponsor. Add additional lines for signature as necessary. Although signatures are desired, they are not always required to move forward with the practices outlined within this document.] . Signature:   Date:   . Print Name: |   |   |   | . Title: |   |   |   | . Role: |   |   |   | .   |   |   |   | . Signature:   Date:   . Print Name: |   |   |   | . Title: |   |   |   | . Role: |   |   |   | . Signature:   Date:   . Print Name: |   |   |   | . Title: |   |   |   | . Role: |   |   |   | . APPENDIX B: REFERENCES . [Insert the name, version number, description, and physical location of any documents referenced in this document. Add rows to the table as necessary.] . The following table summarizes the documents referenced in this document. . Document Name and Version Description Location . &lt;Document Name and Version Number&gt; | [Provide description of the document] | &lt;URL or Network path where document is located&gt; | . APPENDIX C: KEY TERMS . [Insert terms and definitions used in this document. Add rows to the table as necessary. Follow the link below to for definitions of project management terms and acronyms used in this and other documents. . http://www2.cdc.gov/cdcup/library/other/help.htm . The following table provides definitions for terms relevant to this document. . Term Definition . [Insert Term] . | [Provide definition of the term used in this document.] . | . [Insert Term] . | [Provide definition of the term used in this document.] . | . [Insert Term] . | [Provide definition of the term used in this document.] . | . APPENDIX D: SUMMARY OF SPENDING . [You may double-click on the table to edit it according to the information applicable to this project.] . PY: Previous Year; CY: Current Year; BY: Budget Year .",
            "url": "https://mikeowino.com/blog/2020/07/30/mgmt-plan.html",
            "relUrl": "/2020/07/30/mgmt-plan.html",
            "date": " • Jul 30, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Intpart Template For Project Description",
            "content": "Template for project description . INTPART . ***Completing the form: . Please use this template for the project description. This is a mandatory attachment to the electronic grant application form and is to be completed and uploaded in PDF format. All italicised text and boxes are for guidance and information purposes only and should be deleted in the final version of this document. . Please complete all items. Please follow the order of the items given in the template. . The project description is to supplement the information you provide in the grant application form created on “My RCN Web”. Links and other documents listed in the project description will not be included in the assessment. . Size: . The project description is not to exceed five pages, using 11-point font (Times New Roman, Arial or Calibri). It is permitted to use 9-point font for references, tables and figure text. . Language: . English*** . Project number/Title of main project . Enter the same project title entered in the electronic application form. . Excellence . Background, context and needs . The project’s main objectives and secondary objectives must be specified in the online application form. . Elaborate on the purpose of the project and in what way it is relevant to the guidelines of the call. . Specify the eligible project(s). Explain the thematic relevance of the eligible project, including the role of key people in the INTPART project. How will the project fulfil the purpose and objectives of INTPART as set out in the call for proposals? . Explain the overall idea/academic rationale for the project. Describe the background for the project and justify the need for this project/these activities. Emphasise how the project is part of larger systems and will build upon and reinforce these (context), with particular emphasis on linking research and education. It is important to document good knowledge of relevant research and education areas, existing structures and activities, and the central challenges in the field, both nationally and internationally. . Activities, organisation and cooperation . Provide an expanded project description. . Specify the target groups for the project . | Explain the organisation of the project . | . In the online application form, enter partners (institutions/companies/businesses) who will be participating in the project by carrying out activities and/or contributing funding and/or partners who have rights related to the project. . Added value . Explain how the project is linked to or will support other means or activities (e.g. an R &amp;D project) in developing cooperation that already receives support. It is also important to indicate how the initiative is innovative and will provide added value beyond what already exists or has been done. . Impact . Societal relevance . If relevant, describe the project’s societal relevance, for example whether the project will help to meet key challenges in the public sector, business sector or civil society. Societal relevance can be seen in a regional, national, international or global perspective. The involvement of external users and other actors should be described. . How does the project contribute towards the SDGs? . Explain which results and effects can be expected from the project in the short and medium term, and which societal/system-related effects the project may contribute to in the longer term. . Communication, dissemination and target groups . In the online application form, specific plans for scientific and popular science dissemination (if relevant) should be indicated in a dissemination/outreach/communication plan, e.g. planned publishing, conferences and the like. . Supplementary information on e.g. announcement / marketing, target groups, which user groups are relevant and how they are involved in the project, which channels are planned to be used, etc. . Environmental impacts, ethics, recruitment of women / gender balance . If relevant, briefly explain whether project implementation and/or utilisation of the results from the project will have significant positive or negative environmental impacts. If there are ethical issues related to the implementation of the project, briefly describe how these will be dealt with. Briefly describe how the project will contribute to the Research Council’s overall aim to recruit more women and promote gender balance in research. . Implementation . The project period and progress plan with the main activities (and potential milestones) are to be entered in the online application form. . Strategy clarification . Briefly explain how the project reflects and supports the applicant institution’s strategic goals and plans. . Letters of intent from/agreements with all specified partners should be uploaded as attachments to the online application form under Confirmation from partner(s). . Information should be provided about how the project reflects and supports other strategic plans, potentially with other relevant actors than those involved in binding cooperation when this is stipulated in the call for proposals. . Resources, expertise, distribution of roles and collaboration . Explain in more detail how the project is to be organised and implemented. Especially for large and/or complex projects it is important to describe how the various elements are planned and the anticipated interaction between them. . | Explain which competencies and resources will be available for the project. . | . CVs should be uploaded as attachments under Curriculum vitae (CV) in the online application form. The Research Council’s template for CV must be used. . If there are multiple partners in the project, specify how the roles will be distributed. . | Provide a specification of the work effort/own contribution in the project. If the project is organised in different work packages/sub-tasks/sub-projects, the specification is to encompass all of these. . | Describe how the project will utilise and promote cooperation nationally and/or internationally. . | In addition to the overview of planned project financing in the application form, provide an overview of the research environment’s/communities’ expertise, infrastructure and other resources that are important for the implementation of the project. . | . Budget . An accrual-based budget, cost plan and funding plan are to be entered in the online grant application form. Fields are also provided there for further specification and supplementary information. For large and/or compound projects, and where the application form does not fit the activity, further budget information can also be provided here, e.g. in case the call requires co-financing. . Risk . Give an assessment of internal and external risks related to the project - both the risk that the project cannot be implemented as planned and the risk that the project does not achieve its objectives. Describe risk prevention measures. .",
            "url": "https://mikeowino.com/blog/2020/07/30/intpart-template-for-project-description.html",
            "relUrl": "/2020/07/30/intpart-template-for-project-description.html",
            "date": " • Jul 30, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Project Proposal Baseer Ahmad Baheer",
            "content": "Baseer Ahmad Baheer . Jan 2015 - Mar 2018 . ## . Tallinn University . Institute of Informatics . Natural Sciences and Engineering . Table of Content . Table of Content . Summary . Background . Objectives . Research Questions . Hypothesis . Methodology . Completed Projects . Ongoing projects . Schedule . Budget . References . # . Summary . It is increasingly recognized that e-governance is crucial to success the government. The ultimate goal of e-governance is to enable organizations by delivering the information and services that the various stakeholders, citizens and decision makers needs in a cost-effective efficient, and streamlined way. . Due to its positive impact on Citizens, government and society alike, most developed and developing countries have attempted to apply e-government projects with mixed success. . Some of the developing countries have began with the developing of e-service applications, which works in a self-ruling way, and are unable to deliver information and services in a seamless, steady and efficient manner across citizens, decision makers, and different stakeholders. . To do this, the first step should be to interconnect/interoperate all governmental institutions’ e-service applications, in order to provide these information and services in a seamless way. . We need to go beyond methodologies for deployment of interoperability frameworks, and extend the governance principles to all stages of e-services. What we need is a Reference Model, independent of technical platforms, and organizational structures, which is proposed in this study. This Reference Model encompasses policy framework, and a set of technical guidelines to deploy e-government services in developing countries. We exemplify how the governance rules and metrics can be used to control and secure e-services systems. . Background . Electronic government (e-government) has become one of the most evolving and . important applications of Information and Communication Technology (ICT) in récent . years [1]. . The realisation of e-Government services in developing countries makes only little progress. Reasons are - on the one hand - developing countries are still facing the shortage of enough funds, a good ICT infrastructure, and policy frameworks for the e-governance systems development. . On the other hand, in result of high initial efforts and corresponding financial investments, still it did not assist the interactions of governments with citizens, businesses and other agencies. . There are some e-government solutions initiatives, but not client and organization centric solutions, and running independently, and it does not allow the public to participate in the governance of their country. . Although, there are some e-Government interoperability frameworks already exists to interoperate all government e-service systems. However, these frameworks are developed in context of developed countries, which still needs significant customization to adopt it in case of developing countries. . For instance, Estonia is one of the most advanced e-societies in the world where the citizens routines are almost Internet based. In worldwide ranking, Estonia is the 19th country where they implemented e-governance. But in 2011, Estonia having significantly improved its e-government development scores entered top 8 [2]. X-Road was one of the key success factors which was launched in 2001. The data exchange layer X-Road is a technical and organisational environment, which enables secure Internet-based data exchange between the state’s information systems [3]. X-Road is developed just in Estonian context to interconnect the governmental databases to the common data resource accessible over Internet [3]. . Prior to that, developing countries might lack a reference framework comprised of a comprehensive policy framework and a set of technical guidelines, to deploy existing solutions. . In this project we propose an effort to address the previously stated problems by bringing them together as potential reciprocal solutions. . This project explains what is meant by reference model, and what type of reference model do the developing countries need to deploy e-governance. . In addition, the purpose of undertaking this project is to develop a feasible reference model to enable developing countries to deploy e-government services in a rapid, cost-effective and efficient way. This reference model comprises the interoperability framework, a set of technical guidelines and policy framework. . Objectives . The primary goal is to develop a reference model, a policy framework and a set of technical guidelines for the deployment of e-government services in developing countries. The objectives are: . To provide a comprehensive reference model in order to deploy e-governance in developing countries. . | To present frameworks and methodologies, as well as case studies to discuss and understand the approaches being deployed for successful implementation of e-government projects . | To explore the effects of cultural and local factors on successful adoption of e-government . | To share best practices and recommendations based on case studies from successful e-government projects . | To present case studies highlighting practical experiences of those involved in e-government development. . | . Research Questions . Based on the findings from the literature review several questions can be addressed during the course of this research. . What type of reference model do the developing countries need to deploy e-governance? . How can a common reference model be created to design and use of variant reference models with the aim of creating a model based customizable e-service systems. . | How this reference model may enter a real deployment of e-governance in context of developing countries. . | | What is characterizing the process of introducing reference models and modelling tools in e-governance systems deployment? . | What policies and regulations are needed to create, or amend in order to implement and facilitate e-government in developing countries? . | What technical guidelines are required to create, or adapt to implement the actual e-governance solutions in developing countries? . | Hypothesis . Successful e-governance implementation requires not only the technical specification of the whole e-service system, but also guidance, and policy around planning and execution of the e-government initiative. . A reference model will help these countries to deploy the e-governance in a cost-effective and efficient way. A reference model is not only focusing on technical realization, but on an inclusive policy framework and a set of technical guidelines. . Methodology . The considered methodology will address the scientific, real, and policy situations in terms of e-governance in developing countries. . A comprehensive literature review will be conducted in order to soundly situate the work in the state of the art in the fields of e-government practices and solutions. . A survey based case study will be conducted in Afghanistan to assess the state of a government solution, what is there, what works, what doesn’t and what are the needs. . Document reviews (reports by local and international organization on e-governance issues, existing strategies) and interview will be conducted to explore the policy situation. . Research through design will be used as the primary means of achieving the formulated goals. This particular approach has been chosen because it allows for improvement of the way the proposed solution operates in practice [4] and to produce a contribution of knowledge [5]. The output will be a reference model, policy framework, technical guideline and prove of concept. . Projects . Completed Projects . Project Name: Teachers Management Information System, Ministry of Education, Afghanistan . Beneficiary/Client: Teachers Education Department, Ministry of Education, Afghanistan . Donor: World Bank . Duration: (3 Years) 2011 - 2013 . Project Status: Completed . The primary objective of creating and implementing of TMIS is to streamline the induction, training, career ladder, performance monitoring and overall management of the teachers and school administrators in the country. . TMIS addresses the following issues: . TMIS is a web-enabled system ensuring transparency in every aspect of teacher’s management. . | TMIS ensures easy accessibility to the system for all the stakeholders. . | A centralized database of teachers and school administrators, regularly updated through a web interface make teacher and school administrator management (accountability, incentives, career ladder, postings and transfers) easy and effective. . | TMIS is enabled to store information of TTC students for current and past 30 years, and generate their transcripts and ease the hiring process. . | This system also supports TTC[1] management and TTC students’ management to explore synthesized guidelines for policy makers related to planning for development and sustainability of Teachers Training Colleges (TTC), and to manage students’ related data including transferring students’ from/to TTCs, TTC Pre-Service students recruitment in schools as a teacher and etc. . | It enables identification of all teachers and school administrators through allocation of a unique ID as well as availability of Photo IDs for all on the database. . | The system is localized to Afghanistan’s official languages. . | TMIS is able to integrate with central EMIS and other MISs within MoE. . | . Project Name: University Entry Examination (CONCOURS) Management System . Beneficiary/Client: Cancours Committee, Ministry of Higher Education, Afghanistan . Donor: DAAD (German Academic Exchange Service) . Duration: (3 Years) 2010-2012 . Project Status: Completed . The purpose of the system was to manage the overall activities of the University Examination (Cancours) Committee. The application pre-examination processes (candidates/students registration, dispatching admission cards, exam location allocation) and post-examination processes (question bank, exam booklet generation and printing, scoring, final exam results). . Ongoing projects . Project Name: Interactive Whiteboard . Beneficiary/Client: Ministry of Education, Afghanistan . Donor: Ministry of Communication and Information Technology . Duration: (1 Year) 2014-2015 . Project Status: Ongoing . The Interactive Whiteboard is a large display that connects to a computer. A projector projects the computer’s desktop onto the board’s surface that acts as a Human Input Device, like a mouse. Users control the computer using a pen, finger, stylus, or other device. The Interactive whiteboard makes it possible for teachers to direct instruction and present material and students may solve math concepts on the interactive whiteboard. . Project Name: TechWorks . Beneficiary/Client: TechNation, Afghanistan . Donor: TechNation . Duration: (1 Year) 2014-2015 . Project Status: Ongoing . TECHWORKS is an online platform that offers a variety of programs and services to start and grow a small business. It provides guidance in understanding the small business environment in Afghanistan and provides templates for financing and accounting and managing a business. . Project Name: TechEdu . Beneficiary/Client: TechNation, Afghanistan . Donor: TechNation . Duration: (1 Year) 2014-2015 . Project Status: Ongoing . This online platform is intended to provide the tools so Afghan instructors can CREATE their own online course! When completed, it will have a set of pedagogical suggestions to help Afghan instructors create a course that will help students and others learn quickly and retain their learning. The site will have links to free online modules and courses. . Schedule . The project is expected to be completed over a period of 4 years starting from project kick off. . . Budget . We request a total of 871,700.00 € to undertake the study described above. The majority . of funds will go towards personnel expenses for the essential activities. The total personnel . costs are estimated to be 427,200.00 € . The estimated direct expenses for the project are . 811,700.00 € and include the costs of interview transcription and supplies. The estimated . travel costs of 111,000.00 € will enable the researchers to conduct direct interviews from the . appropriate domestic locations. In addition to the above, we also request a 10% overhead . to cover facilities and other support provided by our institution. . Nature of expenditure/ Item Quantity Salary/Cost in € Duration (Months) Amount in € . DIRECT COSTS |   |   |   |   | . Personnel |   |   |   |   | . Research Personnel |   |   |   |   | . Principal Researcher/ Principal Investigator | 1 | 2000 | 48 | 96,000.00 € | . Co-Researcher/Co- Investigator (if applicable) | 2 | 1000 | 48 | 96,000.00 € | . Research Assistant ( part or full time/ Salary/month | 2 | 500 | 24 | 24,000.00 € | . Post Doctoral Associate | 1 | 1500 | 24 | 36,000.00 € | . Graduate Students | 4 | 400 | 18 | 28,800.00 € | . Stipend &amp; Expenses for Sub-Contracted Foreign Interviewers: 80 interviews @ average of approx. $250/interview |   |   |   | 20,000.00 € | . Other Professionals: |   |   |   |   | . Technician/ Programer/Developers/Engineers | 5 | 600 | 24 | 72,000.00 € | . Project Assistant / Administrative Assistant | 1 | 650 | 48 | 31,200.00 € | . Policy Makers | 2 | 700 | 18 | 25,200.00 € | . Lawyers | 2 | 500 | 18 | 18,000.00 € | . Personnel Subtotal |   |   |   | 427,200.00 € | . Equipment |   |   |   |   | . List of Equipment | 10 | 40000 | 1 | 400,000.00 € | . Subtotal Equipment |   |   |   | 40,000.00 € | . Material and Supplies |   |   |   |   | . List Materials and supplies | 1 | 14000 | 1 | 14,000.00 € | . Subtotal Material and Supplies |   |   |   | 14,000.00 € | . Travel |   |   |   |   | . International Travel |   |   |   |   | . Traveller ( 1000 / Trip ) |   |   |   | 40,000.00 € | . Perdiem ( €50 / day ) |   |   |   | 30,000.00 € | . Local Transportation |   |   |   |   | . Taxi Ride |   |   |   | 12,000.00 € | . Cost / Ride |   |   |   | 8,000.00 € | . Car Rental |   |   |   | 9,000.00 € | . Gasoline Cost |   |   |   | 12,000.00 € | . Subtotal Travel |   |   |   | 111,000.00 € | . Publication/Reports |   |   |   |   | . Editing &amp; Proofreading |   |   |   | 12,000.00 € | . Translation cost/page |   |   |   | 4,000.00 € | . Book Cover Design |   |   |   | 5,000.00 € | . Layout, technical Production &amp; Cost of Paper |   |   |   | 4,000.00 € | . Printing |   |   |   | 10,000.00 € | . Subtotal Publication |   |   |   | 35,000.00 € | . OTHER Direct Costs |   |   |   |   | . Documentation (books &amp; Software ) |   |   |   | 4,000.00 € | . Consultant Services |   |   |   | 12,000.00 € | . Mail &amp; Courrier |   |   |   | 7,000.00 € | . Communication / Internet/ Photocopying |   |   |   | 40,000.00 € | . Subtotal Other Direct Costs |   |   |   | 63,000.00 € | . WORKSHOP / CONFERENCE |   |   |   |   | . Workshop / conference Coordinator |   |   |   | 3,000.00 € | . Travel of Participants |   |   |   | 20,000.00 € | . Accomodation / Lodging / day |   |   |   | 50,000.00 € | . Perdiem / Guest |   |   |   | 45,000.00 € | . Invitation cards ( Design &amp; Printing ) |   |   |   | 1,000.00 € | . Program ( Design &amp; Printing ) |   |   |   | 1,000.00 € | . Lunch ( Cost / Person ) |   |   |   | 10,000.00 € | . Coffee Break |   |   |   | 3,000.00 € | . Social Event |   |   |   | 3,000.00 € | . Photocopy |   |   |   | 500.00 € | . Press Officer |   |   |   | 5,000.00 € | . Materials &amp; Supplies |   |   |   | 3,000.00 € | . Conference Equipment ( Overhead projector, flip chart, LCD etc ) |   |   |   | 5,000.00 € | . Subtotal Workshop/Conference |   |   |   | 149,500.00 € | . Total Direct Costs |   |   |   | 811,700.00 € | . INDIRECT COSTS |   |   |   |   | . Overhead or Indirect Costs |   |   |   | 20,000.00 € | . (Accounting Services, Auditor &amp; Lawyers fees, Electricity, Maintenance, Depreciation of Equipment, use of office space, Insurance &amp; renovation, and general project administration ) |   |   |   | 40,000.00 € | . GRAND TOTAL (total direct costs + Indirect costs) |   |   |   | 871,700.00 € | . # . # . # . # . References . Citizens’ Readiness for E-government in Developing Countries, Hany A. Abdelghaffar Ismail, School of Computing Science Middlesex University, London, UK, May 2008 . | Waseda University International e-Government Ranking 2013, March 2013, Press Release http://www.e-gov.waseda.ac.jp/pdf/Press_Released_on_e-Gov_ranking_2013.pdf . | Estonian Information System’s Authority, Data Exchange Layer X-Road, https://www.ria.ee/x-road/ . | Collins, A., Joseph, D., Bielaczyc, K.: Design research: Theoretical and methodological issues. The Journal of the Learning Sciences 13(1), 15–42 (2004) . | Zimmerman, J., Forlizzi, J., Evenson, S.: Research through design as a method for interaction design research in hci. In: Proceedings of the SIGCHI conference on Human factors in computing systems. pp. 493–502. ACM (2007) . | Teachers Training Colleges |",
            "url": "https://mikeowino.com/blog/2020/07/30/Project-Proposal-Baseer-Ahmad-Baheer.html",
            "relUrl": "/2020/07/30/Project-Proposal-Baseer-Ahmad-Baheer.html",
            "date": " • Jul 30, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Project Management Plan",
            "content": "SE 4351.001 Software Requirements . Fall 2014 . Project Management Plan . . http://www.utdallas.edu/~axp120531/SE4352/ . Team Members . Joe Brown . jsb100120 . | Desmond Lee . dcl102020 . | Giuseppe Mastrolorenzo . mxg106320 . | Michael Raibick . mxr110530 . | . Ryan Chen . rxc109520 . | Robert Lockwood . rll092020 . | Blessing Osakue . boo102020 . | Oscar Reyes . oxr110330 . | . Travis Chun . twc101020 . | Michael Mugger . mxm121531 . | Andrew Pohlmann . axp120531 . | James Williams . jxw110730 . | . | | | Bennilyn Quek . bxq120430 . | . Revision History . Version | Date | Comments | . 1.0.0 | 09/02/2014 | Initial version of Preliminary Project Management Plan. | . 1.1.0 | 09/04/2014 | Updated project plan formatting to conform to template and edited content sections for structure. | . 1.1.1 | 09/04/2014 | Formatted sentence structures in §1.1.1, §1.1.2, §2.3 for clarity. | . 1.1.2 | 09/04/2014 | Revised placeholders for printing. | . 1.1.3 | 09/08/2014 | Filled in §2.2.1, §2.4.1, §3, §4.2, §4.3 | . 1.1.4 | 10/1/2014 | Added ToC . Updated §1.2, §2.4.1,§5.2 . | . 1.2 | 10/16/2014 | Updated §1.2, §2.4.1,§5.2 | . 1.3 | 12/01/2014 | Updated §1.2, §2.4.1,§5.2 . Final Check . | . Table of Contents . 1. Introduction 5 . 1.1 Project Overview 5 . 1.1.1 Project Background 5 . 1.1.2 Project Goals 5 . 1.2 Deliverables 6 . 1.3 Document Evolution 6 . 1.4 References 7 . 1.5 Definitions, Acronyms, Abbreviations 7 . 2. Project Organization 8 . 2.1 Process Model 8 . 2.2 Organizational Structure 8 . 2.2.1 Team Organization 8 . 2.3 Organizational Boundaries and Interfaces 10 . 2.4 Project Responsibilities 11 . 2.4.1 Phase 1 Team Roles and Responsibilities 11 . 3. Managerial Process 13 . 3.1 Management Objectives and Priorities 13 . 3.2 Assumptions, Dependencies and Constraints 13 . 3.2.1 Assumptions 13 . 3.2.2 Dependencies 13 . 3.2.3 Constraints 14 . 3.3 Risk Management 14 . 3.4 Monitoring and Controlling Mechanisms 16 . 4. Technical Process 18 . 4.1 Methods, Tools and Techniques 18 . 4.2 Software Documentation 19 . 4.3 Project Support Functions 19 . 5. Work Elements, Schedule and Budget 20 . 5.1 Work Elements 20 . 5.2 Schedule 20 . 5.3 Budget 22 . 1. Introduction . 1.1 Project Overview . 1.1.1 Project Background . As people get older they tend to experience difficulties in either cognitive or sensory function. These difficulties can turn an independent and free-spirited person’s life into a continuous set of daily challenges. Assistive technology processes sensory data to provide meaningful information to the user. Today’s assistive technologies (known as aids) are expensive, trivial and bulky. Persons who have multiple difficulties require multiple devices. There is a growing need for advanced assistive technologies that are easy to use and convenient for the user. The solution is the use of a device many people already own: the smartphone. Smartphone-based aids do more than traditional assistive devices. For example, a hearing aid should recognize speech to create a visual image. A speaking aid should generate speech from visual data. Finally, a memory aid should produce visual queues based on a variety of input. . ### . 1.1.2 Project Goals . Team Total Recall’s Project Goal is to create an AAC application, running on an Android mobile device that is capable of enhancing a user’s communication abilities who is suffering from stage 3 dementia. . ### . ### . 1.2 Deliverables . Phase . No. . | Phase . Name . | Deliverables | Internal Review . Date . | Delivery . Date . | . | Initial | Preliminary PMP . | | 09/03/2014 | 09/04/2014 | . 1 | Interim | Evolving PMP . | Evolving WRS . | Evolving PPT . | Prototype Mock-ups . | | 09/29/2014 | 09/30/2014 | . | Final | Evolving PMP . | Evolving WRS . | Evolving PPT . | Evolving UM . | Preliminary Prototype Mockups . | | 10/15/2014 | 10/16/2014 | . 2 | Interim | Evolving PMP . | Evolving WRS . | Evolving Process Specification Document . | Evolving Vision Document . | Appendix - Glossary . | Appendix - References . | | 10/17/2014 | 11/11/2014 | . 2 | Final | Final PMP . | Final WRS . | Final Vision Document . | Final Process Specification . | Final User Manual . | Final Prototype . | Final Presentation . | Final Appendix . | | 11/12/2014 | 12/02/2014 | . 1.3 Document Evolution . This is a living document that is updated periodically. The document will be updated in response to feedback from the review process defined in the managerial processes (§3.4.1). This document is to be managed solely in the Google Drive repository established for the team. When changes are made the changes must be documented in the revision history table found at the beginning of this document. Changes must be dated, versioned, described and stamped with the team member who made the changes. The current version is specified on the bottom right of the document on all pages. . The versioning system used by the revision history table conforms to the semantic versioning scheme. The version numbers are indicated as a three decimal numerical in the form of “X.Y.Z”. All X, Y and Z are integers in the range zero to nine inclusive. Where X represents the major version, Y represents the minor version and Z represents patches. Major versions are incremented when the minor version number is exhausted by reaching nine and resetting to zero. Minor versions are incremented when content is added or removed. Patch versions are indicated when sentence structure changes are made but no content is added or removed. . 1.4 References . Please see the document References in the Appendix. . 1.5 Definitions, Acronyms, Abbreviations . Please see the document Glossary in the Appendix. . 2. Project Organization . 2.1 Process Model . The organization will be employing the Spiral Mode. Due to the emphasis on requirements analysis and negotiation, this model serves the organizational requirement of close client collaboration well. . 2.2 Organizational Structure . The organizational structure of three teams and 4 team members each. The project leader is not directly part of a team, but will form a fourth pseudo group that involves the other team leaders. This pseudo team is in place to encourage high cohesion amongst management elements for more effective work unit scheduling. . 2.2.1 Team Organization . Phase 1 - Interim . Team . No. . | Team . Members . | . - | 1. Andrew Pohlmann (Phase Lead) . | . 1 | Michael Raibick (Team Lead) . | Ryan Chen . | Travis Chun . | Oscar Reyes . | | . 2 | Michael Muggler (Team Lead) . | Bennilyn Quek . | Desmond Lee . | Robert Lockwood . | | . 3 | Blessing Osakue (Team Lead) . | Joe Brown . | James Williams . | Giuseppe Mastrolorenzo . | | . Phase 1 - Final . Team . No. . | Team . Members . | . - | 1. Michael Raibick (Phase Lead) . | . 1 | Andrew Pohlmann (Team Lead) . | Michael Muggler . | James Williams . | | . 2 | Michael Raibick (Team Lead) . | Joe Brown . | Desmond Lee . | Oscar Reyes . | | . 3 | Bennilyn Quek (Team Lead) . | Blessing Osakue . | Ryan Chen . | Robert Lockwood . | Giuseppe Mastrolorenzo . | Travis Chun . | | . Phase 2 - Interim . Team . No. . | Team . Members . | . - | Bennilyn Quek (Phase Lead) . | | . 1 | Andrew Pohlmann (Team Lead) . | Michael Muggler . | James Williams . | | . 2 | Desmond Lee (Team Lead) . | Joe Brown . | Michael Raibick . | Oscar Reyes . | | . 3 | Ryan Chen (Team Lead) . | Blessing Osakue . | Michael Raibick . | Robert Lockwood . | Giuseppe Mastrolorenzo . | Travis Chun . | | . Phase 2 - Final . Team . No. . | Team . Members . | . - | James Williams (Phase Lead) . | | . 1 | Joe Brown (Team Lead) . | Michael Muggler . | Bennilyn Quek . | | . 2 | Michael Raibick (Team Lead) . | Andrew Pohlmann . | Desmond Lee . | Oscar Reyes . | | . 3 | Ryan Chen (Team Lead) . | Blessing Osakue . | Michael Raibick . | Robert Lockwood . | Giuseppe Mastrolorenzo . | Travis Chun . | | . 2.3 Organizational Boundaries and Interfaces . Each team is intended to function as a self-contained entity that can complete its work units independently of other teams. Team leaders will function as interfaces to the project leader in management meetings for progress reviews and new workload assignments. If necessary, team leaders will also coordinate with other team leaders and the project leader for the purposes of synchronizing content production toward an aggregated work unit. The project leader is not directly part of a team, but will work closely with all team leaders for workflow synchronization purposes and clarification of project vision and direction. The project leader will also function as a liaison as necessary between all teams in the event that more precise communication is necessary. . 2.4 Project Responsibilities . 2.4.1 Phase 1 Team Roles and Responsibilities . Phase 1 - Interim . Team | Role | Responsibilities | . 1 | Requirements Engineering | Exploration of Domain, Stakeholder, Functional, Non-Functional Objectives. . | Update WRS. . | | . 2 | Requirements Engineering | Exploration of Non-Functional Requirements . | Update WRS. . | Generate preliminary Prototype. . | | . 3 | Requirements Engineering | Exploration of Functional Requirements . | Update WRS. . | | . MG | Management | Update PMP. . | Generate preliminary PPT. . | | . Phase 1 - Final . Team | Role | Responsibilities | . 1 | Requirements Engineering | Create system specifications. . | | . 2 | System Design | Create UI of the front-end . | | . 3 | Documentation | Generate the Initial User Manual . | | . MG | Management | Update PMP, PP . | | . 2.4.2 Phase 2 Team Roles and Responsibilities . Phase 2 - Interim . Team | Role | Responsibilities | . 1 | System Design / Development | Developing System Architecture . | Implement the System . | Generate Product Diagrams. . | | . 2 | System Design / Development / Documentation. | Develop System UI . | Implement the System . | | . 3 | Documentation | Develop User Manual . | Develop Appendix . | | . MG | Management | Develop Evolving Vision Document . | Develop Appendix . | | . Phase 2 - Final . Team | Role | Responsibilities | . 1 | System Development / Documentation. | Finalize Prototype . | Finalize WRS. . | | . 2 | System Development / Documentation. | Finalize Prototype . | Finalize all Product and Process Diagrams . | | . 3 | Documentation. | Finalize User Manual . | Finalize Appendix . | | . MG | Management | Finalize PMP . | Finalize Vision Document . | Finalize Process Specification Document . | Finalize PPT . | | . 3. Managerial Process . 3.1 Management Objectives and Priorities . Accountability: Ensuring that weekly work unit deadlines are met. . | Accuracy: Ensuring that work units are traceable to end-phase deliverables requirements. . | Efficiency: Ensuring that no excessive or redundant work is performed. . | Quality Assurance: Ensuring that all work units completed are free of defects. . | Communication: Ensuring low latency communication between and within teams. . | 3.2 Assumptions, Dependencies and Constraints . 3.2.1 Assumptions . Team members will be cognizant of project schedule deadlines. . | Team members will stay healthy and remain physically capable of carrying out assigned duties. . | Team members will respond to communications from other team members in a timely fashion. . | Team members remain motivated through the duration of the project. . | Team members will always have access to the necessary tools to complete their assigned work units. . | The group will not lose any team members. . | 3.2.2 Dependencies . Management will effectively communicate the project goals. . | Communication mechanisms to maintain low latency communications in the organizational structure . | Management being effective at maintaining linear progression of progress. . | Team members not procrastinating and delaying assigned work units. . | 3.2.3 Constraints . Personal schedule conflicts between team members. . | Personal lives of team members. . | 3.3 Risk Management .       . Risk | Impact | Mitigation | . Inaccurate Estimations about project costs, scheduling, and time to complete | These bad estimates can end up sinking a project into a sea of budget overruns, delayed deliverables, and wasted effort that can potentially end up in a cancellation of a project. | Apply crash techniques to speed up under-performing work units. Work overtime to ensure that work units get completed on time. Modify the schedule as necessary to apply more man hours to work units that are behind. | . Bad Requirements Gathering | Bad requirements gathering in a project ensures that the resulting software architecture will not be compliant with what the client truly needs. This situation is sometimes not seen until later in the project and, when discovered, can lead to critical faults that threaten the success of the project. | Hire a requirements engineer to elicit the proper set of requirements from the client. | . Executing Behind Schedule | Executing behind schedule virtually assures missing deadlines, wasting project resources, and provoking negative client feedback. The worst case of this scenario is that the client cancels the project. | We have taken a multifaceted approach in expecting and mitigating the risks of running behind schedule. Ample time has been set aside to collaborate with the customer on creating a detailed list of specifications and expectations with the project. Time has been set aside to review the project at regular intervals with the customer and additional time has been set aside to handle possible changes or issues brought up during these meetings. The project is internally scheduled to complete early so schedule setbacks don’t push us beyond the hard deadline. A change management system is in place to reduce the impact of changes. We believe these mitigations will be sufficient to handle most high-probability or high-impact scheduling situations that may arise. | . Unforeseen Technical Complexity | Unforeseen technical complexity could introduce delays in implementation of the program, or even worse uncover flaws in the requirements. | Our project manager and developers will ask some questions during specification-gathering to ensure common sources of technical complexity are covered early. Integrations with third party systems, for example using Active Directory to handle user management, need to be identified during the specification phase. Change requests relating to third party integrations after the completion of the design phase will be denied unless an agreed-upon amount of time can be added to the five-month deadline. | . Data Loss | Data loss can easily derail current project progress and make blown deadlines a guaranteed reality. Man-hours spent backtracking and redoing work units could easily lead to serious delays in the schedule and trigger another risk scenario “Executing behind schedule.” Regeneration of the lost data could also produce inaccurate or incorrect work that could cause future problems. | Backup database nightly, have a slave database ready at a different location. | . Scope Changes | Scope changes can cause serious changes in the functional and non-functional requirements of the program. Scope changes almost always impact scheduled tasks and work-units because of the refactoring of the scope into all phases of the development process. | Expand timeline to accommodate additions or reject additions depending upon contract restrictions, feasibility, meetings with the customer, etc. | . User Interface Usability Issues | The client may find the program difficult to use and then issue new requirements to “simplify” program operation. The client may not see the program as fulfilling its requirements and refuse payment of services. | We will make use of tools such as UserTesting.com to ensure our application is easy to use and follows today’s best practices for user interface design. | . Personnel Loss | Project work units could be delayed. Other team members may become strained from having to take on the extra work from the departing employee. The project even may suffer schedule delays if management cannot replace the lost manpower. | Hire a qualified replacement, divide work between remaining employees while replacement is located. | . ### . 3.4 Monitoring and Controlling Mechanisms . Living Announcement and Meeting Agenda documents will be constantly updated on Google Drive as a means to support project vision and maintain schedule work unit deadlines. . Doodle will be used to schedule team member meetings. . Glassboard will be used as a group collaboration platform. . Github will be used for version control for all code. . ### . ### . ### . ### . 4. Technical Process . ## . 4.1 Methods, Tools and Techniques . The following methods, tools and techniques will be used: . Method | Tool | Technique(s) | . Communication | Email . Doodle Glassboard . | Emails are used for direct communication between group members. Doodle will be used to schedule team member meetings. Glassboard will be used as a group collaboration device. | . Storage | Google Drive | Any document pertaining to a deliverable must be stored on the team accessible Google Drive share folder. Including any preliminary or draft documents. All documents must be shared with the entire team. | . Version Control | Github | Github will be the primary tool for storing the codebase, documenting changes and typing the code documentation. The user manual is to be stored in the Google Drive. The Github repository is exclusively for code and code related materials. | . Documentation | Astah UML Editor . RE Tools . Star UML . | Any documentation pertaining to the software must be done in Astah, Star, or RE Tools and submitted in the Google Drive. Do not place UML files under version control. | . Visual Editing | MS Paint . Visio . | Prototype Mockups and graphics will be drawn using these tool. | . System Development | Ionic . JavaScript . HTML5 . CSS5 . | System development will be done using the Ionic SDK platform, which uses JavaScript, HTML5, and CSS5 to create mobile applications. | . ### . 4.2 Software Documentation . The software architecture will be documented with UML using Astah, Star, and RE Tools diagrams. A user manual will be created for the application that shows graphical images to demonstrate how to use the system. . 4.3 Project Support Functions . Living Announcement and Meeting Agenda documents will be constantly updated on Google Drive as a means to support project vision and maintain schedule work unit deadlines. Doodle will be used to schedule team member meetings. Glassboard will be used as a group collaboration device. Github will be used for version control for all code. . 5. Work Elements, Schedule and Budget . ## . 5.1 Work Elements . Project Management Plan . | WRS . | Process Specification . | Product Specification (Vision) . | Prototype . | User Manual . | PowerPoint Presentation . | Appendix . | 5.2 Schedule . Phase 1 Interim . Deliverable(s) | Team . Assignments . | Assign Date | Internal Due Date | Official Due Date | . Evolving WRS . | | RE Team 1: WRS §2.1 . RE Team 2: WRS §2.3 . RE Team 3: WRS §2.2 . | 09/8/14 | 09/14/14 | 09/30/14 | . Evolving WRS . | | RE Team 1: §3.1 . RE Team 2: §2.3 . RE Team 3: §2.2 . | 09/15/14 | 09/21/14 | 09/30/14 | . Evolving PPT . | | RE Team 1: Traceability | 09/22/14 | 09/28/14 | 09/30/14 | . Evolving WRS . | | RE Team 3: §3.2 | 09/22/14 | 09/28/14 | 09/30/14 | . Evolving WRS . | | RE Team 2: §3.1 | 09/22/14 | 09/28/14 | 09/30/14 | . All Deliverables . | | Management | 09/29/14 | 09/29/14 | 09/30/14 | . Phase I Final (Due 10/16/2014) . Deliverable(s) | Team . Assignments . | Assign Date | Internal Due Date | Official Due Date | . Evolving WRS . | | Architecture Team: . Develop System Specifications . | | 10/01 | 10/8 | 10/16 | . Evolving Prototype . | | UI/UX Team . Develop prototype wireframes from specifications. . | | 10/09 | 10/13 | 10/16 | . Evolving User Manual . | | UM/Testing Team . Develop user manual. . | | 10/11 | 10/14 | 10/16 | . Evolving PMP . | Evolving PP . | | Management . Update PMP, PP . | | 10/15 | 10/15 | 10/16 | . Phase 2 Interim (Due 11/11/2014) . Deliverable(s) | Team . Assignments . | Assign Date | Internal Due Date | Official Due Date | . Evolving Prototype . | | UI/UX Team: . Develop System UI . | Generate Appendix. . | | 10/16 | 10/25 | 11/11 | . Evolving Prototype . | | Architecture Team: . Develop System Architecture . | Implement the System. . | Generate Diagrams. . | | 10/16 | 10/25 | 11/11 | . Evolving User Manual . | | UM/Testing Team . Develop User Manual . | | 10/16 | 10/25 | 11/11 | . Evolving Prototype . | | UI/UX + Architecture Team . Develop Prototype . | | 10/27 | 11/10 | 11/11 | . Evolving Vision Document . | | UM/Testing: . Develop Vision Document . | | 10/27 | 11/10 | 11/11 | . All Deliverables . | | Management | 11/10 | 11/10 | 11/11 | . Phase 2 Final (Due 12/05/2014) . Deliverable(s) | Team . Assignments . | Assign Date | Internal Due Date | Official Due Date | . Evolving Prototype . | | Architecture Team . Finalize prototype. . | Finalize Diagrams. . | | 11/12 | 11/15 | 12/05 | . Evolving User Manual . | | UM/Testing: . Finalize User Manual . | | 11/12 | 11/15 | 12/05 | . Evolving Vision Document . | | UI/UX . Finalize Vision Document. . | | 11/12 | 11/15 | 12/05 | . Appendix . | | UM/Testing: . Finalize Appendix . | | 11/16 | 12/01 | 12/05 | . Process Specification Document . | | Management . Finalize Process Specification . | | 11/16 | 12/01 | 12/05 | . All Deliverables | Management | 12/02 | 12/05 | 12/05 | . 5.3 Budget . No budget is allotted for this project. .",
            "url": "https://mikeowino.com/blog/2020/07/30/Project-Management-Plan.html",
            "relUrl": "/2020/07/30/Project-Management-Plan.html",
            "date": " • Jul 30, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Project Instruction Template",
            "content": "Project Instructions Template . *** Please do not include this page with your formally submitted Project Instructions *** . All field projects aboard a NOAA ship are described by formal Project Instructions which detail a project’s requirements, responsibilities of the parties involved, and various operational and administrative details. Once signed by officials in OMAO/Marine Operations and the requesting program, the Project Instructions serve as an agreement between these entities. Certain additional forms and procedures are also a necessary part of project preparation and execution. The Chief Scientist retains primary responsibility for preparing and submitting the Project Instructions and related material. Execution of the project as described is the joint responsibility of the Chief Scientist and Commanding Officer of the ship. . This template is intended to guide the Chief Scientist in preparing a Project Instruction. Please send your Draft Project Instructions in Microsoft Word so that ships’ staff and MOC operations personnel can make edits and comments directly (with “track changes” on). All sections are required to be included in the Project Instructions. If a section does not apply, insert a “N/A” beside it. Please number each section and subsection (i.e. I., II., II.A., II.A.1.). . Unless otherwise noted: Forms, policies, and regulations referenced in this template can be retrieved from http://www.moc.noaa.gov/all-ships/index.html. . NOTE: . Black text items to be included in the Project Instructions. . | Non-underlined blue text denotes notes to the preparer that should not be included in the final version with the exception of website and email addresses. . | Where a blue “OR” is stipulated, only one set of the applicable black text is to be included. . | If a blue “AND/OR” is stipulated, include all of the black text options that apply. . | . Table of Modifications to Project Instructions Template   . Date of Mod. | Description | . 3/14/2012 | New Template Prepared, Posted and Adoption Required for all PI’s by April 15, 2012 | . 4/11/2012 | I.B. Service Agreement Section Updated | . 5/01/2012 | Updates to Instructions Page, Service Level Agreement Section, Meals Section, Export Control Section, Dive Section, and Radioactive Material Section. | . 5/3/2012 | Replaced all “cruise” references with “project” | . 5/10/2012 | Replaced all “instruction” with “instructions” &amp; added guidance for Chemical Hygiene Plan | . 8/31/2012 | 1) Clarified requirement for Hazardous Material Spill Plans, Spill Training and Spill Kit Inventories. 2) Added requirement that Security Approvals for Foreign Nationals must also include clearances for any DOC facilities the FN must traverse to access the ship 3) Updated MOC-A CO’s name. | . 4/30/2013 | 1) Added CO, MOC-PI title, name as option. 2) Reorganization of Hazmat Section including clear indication of whether or not radioactive materials are planned. 3) Additional language regarding submission of NHSQ by secure file transfer and emphasis on proper handling of PII and medical info. | . 8/28/2013 | Updated Date of OMAO’s Drug and Alcohol Policy (May 17, 2000), other minor corrections | . 11/18/2013 | Updated Service Level Agreements and Disposition of Data and Reports section, minor mods to FN section, numerous small modifications and corrections throughout. | . 11/21/2013 | Replaced “N/A” allowance for replacing sections not needed with clearer, less ambiguous statements. Allows for more brief PIs. | . 12/4/2013 | Adjusted language on safety shoes to match OMAO Procedures. | . 2/24/2014 | Included requirements for Policy 1008, effective 2/21/14 for Tuberculosis Protection. Updated CO/MOC-A and medical section in general. | . 4/8/2014 | Updated NHSQ to latest 3-14 version. | . 6/16/2014 | Updated CO, MOC-P with CAPT Baird | . 1/13/2015 | Corrected CAPT Baird’s name to Douglas D. Baird, Jr. Removed CAPT Kamphaus from MOC-PI since CAPT Baird will cover CO, MOC-PI duties while billet is vacant. | . 3/16/2015 | Updated with CDR Wingate as CO, MOC-PI | . 10/26/2015 | Updated with CDR Parker as CO, MOC-P | . 05/20/2016 | Links for customer satisfaction survey and NOAA medical forms updated | . 06/03/2016 | Updated with CAPT Sirois as CO, MOC-A. Updated links to NOAA medical forms hosted on OMAO site | . The signature page is to be printed on organization’s letterhead and on one page. . DRAFT OR FINAL Project Instructions . Date Submitted: MMMM DD, YYYY (Ex. February 23, 2012) . Platform: NOAA Ship ***** (Full ship name, 1st letter only capitalized, all italic) . Project Number: **-**-** (OMAO) (Ex. SH-12-02) If the program wishes to assign a project ID of their format, do so after the OMAO PN with a comma, the program ID, &amp; label it (ORG), Ex. 12-04-SH (SWFSC). . Project Title: ***** . Project Dates: MMMM DD, YYYY to MMMM DD, YYYY . Must encompass transits to/from project ports as well as the actual project days themselves. . Prepared by: ________________________ Dated: __________________ . Chief Scientist Name . Chief Scientist . Affiliation (Program or Lab) . Approved by: ________________________ Dated: __________________ . Program Director Name . Title . Affiliation (Program or Lab) . Approved by: ________________________ Dated: __________________ . Lab Director Name . Title . Affiliation (Program or Lab) . Approved by: ________________________ Dated: __________________ . Command Brian W. Parker, NOAA OR Captain Scott M. Sirois, NOAA . Commanding Officer Commanding Officer . Marine Operations Center – Pacific Marine Operations Center - Atlantic . OR . Commander Matthew J. Wingate, NOAA . Commanding Officer . Marine Operations Center – Pacific Islands . I. Overview . A. Brief Summary and Project Period . B. Days at Sea (DAS) . Of the _Z_ DAS scheduled for this project, _Y_ DAS are funded by an OMAO allocation, _X_ DAS are funded by a Line Office Allocation, _W_ DAS are Program Funded, and _V_DAS are Other Agency funded. This project is estimated to exhibit a ____ Operational Tempo. . Z = W+X+Y+V . Total DAS = Z (inclusive of departure and arrival days) . | OMAO Allocated DAS = Y, OMAO allocated DAS using OMAO operational funds . | Line Office Allocated DAS = X, Line Office (OAR, NMFS, NOS, NESDIS, NWS) allocated DAS using OMAO operational funds . | Program Funded Days (PFD) = W, One or more of the NOAA line offices are directly funding these DAS . | Other Agency Funded DAS = V, Non-NOAA funded . | . Funded DAS: The total DAS for the project shall be stated and how each DAS is funded shall be documented according to the funding allocation as dictated in NOAA’s Prioritization, Allocation, and Scheduling System (PASS). Descriptions above which fund 0 DAS can be deleted from the Project Instruction. Please call Chief of Operations for Marine Operations Center-Atlantic, Pacific, or Pacific Islands (as applicable) for additional guidance. . Transit DAS to the Project’s ports are to be included. If multiple port stops are involved, periods between ports shall be referred to as “legs” and addressed throughout this document as Leg 1, Leg 2, Leg 3, etc. Sailing days in which no scientific operations are conducted or data collected can be referred to as “Transit(s)”. . Operational Tempo Rate (Low, Medium or High) is used for budgetary projections and ship staffing levels and will be completed by the ship or MOC A/P/PI. . C. Operating Area (include optional map/figure showing op area) . D. Summary of Objectives . E. Participating Institutions . F. Personnel/Science Party: name, title, gender, affiliation, and nationality . Sort the completed table by name (in WORD: Click in the table, select Tab “Layout”, select “Sort” (upper right), select “Date Aboard” and ensure “has header row” is checked . . Name (Last, First) Title Date Aboard Date Disembark Gender Affiliation Nationality .   |   |   |   |   |   |   | .   |   |   |   |   |   |   | .   |   |   |   |   |   |   | . G. Administrative . 1. Points of Contacts: Chief Scientist/alternate, Project Operation Leads, Ops Officer/alternate, agent if needed/selected (name, address, phone number, and email for all) . 2. Diplomatic Clearances . None Required. . OR . This project involves Marine Scientific Research in waters under the jurisdiction of _____. Diplomatic clearance has been requested. . 3. Licenses and Permits . None Required. . OR . This project will be conducted under the Scientific Research Permit (U.S.) AND/OR Marine Mammal License (U.S.) AND/OR Foreign Fishing Vessel License (Canada) AND/OR Species at Risk Act permit (Canada) issued by ___________ (U.S. AND/OR foreign agency) on ______ (date) to __________ State the name of the license holder–often but not always the Chief Scientist. There could be multiple permits/licenses. The Chief Scientist is responsible for obtaining and listing all permits as well as any identification numbers they contain. . II. Operations . The Chief Scientist is responsible for ensuring the scientific staff are trained in planned operations and are knowledgeable of project objectives and priorities. The Commanding Officer is responsible for ensuring all operations conform to the ship’s accepted practices and procedures. . A. Project Itinerary: . B. Staging and Destaging: . C. Operations to be Conducted: . (Detailed breakdown of each type of proposed operation, i.e. in-situ, station, observing…) . D. Dive Plan . All dives are to be conducted in accordance with the requirements and regulations of the NOAA Diving Program (http://www.ndc.noaa.gov/dr.html) and require the approval of the ship’s Commanding Officer. (This statement must remain in all project instructions) . Dives are not planned for this project. OR . The Dive Plans encompassing all legs of ##-##-## are presented in Appendix #. . E. Applicable Restrictions . Conditions which preclude normal operations: (List restrictions such as poor weather conditions, equipment failure, safety concerns, unforeseen circumstances, as well as mitigation strategies that might be used). . III. Equipment (Hazardous materials are not to be listed here. They should be included in Hazardous Materials Section.) . A. Equipment and Capabilities provided by the ship (itemized) . B. Equipment and Capabilities provided by the scientists (itemized) . IV. Hazardous Materials . A. Policy and Compliance . No Hazardous Materials are being brought aboard the ship for this project. (Replaces all below under IV. A-C) . OR . The Chief Scientist is responsible for complying with FEC 07 Hazardous Materials and Hazardous Waste Management Requirements for Visiting Scientific Parties (or the OMAO procedure that supersedes it). By Federal regulations and NOAA Marine and Aviation Operations policy, the ship may not sail without a complete inventory of all hazardous materials by name and quantity, MSDS, appropriate spill cleanup materials (neutralizing agents, buffers, or absorbents) in amounts adequate to address spills of a size equal to the amount of chemical brought aboard, and chemical safety and spill response procedures. . Documentation regarding those requirements will be provided by the Chief of Operations, Marine Operations Center, upon request. . Per OMAO procedure, the scientific party will include with their project instructions and provide to the CO of the respective ship 30 days before departure: . List of chemicals by name with anticipated quantity . | List of spill response materials, including neutralizing agents, buffers, and absorbents . | Chemical safety and spill response procedures, such as excerpts of the program’s Chemical Hygiene Plan or SOPs relevant for shipboard laboratories . | For bulk quantities of chemicals in excess of 50 gallons total or in containers larger than 10 gallons each, notify ship’s Operations Officer regarding quantity, packaging and chemical to verify safe stowage is available as soon as chemical quantities are known. . | . Upon embarkation and prior to loading hazardous materials aboard the vessel, the scientific party will provide to the CO or their designee: . An inventory list showing actual amount of hazardous material brought aboard . | An MSDS for each material . | Confirmation that neutralizing agents and spill equipment were brought aboard sufficient to contain and cleanup all of the hazardous material brought aboard by the program . | Confirmation that chemical safety and spill response procedures were brought aboard . | . Upon departure from the ship, scientific parties will provide the CO or their designee an inventory showing that all chemicals were removed from the vessel. The CO’s designee will maintain a log to track scientific party hazardous materials. MSDS will be made available to the ship’s complement, in compliance with Hazard Communication Laws. . Scientific parties are expected to manage and respond to spills of scientific hazardous materials. Overboard discharge of hazardous materials is not permitted aboard NOAA ships. . B. Inventory . [An example of what an inventory and spill plan can look like] . Common Name of Material Qty Notes Trained Individual Spill . control . . Formaldehyde solution (2%) | 1 x 500ml | Alkalinity | First Name Last Name | F | . Formaldehyde solution (37%) | 1 x 500ml | Alkalinity, Stored in ship chem. lkr | First Name Last Name | F | . Hydrochloric Acid, 0.1N | 20x500ml | Alkalinity, Stored in ship chem. lkr | First Name Last Name | A | . Mercuric Chloride | 1 x 10g | Located in Sci Van | First Name Last Name | M | . (OR See attached Appendix #) . C. Chemical safety and spill response procedures . A: ACID . Wear appropriate protective equipment and clothing during clean-up. Keep upwind. Keep out of low areas. . | Ventilate closed spaces before entering them. . | Stop the flow of material, if this is without risk. Dike the spilled material, where this is possible. . | Large Spills: Dike far ahead of spill for later disposal. Use a non-combustible material like vermiculite, sand or earth to soak up the product and place into a container for later disposal. . | Small Spills: Wipe up with absorbent material (e.g. cloth, fleece). Clean surface thoroughly to remove residual contamination. . | Never return spills in original containers for re-use. . | Neutralize spill area and washings with soda ash or lime. Collect in a non-combustible container for prompt disposal. . | J. T. Baker NEUTRASORB® acid neutralizers are recommended for spills of this product. . | . M: Mercury . Spills: Pick up and place in a suitable container for reclamation or disposal in a method that does not generate dust. Sprinkle area with sulfur or calcium polysulfide to suppress mercury. Use Mercury Spill Kit if need be. | . F: Formalin/Formaldehyde . Ventilate area of leak or spill. Remove all sources of ignition. . | Wear appropriate personal protective equipment. . | Isolate hazard area. Keep unnecessary and unprotected personnel from entering. Contain and recover liquid when possible. . | Use non-sparking tools and equipment. Collect liquid in an appropriate container or absorb with an inert material (e. g., vermiculite, dry sand, earth), and place in a chemical waste container. . | Do not use combustible materials, such as saw dust. . | . Inventory of Spill Kit supplies . Product Name Amount Chemicals it is useful against Amount it can clean up .   |   |   |   | .   |   |   |   | . (OR See attached Appendix # . D. Radioactive Materials . No Radioactive Isotopes are planned for this project. (Replaces all below under IV. D-E) OR . The Chief Scientist is responsible for complying with OMAO 0701-10 Radioactive Material aboard NOAA Ships. Documentation regarding those requirements will be provided by the Chief of Operations, Marine Operations Center, upon request. . At least three months in advance of a domestic project and eight months in advance of a foreign project start date the shall submit required documentation to MOC-CO, including: . NOAA Form 57-07-02, Request to Use Radioactive Material aboard a NOAA Ship . | Draft Project Instructions . | Nuclear Regulatory Commission (NRC) Materials License (NRC Form 374) or a state license for each state the ship will operate in with RAM on board the ship. . | Report of Proposed Activities in Non-Agreement States, Areas of Exclusive Federal Jurisdiction, or Offshore Waters (NRC Form 241), if only state license(s) are submitted). . | MSDS . | Experiment or usage protocols, including spill cleanup procedures. . | Scientific parties will follow responsibilities as outlined in the procedure, including requirements for storage and use, routine wipe tests, signage, and material disposal as outline in OMAO 0701-10. . All radioisotope work will be conducted by NRC or State licensed investigators only, and copies of these licenses shall be provided per OMAO 0701-10 at least three months prior to the start date of domestic projects and eight months in advance of foreign project start dates. . E. Inventory (itemized) of Radioactive Materials . Sort the completed table by common name (in WORD: Click in the table, select Tab “Layout”, select “Sort” (upper right), select “Common Name” and ensure “has header row” is checked . . Common Name Radioactive Material Concentration Amount Notes .   |   |   |   | .   |   |   |   | .   |   |   |   | . V. Additional Projects . A. Supplementary (“Piggyback”) Projects . No Supplementary Projects are planned. OR . Description: (Provide a description of each supplementary project) . B. NOAA Fleet Ancillary Projects . No NOAA Fleet Ancillary Projects are planned. OR . Description: (Provide a description of each NOAA Fleet Ancillary project) . VI. Disposition of Data and Reports . Disposition of data gathered aboard NOAA ships will conform to NAO 216-101 Ocean Data Acquisitions and NAO 212-15 Management of Environmental Data and Information. To guide the implementation of these NAOs, NOAA’s Environmental Data Management Committee (EDMC) provides the NOAA Data Documentation Procedural Directive (data documentation) and NOAA Data Management Planning Procedural Directive (preparation of Data Management Plans). OMAO is developing procedures and allocating resources to manage OMAO data and Programs are encouraged to do the same for their Project data. . Data Classifications: Under Development . OMAO Data . | Program Data . | | Responsibilities: Under Development . | VII. Meetings, Vessel Familiarization, and Project Evaluations . Pre-Project Meeting: The Chief Scientist and Commanding Officer will conduct a meeting of pertinent members of the scientific party and ship’s crew to discuss required equipment, planned operations, concerns, and establish mitigation strategies for all concerns. This meeting shall be conducted before the beginning of the project with sufficient time to allow for preparation of the ship and project personnel. The ship’s Operations Officer usually is delegated to assist the Chief Scientist in arranging this meeting. . | Vessel Familiarization Meeting: The Commanding Officer is responsible for ensuring scientific personnel are familiarized with applicable sections of the standing orders and vessel protocols, e.g., meals, watches, etiquette, drills, etc. A vessel familiarization meeting shall be conducted in the first 24 hours of the project’s start and is normally presented by the ship’s Operations Officer. . | Post-Project Meeting: The Commanding Officer is responsible for conducted a meeting no earlier than 24 hrs before or 7 days after the completion of a project to discuss the overall success and short comings of the project. Concerns regarding safety, efficiency, and suggestions for future improvements shall be discussed and mitigations for future projects will be documented for future use. This meeting shall be attended by the ship’s officers, applicable crew, the Chief Scientist, and members of the scientific party and is normally arranged by the Operations Officer and Chief Scientist. . | Project Evaluation Report . | Within seven days of the completion of the project, a Customer Satisfaction Survey is to be completed by the Chief Scientist. The form is available at https://sites.google.com/a/noaa.gov/omao-intranet-dev/operations/marine/customer-satisfaction-survey and provides a “Submit” button at the end of the form. It is also located at https://docs.google.com/a/noaa.gov/forms/d/1a5hCCkgIwaSII4DmrHPudAehQ9HqhRqY3J_FXqbJp9g/viewform. Submitted form data is deposited into a spreadsheet used by OMAO management to analyze the information. Though the complete form is not shared with the ships, specific concerns and praises are followed up on while not divulging the identity of the evaluator. . VIII. Miscellaneous . A. Meals and Berthing . The ship will provide meals for the scientists listed above. Meals will be served 3 times daily beginning one hour before scheduled departure, extending throughout the project, and ending two hours after the termination of the project. Since the watch schedule is split between day and night, the night watch may often miss daytime meals and will require adequate food and beverages (for example a variety of sandwich items, cheeses, fruit, milk, juices) during what are not typically meal hours. Special dietary requirements for scientific participants will be made available to the ship’s command at least seven days prior to the project. . Berthing requirements, including number and gender of the scientific party, will be provided to the ship by the Chief Scientist. The Chief Scientist and Commanding Officer will work together on a detailed berthing plan to accommodate the gender mix of the scientific party taking into consideration the current make-up of the ship’s complement. The Chief Scientist is responsible for ensuring the scientific berthing spaces are left in the condition in which they were received; for stripping bedding and linen return; and for the return of any room keys which were issued. The Chief Scientist is also responsible for the cleanliness of the laboratory spaces and the storage areas utilized by the scientific party, both during the project and at its conclusion prior to departing the ship. . All NOAA scientists will have proper travel orders when assigned to any NOAA ship. The Chief Scientist will ensure that all non NOAA or non Federal scientists aboard also have proper orders. It is the responsibility of the Chief Scientist to ensure that the entire scientific party has a mechanism in place to provide lodging and food and to be reimbursed for these costs in the event that the ship becomes uninhabitable and/or the galley is closed during any part of the scheduled project. . All persons boarding NOAA vessels give implied consent to comply with all safety and security policies and regulations which are administered by the Commanding Officer. All spaces and equipment on the vessel are subject to inspection or search at any time. All personnel must comply with OMAO’s Drug and Alcohol Policy dated May 17, 2000 which forbids the possession and/or use of illegal drugs and alcohol aboard NOAA Vessels. . B. Medical Forms and Emergency Contacts . The NOAA Health Services Questionnaire (NHSQ, NF 57-10-01 (3-14)) must be completed in advance by each participating scientist. The NHSQ can be obtained from the Chief Scientist or the NOAA website http://www.corporateservices.noaa.gov/noaaforms/eforms/nf57-10-01.pdf. . All NHSQs submitted after March 1, 2014 must be accompanied by NOAA Form (NF) 57-10-02 - Tuberculosis Screening Document in compliance with OMAO Policy 1008 (Tuberculosis Protection Program). . The completed forms should be sent to the Regional Director of Health Services at the applicable Marine Operations Center. The NHSQ and Tuberculosis Screening Document should reach the Health Services Office no later than 4 weeks prior to the start of the project to allow time for the participant to obtain and submit additional information should health services require it, before clearance to sail can be granted. Please contact MOC Health Services with any questions regarding eligibility or completion of either form. Ensure to fully complete each form and indicate the ship or ships the participant will be sailing on. The participant will receive an email notice when medically cleared to sail if a legible email address is provided on the NHSQ. . The participant can mail, fax, or email the forms to the contact information below. Participants should take precautions to protect their Personally Identifiable Information (PII) and medical information and ensure all correspondence adheres to DOC guidance (http://ocio.os.doc.gov/ITPolicyandPrograms/IT_Privacy/PROD01_008240). . The only secure email process approved by NOAA is Accellion Secure File Transfer which requires the sender to setup an account. Accellion’s Web Users Guide is a valuable aid in using this service, however to reduce cost the DOC contract doesn’t provide for automatically issuing full functioning accounts. To receive access to a “Send Tab”, after your Accellion account has been established send an email from the associated email account to accellionAlerts@doc.gov requesting access to the “Send Tab” function. They will notify you via email usually within 1 business day of your approval. The ‘Send Tab” function will be accessible for 30 days. . Contact information: Include only the Pacific OR Atlantic Office as applicable. . Regional Director of Health Services . Marine Operations Center – Atlantic . 439 W. York Street . Norfolk, VA 23510 . Telephone 757-441-6320 . Fax 757-441-3760 . Email MOA.Health.Services@noaa.gov . | Regional Director of Health Services . Marine Operations Center – Pacific . 2002 SE Marine Science Dr. . Newport, OR 97365 . Telephone 541-867-8822 . Fax 541-867-8856 . Email MOP.Health-Services@noaa.gov . | . Prior to departure, the Chief Scientist must provide an electronic listing of emergency contacts to the Executive Officer for all members of the scientific party, with the following information: contact name, address, relationship to member, and telephone number. . C. Shipboard Safety . Hard hats are required when working with suspended loads.  Work vests are required when working near open railings and during small boat launch and recovery operations.  Hard hats and work vests will be provided by the ship when required. . Wearing open-toed footwear or shoes that do not completely enclose the foot (such as sandals or clogs) outside of private berthing areas is not permitted.  At the discretion of the ship CO, safety shoes (i.e. steel or composite toe protection) may be required to participate in any work dealing with suspended loads, including CTD deployment and recovery.  The ship does not provide safety-toed shoes/boots.  The ship’s Operations Officer should be consulted by the Chief Scientist to ensure members of the scientific party report aboard with the proper attire. . D. Communications . A progress report on operations prepared by the Chief Scientist may be relayed to the program office. Sometimes it is necessary for the Chief Scientist to communicate with another vessel, aircraft, or shore facility. Through various means of communications, the ship can usually accommodate the Chief Scientist. Special radio voice communications requirements should be listed in the project instructions. The ship’s primary means of communication with the Marine Operations Center is via email and the Very Small Aperture Terminal (VSAT) link. Standard VSAT bandwidth at 128kbs is shared by all vessels staff and the science team at no charge. Increased bandwidth in 30 day increments is available on the VSAT systems at increased cost to the scientific party. If increased bandwidth is being considered, program accounting is required and it must be arranged through the ship’s Commanding Officer at least 30 days in advance. . E. IT Security . Any computer that will be hooked into the ship’s network must comply with the OMAO Fleet IT Security Policy 1.1 (November 4, 2005) prior to establishing a direct connection to the NOAA WAN. Requirements include, but are not limited to: . (1) Installation of the latest virus definition (.DAT) file on all systems and performance of a virus scan on each system. (2) Installation of the latest critical operating system security patches. (3) No external public Internet Service Provider (ISP) connections. . Completion of the above requirements prior to boarding the ship is required. . Non-NOAA personnel using the ship’s computers or connecting their own computers to the ship’s network must complete NOAA’s IT Security Awareness Course within 3 days of embarking. . F. Foreign National Guests Access to OMAO Facilities and Platforms . Foreign National access to the NOAA ship or Federal Facilities is not required for this project. (Replaces all below under VIII. F) . OR . All foreign national access to the vessel shall be in accordance with NAO 207-12 and RADM De Bow’s March 16, 2006 memo (http://deemedexports.noaa.gov). National Marine Fisheries Service personnel will use the Foreign National Registration System (FNRS) to submit requests for access to NOAA facilities and ships. The Departmental Sponsor/NOAA (DSN) is responsible for obtaining clearances and export licenses and for providing escorts required by the NAO. DSNs should consult with their designated Line Office Deemed Export point of contact to assist with the process. . Foreign National access must be sought not only for access to the ship involved in the project but also for any Federal Facility access (NOAA Marine Operations Centers, NOAA port offices, USCG Bases) that foreign nationals might have to traverse to gain access to and from the ship. The following are basic requirements. . Full compliance with NAO 207-12 is required. . Responsibilities of the Chief Scientist: . Provide the Commanding Officer with the email generated by the Servicing Security Office granting approval for the foreign national guest’s visit. (For NMFS-sponsored guests, this email will be transmitted by FNRS.) This email will identify the guest’s DSN and will serve as evidence that the requirements of NAO 207-12 have been complied with. . | Escorts – The Chief Scientist is responsible to provide escorts to comply with NAO 207-12 Section 5.10, or as required by the vessel’s DOC/OSY Regional Security Officer. . | Ensure all non-foreign national members of the scientific party receive the briefing on Espionage Indicators (NAO 207-12 Appendix A) at least annually or as required by the Servicing Security Office. . | Export Control - Ensure that approved controls are in place for any technologies that are subject to Export Administration Regulations (EAR). . | The Commanding Officer and the Chief Scientist will work together to implement any access controls necessary to ensure no unlicensed export occurs of any controlled technology onboard regardless of ownership. . Responsibilities of the Commanding Officer: . Ensure only those foreign nationals with DOC/OSY clearance are granted access. . | Deny access to OMAO platforms and facilities by foreign nationals from countries controlled for anti-terrorism (AT) reasons and individuals from Cuba or Iran without written approval from the Director of the Office of Marine and Aviation Operations and compliance with export and sanction regulations. . | Ensure foreign national access is permitted only if unlicensed deemed export is not likely to occur. . | Ensure receipt from the Chief Scientist or the DSN of the FNRS or Servicing Security Office email granting approval for the foreign national guest’s visit. . | Ensure Foreign Port Officials, e.g., Pilots, immigration officials, receive escorted access in accordance with maritime custom to facilitate the vessel’s visit to foreign ports. . | Export Control - 8 weeks in advance of the project, provide the Chief Scientist with a current inventory of OMAO controlled technology onboard the vessel and a copy of the vessel Technology Access Control Plan (TACP). Also notify the Chief Scientist of any OMAO-sponsored foreign nationals that will be onboard while program equipment is aboard so that the Chief Scientist can take steps to prevent unlicensed export of Program controlled technology. The Commanding Officer and the Chief Scientist will work together to implement any access controls necessary to ensure no unlicensed export occurs of any controlled technology onboard regardless of ownership. . | Ensure all OMAO personnel onboard receive the briefing on Espionage Indicators (NAO 207-12 Appendix A) at least annually or as required by the Servicing Security Office. . | Responsibilities of the Foreign National Sponsor: . Export Control - The foreign national’s sponsor is responsible for obtaining any required export licenses and complying with any conditions of those licenses prior to the foreign national being provided access to the controlled technology onboard regardless of the technology’s ownership. . | The DSN of the foreign national shall assign an on-board Program individual, who will be responsible for the foreign national while on board. The identified individual must be a U.S. citizen and a NOAA or DOC employee. According to DOC/OSY, this requirement cannot be altered. . | Ensure completion and submission of Appendix C (Certification of Conditions and Responsibilities for a Foreign National . | VIII. Appendices (all that apply) . 1. Figures, maps, tables, images, etc. . 2. Station/Waypoint List (coordinates in Latitude, Longitude: degree-minutes) .",
            "url": "https://mikeowino.com/blog/2020/07/30/Project-Instruction-Template.html",
            "relUrl": "/2020/07/30/Project-Instruction-Template.html",
            "date": " • Jul 30, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Project Final Report Template",
            "content": "Project Final Report . Project # [enter Project Number here…] . Instructions are in hidden text. . The Project Final Report is intended to concisely summarize the outcomes of a project and is the final document in the CCS Project Management Methodology. A Project Final Report is used to document project successes, lessons learned and performance in order to signal improvement in project delivery for the future. This template outlines the content and format of final reports to be used for all information systems projects. The Project Management Office is your resource for completing this document. . A Project Final Report reflects the formal and informal feedback collected from project stakeholders and participants throughout the project. Commonly, a Project Post-Mortem is held to explore the experiences of the participants of the project in more detail. The information collected in this way should align with the details included in the Project Final Report. . The Project Final Report is to be developed between the project manager and the project director and should be circulated to project stakeholders and participants for feedback. Finally, the project sponsor should sign off on the details of the Project Final Report before it is forwarded to the Project Management Office for archiving. . The project sponsor is responsible for presenting the Project Final Report at a meeting of the Information Systems Steering Committee. . Project Name [Enter name of project] . Description | [Add the description of the project as taken from the Project Charter] | . Project Sponsor | [Name], [Position], [Department] | . Author(s) | [Name], [Position], [Department] | . Date | July 21, 2014 | . Project Results . What were the actual project end deliverables vs. the original baseline (i.e. those outlined in the Project Charter)? How close to the scheduled completion was the project and how close to budget was the final project cost? What was learned about the estimating of time, resources and cost; as well as the scheduling of activities and tasks that will help future projects? What project benefits were derived that were not originally identified? . Scope . Original | Actual (To Date) | . &lt;Enter here&gt; | &lt;Enter here&gt; | . Explanation of Variance . &lt;Enter here&gt; . | | . Schedule Milestones . Original | Actual (To Date) | . &lt;Enter here&gt; | &lt;Enter here&gt; | . Explanation of Variance . &lt;Enter here&gt; . | | . Project Budget . Planned | Actual (To Date) | . &lt;Enter here&gt; | &lt;Enter here&gt; | . Explanation of Variance . &lt;Enter here&gt; . | | . Project Successes . List and describe the highlights and key success factors of the project. . Name Description . [e.g. Customer communication] | [Customer engagement in this change allowed for a smooth transition with little resistance] | .   |   | .   |   | . Project Challenges . List and describe any unexpected events that occurred during the project (including approved change requests), the impact that those events may have had on the project and the action(s) taken to address them. . Description Impact Actions Taken . [e.g. Subject matter expert moved to another position] | [Schedule extended by two months] | [Original resource trained new position] | .   |   |   | .   |   |   | . Lessons Learned . List and describe any lessons learned from this project and provide recommendations that can be used to improve the delivery of future information systems projects. . Description Recommendation . [e.g. Business requirements included items not technically feasible] | [Involve technical resource to advise stakeholders during business analysis phase] | .   |   | .   |   | . Project Performance . The Meeting Customer Expectations variable must be completed by the Project Sponsor or Project Director. . Meeting Customer Expectations     . Success Criteria | Criteria Met | Comments | . [Enter Success Criteria from Project Charter here…] | ☐ |   | .   | ☐ |   | .   | ☐ |   | . Transition to Operations and Archives . . Transition to Operations | Describe the activities / deliverables to be transitioned to the operational team (i.e. knowledge transfer). | . Project Documents Location (Archives) | Describe what project archives have been created and where are they located. What documents have been archived? How can it be used on future projects? | . For Project Management Office Use Only .     . Presentation to ISSC | [Date] | .",
            "url": "https://mikeowino.com/blog/2020/07/30/Project-Final-Report-Template.html",
            "relUrl": "/2020/07/30/Project-Final-Report-Template.html",
            "date": " • Jul 30, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Project Charter",
            "content": "For instructions on using this template, please see Notes to Author/Template Instructions on page 17. Notes on accessibility: This template has been tested and is best accessible with JAWS 11.0 or higher. For questions about using this template, please contact CMS IT Governance. To request changes to the template, please submit an XLC Process Change Request (CR). . CMS Logo | Centers for Medicare &amp; Medicaid Services . CMS eXpedited Life Cycle (XLC) . | . &lt;Project Name / Acronym&gt; . Project Charter . Version X.X . MM/DD/YYYY . Document Number: &lt;document’s configuration item control number&gt; . Contract Number: &lt;current contract number of company maintaining document&gt; . Table of Contents . 1. Introduction 1 . 1.1 Project and Product Overview 1 . 1.2 Purpose of Project Charter 1 . 2. Justification 1 . 2.1 Business Need 1 . 2.2 Business Impact 1 . 2.3 Strategic Alignment 2 . 3. Scope 3 . 3.1 Objectives 3 . 3.2 High-Level Requirements 3 . 3.3 Major Deliverables 3 . 3.4 Boundaries 4 . 4. Project Organization 4 . 4.1 Roles and Responsibilities 4 . 4.2 Stakeholders 8 . 5. Duration 9 . 5.1 Timeline 9 . 5.2 Milestones 9 . 6. Budget Estimate 9 . 6.1 Funding Source 9 . 6.2 Estimate 9 . 7. Assumptions, Constraints and Risks 10 . 7.1 Assumptions 10 . 7.2 Constraints 10 . 7.3 Risks 10 . Appendix A: Record of Changes 12 . Appendix B: Acronyms 13 . Appendix C: Glossary 14 . Appendix D: Referenced Documents 15 . Appendix E: Approvals 16 . Appendix F: Notes to the Author / Template Instructions 17 . Appendix G: XLC Template Revision History 18 . Appendix H: Additional Appendices 19 . List of Figures . Figure 1: Example of a High-Level Timeline 12 . List of Tables . Table 1: Strategic Alignment 5 . Table 2: High-Level Requirements 6 . Table 3: Major Deliverables 6 . Table 4: Roles and Responsibilities 7 . Table 5: Milestones 12 . Table 6: Risks 14 . Table 7: Record of Changes 15 . Table 8: Acronyms 16 . Table 9: Glossary 17 . Table 10: Referenced Documents 18 . Table 11: XLC Template Revision History 21 . # . Introduction . Project and Product Overview . Instructions: Provide an overview of the project background, and a high-level description of what the project entails. Typically, the description should answer who, what, when and where, in a concise manner. It should also state the estimated project duration (e.g., 18 months) and the estimated project budget (e.g., $1.5M). For example: . ABC Corporation has been experiencing substantial backlogs in their new claim requests based upon their antiquated processing system. They have contracted with &lt;Contractor’s Name&gt; to create a robust processing system. The purpose of this project is to create a system to more effectively handle ABC’s claims and decrease the turn-around time for each claim by 2 hours. The project entails the analysis, development, testing, implementation, and maintenance of the new claims processing system, as well as subsequent training of the ABC staff. It should take 18 months to complete and cost $1.5M. . Purpose of Project Charter . Instructions: Provide the purpose of the project charter. . The &lt;Project Name&gt; project charter formally authorizes a project, describes the business need for the project and the product to be created by the project. It provides the project manager with the authority to apply up to a certain level of organizational resources to project activities. It is created during the Initiating Phase of the project. . The intended audience of the &lt;Project Name&gt; project charter is the Business Sponsor and Critical Partners. . Justification . Business Need . Instructions: This section of the Project Charter explains why the customers need this project to be completed. It identifies the customers who are to receive and benefit from the product(s) to be developed under this project. It identifies the need, the problem to be solved and/or the opportunity to exploit. . Business Impact . Instructions: In this section you should list the benefits the business and/or customers will receive as a result of this project. Describe the observable and measurable outcomes that will result directly from the project’s performance. Please note that performance measures will be crafted in future deliverables related to these targeted outcomes. . Strategic Alignment . Instructions: Please complete the table below: . Table : Strategic Alignment . Organization/Strategic Goals Project Response Rank (H – High, M – Medium, L – Low) Comments .   |   |   | .   |   |   | .   |   |   | . CMS Strategic Goals | Project Response Rank (H – High, M – Medium, L – Low) | Comments | .   |   |   | .   |   |   | .   |   |   | . Department of Health and Human Services (DHHS) Strategic Goals | Project Response Rank (H – High, M – Medium, L – Low) | Comments | .   |   |   | .   |   |   | .   |   |   | . DHHS IT Goals | Project Response Rank (H – High, M – Medium, L – Low) | Comments | .   |   |   | .   |   |   | .   |   |   | . President’s Management Agenda (PMA) Strategic Goals | Project Response Rank (H – High, M – Medium, L – Low) | Comments | .   |   |   | .   |   |   | . Scope . Objectives . The objectives of the &lt;Project Name&gt; are as follows: . Insert Objective 1 . | Insert Objective 2 . | Add additional bullets as necessary . | . High-Level Requirements . The following table presents the requirements that the project’s product, service or result must meet in order for the project objectives to be satisfied. . Table : High-Level Requirements . Requirement # Requirement Definition .   |   | .   |   | .   |   | . Major Deliverables . The following table presents the major deliverables that the project’s product, service or result must meet in order for the project objectives to be satisfied. . Table : Major Deliverables . Deliverable .   | .   | .   | . Boundaries . Instructions: Describe the inclusive and exclusive boundaries of the project. Specifically address items that are out of scope. . Project Organization . Roles and Responsibilities . Instructions: Depending on your project organization, you may modify the roles and responsibilities listed in the table below. . Table : Roles and Responsibilities . Name &amp; Organization Project Role Project Responsibilities Estimated % of Effort . &lt;Insert Name and Organization Here&gt; | &lt;Business Owner&gt; | &lt;Person responsible for acting as the project’s champion and providing direction and support to the team. In the context of this document, this person approves the request for funding, approves the project scope represented in this document, and sets the priority of the project relative to other projects in his/her area of responsibility. &gt; | | . &lt;Insert Name and Organization Here&gt; | &lt;Contracting Officer&gt; | &lt;Person who has the authority to enter into, terminate, or change a contractual agreement on behalf of the Government. This person bears the legal responsibility for the contract.&gt; | | . &lt;Insert Name and Organization Here&gt; | &lt;Project Officer /Contracting Officer Technical Representative&gt; | &lt;A program representative responsible for coordinating with acquisition officials on projects for which contract support is contemplated. This representative is responsible for technical monitoring and evaluation of the contractor&#39;s performance after award. &gt; | | . &lt;Insert Name and Organization Here&gt; | &lt;Project Manager (This could include a Contractor Project Manager or an FTE Project Manager) &gt; | &lt;Person who performs the day-to-day management of the project and has specific accountability for managing the project within the approved constraints of scope, quality, time and cost, to deliver the specified requirements, deliverables and customer satisfaction. The Project Manager chairs the integrated project team. &gt; | | . &lt;Insert Name and Organization Here&gt; | &lt;Business Representative&gt; | &lt;Business subject matter expert who has adequate knowledge of the business and project to make informed decisions on behalf of the Business Sponsor on certain matters. &gt; | | . &lt;Insert Name and Organization Here&gt; | &lt;Technical Representative&gt; | &lt;Person who is responsible for the technical day-to-day aspects of the system including the details of system development. The Technical Representative is responsible for providing technical direction to the project. &gt; | | . &lt;Name&gt; . &lt;Org&gt; . | &lt;Capital Planning and Investment Control (CPIC) Representative&gt; | &lt;Member of the integrated project team responsible for coordinating Critical Partners and insuring that the investment complies with CPIC policy and procedures. This person is also responsible for ensuring that the investment is performing according to HHS IT governance standards. &gt; | | . &lt;Name&gt; . &lt;Org&gt; . | &lt;Enterprise Architecture (EA) Critical Partner&gt; | &lt;Member of the integrated project team responsible for ensuring that the investment aligns with both the OPDIV and Department’s overall Target EA and Transition Strategy and complies with EA initiatives and requirements. &gt; | | . &lt;Name&gt; . &lt;Org&gt; . | &lt;Performance Critical Partner&gt; | &lt;Member of the integrated project team in management who is responsible for the project’s overall performance. This person must ensure that the investment is accomplishing the business objectives and meeting business needs. &gt; | | . &lt;Name&gt; . &lt;Org&gt; . | &lt;Acquisition Critical Partner&gt; | &lt;Member of the integrated project team responsible for representing acquisition interests and ensuring that the project is in compliance with HHS acquisition policy, procedures, and requirements. &gt; | | . &lt;Name&gt; . &lt;Org&gt; . | &lt;Security Critical Partner&gt; | &lt;Member of the integrated project team responsible for representing information security interests and ensuring that the project is in compliance with HHS information security policy, procedures, and requirements. &gt; | | . &lt;Name&gt; . &lt;Org&gt; . | &lt;Section 508 Critical Partner&gt; | &lt;Member of the integrated project team responsible for representing Section 508 interests and ensuring that the project is in compliance with Section 508 requirements.&gt; | | . &lt;Name&gt; . &lt;Org&gt; . | &lt;Budget Critical Partner&gt; | &lt;Member of the integrated project team that is responsible for determining if there are adequate financial resources available.&gt; | | . &lt;Name&gt; . &lt;Org&gt; . | &lt;Human Resources Critical Partner&gt; | &lt;Member of the integrated project team responsible for representing Human Resources interests and ensuring that the investment is incompliance with Human Resource policy, procedures, and requirements. &gt; | | . Stakeholders . Instructions: A stakeholder is a person or organization that is actively involved in the project, or whose interests may be positively or negatively affected by execution or completion of the project. A stakeholder may also exert influence over the project and its deliverables. . Duration . Timeline . *Instructions: An example of a high-level timeline is provided below. * . Figure : Example of a High-Level Timeline . Milestones . The table below lists the high-level Executive Milestones of the project and their estimated completion timeframe. . Table : Milestones . Milestones Estimated Completion Timeframe .   |   | .   |   | .   |   | .   |   | . Budget Estimate . Funding Source . Instructions: Identify the funding amount, source of authorization, and method of finance approved for the project. . As of &lt;Month Day, Year&gt;, &lt;source of authorization (e.g., the CMS Information Technology Investment Review Board (ITIRB)&gt; approved the use of &lt;$funding amount&gt; from &lt;funding source&gt; for this project. . Estimate . This section provides a summary of estimated spending to meet the objectives of the &lt;&lt;Project Name&gt;&gt; project as described in this project charter. This summary of spending is preliminary, and should reflect costs for the entire investment lifecycle. It is intended to present probable funding requirements and to assist in obtaining budgeting support. . Instructions: For projects associated with a major/tactical investment as defined by HHS OCIO there should be a line of sight between the budget presented here and the investment’s Exhibit 300. Double click on the Microsoft Excel Object table below to input values. . Instructions: PY in the excel spreadsheet stands for Past Year. CY stands for current year. BY stands for budget year. . * | . Assumptions, Constraints and Risks . Assumptions . This section identifies the statements believed to be true and from which a conclusion was drawn to define this project charter. . Insert description of the first assumption. . | Insert description of the second assumption. . | Add additional bullets as necessary . | . Constraints . This section identifies any limitation that must be taken into consideration prior to the initiation of the project. . Insert description of the first constraint. . | Insert description of the second constraint. . | Add additional bullets as necessary . | . Risks . Instructions: List the risks that the Business Owner should be aware of before making a decision on funding the project, including risks of not funding the project. . The table below presents the known risks which could have a major impact on the outcome of the project and associated mitigation strategy that the business owner/project team will take to manage them. . Table : Risks . Risk Mitigation .   |   | .   |   | .   |   | .   |   | . Record of Changes | Instructions: Provide information on how the development and distribution of the Project Charter will be controlled and tracked. Use the table below to provide the version number, the date of the version, the author/owner of the version, and a brief description of the reason for creating the revised version. . Table : Record of Changes . Version . Number . | Date | Author/Owner | Description of Change | . | | | | . | | | | . | | | | . | | | | . | | | | . | | | | . | | | | . | | | | . | | | | . | | | | . | | | | . | | | | . Acronyms | Instructions: Provide a list of acronyms and associated literal translations used within the document. List the acronyms in alphabetical order using a tabular format as depicted below. . Table : Acronyms .     . Acronym | Literal Translation | . CMS | Centers for Medicare &amp; Medicaid Services | . PMP | Project Management Plan | . PPA | Project Process Agreement | . WBS | Work Breakdown Structure | .   |   | . Glossary | Instructions: Provide clear and concise definitions for terms used in this document that may be unfamiliar to readers of the document. Terms are to be listed in alphabetical order. . Table : Glossary .     . Term | Definition | .   |   | .   |   | .   |   | .   |   | . Referenced Documents | Instructions: Summarize the relationship of this document to other relevant documents. Provide identifying information for all documents used to arrive at and/or referenced within this document (e.g., related and/or companion documents, prerequisite documents, relevant technical documentation, etc.). . Table : Referenced Documents . Document Name Document Location and/or URL Issuance Date .   |   |   | .   |   |   | .   |   |   | .   |   |   | .   |   |   | . Approvals | The undersigned acknowledge that they have reviewed the Project Charter and agree with the information presented within this document. Changes to this Project Charter will be coordinated with, and approved by, the undersigned, or their designated representatives. . Instructions: List the individuals whose signatures are desired. Examples of such individuals are Business Owner, Project Manager (if identified), and any appropriate stakeholders. Add additional lines for signature as necessary. . Signature:   Date:   . Print Name: |   |   |   | . Title: |   |   |   | . Role: |   |   |   | . Signature:   Date:   . Print Name: |   |   |   | . Title: |   |   |   | . Role: |   |   |   | . Signature:   Date:   . Print Name: |   |   |   | . Title: |   |   |   | . Role: |   |   |   | . Notes to the Author / Template Instructions | This document is a template for creating a Project Charter for a given investment or project. The final document should be delivered in an electronically searchable format. The Project Charter should stand on its own with all elements explained and acronyms spelled out for reader/reviewers, including reviewers outside CMS who may not be familiar with CMS projects and investments. . This template includes instructions, boilerplate text, and fields. The developer should note that: . Each section provides instructions or describes the intent, assumptions, and context for content included in that section. Instructional text appears in blue italicized font throughout this template. . | Instructional text in each section should be replaced with information specific to the particular investment. . | . Some text and tables are provided as boilerplate examples of wording and formats that may be used or modified as appropriate. | . When using this template, follow these steps: . Table captions and descriptions are to be placed centered, above the table. . | Modify any boilerplate text, as appropriate, to your specific investment. . | Do not delete any headings. If the heading is not applicable to the investment, enter “Not Applicable” under the heading. . | All documents must be compliant with Section 508 requirements. . | Figure captions and descriptions are to be placed centered, below the figure. All figures must have an associated tag providing appropriate alternative text for Section 508 compliance. . | Delete this “Notes to the Author / Template Instructions” page and all instructions to the author before finalizing the initial draft of the document. . | XLC Template Revision History | The following table records information regarding changes made to the XLC template over time. This table is for use by the XLC Steering Committee only. To provide information about the controlling and tracking of this artifact, please refer to the Record of Changes section of this document. . Table : XLC Template Revision History . Version . Number . | Date | Author/Owner | Description of Change | . 2.2 | 1/2009 | K. Maenner – OIS/EASG/DITPPA | Removed “IT Governance Review Board Approving Authority” as an approver on Approvals page. | . 3.0 | 08/14/2014 | Celia Shaunessy, XLC Steering Committee | Changes made per CR 14-012. | . 3.1 | 02/02/2015 | Surya Potu, . CMS/OEI/DPPIG . | Updated CMS logo. | . | | | | . | | | | . | | | | . | | | | . | | | | . | | | | . | | | | . | | | | . | | | | . Additional Appendices | Instructions: Utilize additional appendices to facilitate ease of use and maintenance of the document. .",
            "url": "https://mikeowino.com/blog/2020/07/30/Project-Charter.html",
            "relUrl": "/2020/07/30/Project-Charter.html",
            "date": " • Jul 30, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Mike Owino Documentation",
            "content": ". DEDAN KIMATHI UNIVERSITY OF TECHNOLOGY . SCHOOL OF COMPUTER SCIENCE AND INFORMATION TECHNOLOGY . DEPARTMENT OF INFORMATION TECHNOLOGY . A PROJECT PROPOSAL FOR THE FINAL YEAR STUDENT IN BSc BUSINESS INFORMATION TECHNOLOGY . PROJECT TITLE: COVIDLY . SUBMITTED BY . NAME: OWINO MIKE OKUMU . REG.NO: C027-01-1110/2017 . SUPERVISOR . MR. MICHAEL KAGIRI . A project submitted in partial fulfillment of the requirements for the degree in Business . Information Technology to the Department of Computer Science and . Information Technology. . DECLARATION . I hereby declare that the project entitled COVIDLY submitted for the B.Sc. Business Information Technology degree is my original work and the project has not formed the basis for an award of any degree, diploma or any other similar titles. . Name: OWINO MIKE OKUMU . Signature ……………………………….. . Date: . This project has been submitted for examination with my approval as a University Supervisor. Name MR. MICHAEL KAGIRI. . Signature ……………………………… . Date: . DEDICATION . I dedicate this project to my father, Alfred Okumu for his financial support and constant encouragement throughout my education and paving for me to do this course. I also dedicate it to my family members who has been of constant help during my way Degree program. God bless them abundantly. . ACKNOLEDGEMENT . I would like to express my very great appreciation to Mr. Kagiri Michael for his valuable and constructive guidance during the entire development of this research work. His willingness to give his time so generously is much appreciated. . I would also like to express my gratitude to Mrs. Kuria Jane for her advice and assistance in moderating my research proposal. . I would like to acknowledge the role played by the department of Information Technology as well as all my lecturers in the B.Sc. Business Information Technology degree program. . I am particularly grateful to Mrs. Ndunge Elizabeth who tutored Research Methods, a subject that did helped a lot in this research. . I also acknowledge the help from all my classmates, specifically Nicholas, Denis, Jennifer among others. Finally, I wish to thank my family and friends for their support and encouragement throughout my study. God bless. . # . # . # . # . # . # . # . # . # . # . # . ABSTRACT . In early December 2019, an outbreak of coronavirus disease 2019 (COVID-19)(Organization &amp; others, 2020), caused by a novel severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2). . It occurred in Wuhan City, Hubei Province, China. On January 30, 2020, the World Health Organization declared the outbreak as a Public Health Emergency of International Concern. As of February 14, 2020, 49,053 laboratory-confirmed and 1,381(Worldometers, 2020) deaths have been reported globally. . Perceived risk of acquiring disease has led to many governments to institute a variety of control measures of reducing the spread of the virus and ways of ensuring that their citizens are well equipped with the required information about the virus. . The project aims to reduce the burden on the head of going to a website in search of the covid cases by developing a convincing Chabot where that information can be easily accessed. . A suitable algorithm is devised to search through the set of data and find a potential number. The program then replies to the user and provides a relevant web link if after the user is sent the reply. . Table of Contents . DECLARATION ii . DEDICATION ii . ACKNOLEDGEMENT v . ABSTRACT vi . List of figures ix . List of Tables x . ABREVIATIONS xi . CHAPTER 1: INTRODUCTION 1 . 1.1 BACKGROUND 1 . 1.2 PROBLEM STATEMENT 2 . 1.3 RESEARCH OBJECTIVES 3 . 1.3.1 General Objectives 3 . 1.3.2 Specific Objectives 3 . 1.3.3 Justification of the Study 3 . 1.3.4 Scope of the Study 4 . 1.3.5 Study Limitation 4 . CHAPTER 2: LITERATURE REVIEW 5 . 2.1 Case Studies 5 . 2.1.1 CASE 1 5 . 2.1.2 CASE 2 6 . 2.1.3 CASE 3 7 . 2.1.4 CASE 4 8 . CHAPTER 3: METHODOLOGY 9 . 3.1 INTRODUCTION 9 . 3.2 SYSTEM DEVELOPMENT LIFE CYCLE 9 . The purpose of waterfall method is that it allows for departmentalization and control. A schedule can be set with deadlines for each stage of development and a product can proceed through the development process model phases one by one. 9 . 3.2.1 REQUIREMENTS 10 . 3.2.2 RESEARCH DESIGN 11 . 3.2.3 IMPLEMENTATION 11 . 3.2.4 TESTING 11 . 3.2.5 DEPLOYMENT 12 . 3.2.6 MAINTENANCE 12 . 3.3 TOTAL POPULATION 12 . 3.4 SAMPLING PROCEDURE 12 . 3.4.1 Sample size 12 . 3.4.2 Sampling Design 13 . 3.5 DATA COLLECTION METHOD 13 . 3.5.1 Documents and Records 13 . 3.5.2 Internet Research 13 . 3.6 DATA ANALYSIS 13 . 3.6.1 Test for Covidly functionality 13 . CHAPTER FOUR: DESIGN AND ANALYSIS 14 . 4.1 INTRODUCTION 14 . 4.2 REQUIREMENT ANALYSIS 14 . 4.2.1 Functional Requirements 14 . 4.2.2 Non-Functional Requirements 14 . 4.3 DATA PROCESSING AND ANALYSIS 15 . 4.3.1 Questionnaire 15 . 4.3.2 Charts and Graphs 16 . 4.4 SYSTEM ANALYSIS 19 . 4.4.1 INTRODUCTION 19 . 4.4.2 Sequence Diagram 19 . 4.4.3 Use Case Diagram 20 . CHAPTER FIVE: DISCUSSION, CONCLUSION AND RECOMMENDATIONS 21 . 5.1 INTRODUCTION 21 . 5.2 DISCUSSIONS 21 . 5.3 CONCLUSIONS 23 . 5.4 RECOMMENDATION 23 . 5.5 LIMITATIONS OF THE STUDY 24 . References 25 . Appendix A 27 . A1 PYTHON LANGUAGE GRAMMER SPECIFICATIONS 27 . A2 JSON LANGUAGE GRAMMER SPECIFICATIONS 33 . Appendix B 35 . Sample source code and output listing 35 . B1 COMMANDS CODE FOR THE BOT AND REPLIES 35 . B2 CODE FOR ACCESSING THE COVID-19 API SERVERS 40 . B3 MAIN SOURCE CODE OF THE BOT INCLUDING ACCESS TO THE BOT API TOKEN AND NOTIFY TIME FOR SENDING THE DAILY NOTIFICATIONS 43 . B4 JSON CODE CONTAINING BOT TOKEN AND TIMER 56 . List of figures . Figure 1 infected countries on a logarithmic scale.(AaronWard, 2020) 6 . Figure 2 Covid-19 visualization(localeai, 2020) 7 . Figure 3 Corona Virus Tracker Swift UI(alfianlosari, 2020) 8 . Figure 4 Deaths Per Million of Inhabitants(github, 2020) 9 . Figure 5 Waterfall model(creately.com, 2020) 11 . List of Tables . Table 1 Resources Table 17 . Table 2 Budget Table 17 . Table 3 GANTT CHART 18 . ABREVIATIONS . CHAPTER 1: INTRODUCTION . 1.1 BACKGROUND . Since the outbreak of the corona virus there has been a need to have systems that will enable citizens of a country to have readily available information to make them get required information of what is going on. . This is after the famous Spanish flu(B. J. Jester et al., 2018) that hit the world 100 years ago(B. Jester et al., 2019) and people were not prepared enough for it despite technological inventions but as per the current technological inventions that we are now there is need to have some applications that allow people to get the required information to minimize the spread of the virus. . The purpose of the project is to build a telegram-based bot that feeds the subscriber information based on the latest count of corona virus that is current statistics of local total confirmed, deaths, and recovered cases. . The bot also provides advice from the government and the required rules to be followed provided by the government. The research findings help the Kenyan citizens to be aware and equipped with the knowledge of how to handle the virus situation and follow the regulations laid out by the government and also get track of the statistics in the country. . PROBLEM STATEMENT . According to the way the information about corona virus is being passed out via the television, radio, twitter(MOH_Kenya, 2020) and websites(Worldometers, 2020) there has been an ignorance of the information being conveyed thus seen the increase in the number of the corona virus related cases due to ignorance despite the information given. . The increase in the number of cases has been attributed to the ignorance of the information being conveyed by the government which has led to many people succumbing to the virus. . The aim of this project is to come up with an alternative method of information circulation to the people of Kenya to get timely the information provided by the government and follow up direct from their mobile phone (Telegram(telegram.org, 2020)). . RESEARCH OBJECTIVES . General Objectives . | | The main objective of this study is to contribute to the solution of updating people of the corona virus cases by developing a telegram bot that shows the daily count of corona virus cases in Kenya and the global count of the virus. . Specific Objectives . 1) To develop an information resource were all the relevant information about the questions and the answers will be stored. . 2) To provide a summarized format of the covid-19 cases such as the deaths, infected and recovered cases. . 3) To develop a bot interface which aims to give the ability to potential users and their friends to request data of covid-19 related cases in the Chatbot and get convincing replies. . 1. ### Justification of the Study . The significance of the study should is to provide a channel for transmission of information about the corona virus cases directly from the government. It is important as the bot users will be able to get first-hand information from the government directly from their chat application saving their time of going to the website or other sources. . Scope of the Study . The study focuses on the telegram users and all other people in Kenya who are capable of joining telegram to make use of its open source API the encamp uses of running a bot . 1.3.5 Study Limitation . The bot does not provide previous data of the covid-19 related cases such data of the previous months or days. . CHAPTER 2: LITERATURE REVIEW . 2.1 Case Studies . 2.1.1 CASE 1 . Covidify . Corona virus report and dataset generator for python(AaronWard, 2020) that creates a time series dataset, Creates a daily stats dataset, forecast global and country confirmed cases, generate visualizations ,filter by country, filter by country, shows number of people currently infected and generates an excel report including all of the above. . An ARIMA model is trained and used to forecast the cumulative cases for N number of days into the future. . The following figure gives an example of Covidify displaying covid-19 data. . . Figure 1 infected countries on a logarithmic scale.(AaronWard, 2020) . 2.1.2 CASE 2 . Covid-19 live visualization . API project which gives the layers data to the webapp(localeai, 2020). The webapp currently supports the layers that are picked up from periodically generated file from GitHub repository. . The GitHub api url for the repo holds the layers data. It is used to pick up the last updated date from the latest commit to the repo. It uses the GitHub API, along with the static repository URL. . The following figure gives an example of Covid-19 live visualization displaying covid-19 data. . . Figure 2 Covid-19 visualization(localeai, 2020) . 2.1.3 CASE 3 . Corona Virus Tracker Swift UI . The project gets current statistics of global total confirmed, deaths, recovered cases, statistics of countries and regions total cases count World map with annotation pin and description of affected regions Datasets is provided by ArcGIS Esri Corona Virus dataset(alfianlosari, 2020). Basic advice to prevent and handle virus, myth busters Q &amp;A from WHO. . . Figure 3 Corona Virus Tracker Swift UI(alfianlosari, 2020) . 2.1.4 CASE 4 . Covid19-Dashboard . This project was supported by a virtual team of open source collaborators that gather data, make visualizations and perform analysis regarding the COVID-19 epidemic(github, 2020). . We saw that data scientists were struggling to share information with each other, so we used this project to aid in the sharing of data and information. . This project aims to offer an accessible way for data professionals to share dashboards (that are updated with new data automatically) without requiring any expertise in front end development. . . Figure 4 Deaths Per Million of Inhabitants(github, 2020) . CHAPTER 3: METHODOLOGY . 3.1 INTRODUCTION . This chapter deals with the research method that will be adopted and the analysis of the data collected. This study entails a descriptive survey design; the population that was the Kenya’s and the world population, sample design, data collection and analysis. . 3.2 SYSTEM DEVELOPMENT LIFE CYCLE . ### . The design and development of the bot will be followed by the waterfall model. . The purpose of waterfall method is that it allows for departmentalization and control. A schedule can be set with deadlines for each stage of development and a product can proceed through the development process model phases one by one. . It is easy to manage due to the rigidity of the model as each phase has specific deliverables and a review process and phases are processed and completed one at a time and they do not overlap. The waterfall model also works well for smaller projects like mine where requirements are very well understood. . The sample waterfall model is as shown in the diagram below. . . Figure 5 Waterfall model(creately.com, 2020) . 3.2.1 REQUIREMENTS . In this phase I will focus on possible requirements of the system for the development. Requirements to be gathered subsequent to the end user consultation includes Google Cloud platform(cloud.google.com, 2020) , Heroku(heroku.com, 2020) ,Telegram generated bot with a working API , Internet connection ,personal computer , mobile phone , Visual Studio Code(code.visualstudio.com, 2020) ,Git(git-scm.com, n.d.) client and python environment installed on the computer. . 3.2.2 RESEARCH DESIGN . Prior to beginning the actual coding, it is inevitable to understand what actions are to be taken and what they should like. The requirement specifications will be studied in detail in this phase and the design of the bot is prepared. The design specifications will be the base for the implementation and unit testing model phase. . Visual Studio Code will be used in the designing of the bot together with the bot to get the layout of the buttons to be used by the users and the texts to be displayed on the press of the button. . IMPLEMENTATION . After receiving the system design documents, the work will be shared into various modules and the real coding is commenced by use of Visual Studio Code. The system will be developed into small coding files such as the API file and the layout file. These units will later be integrated in the subsequent phase. Every unit will be tested for its functionality to meet the bot functionality. . 3.2.4 TESTING . The modules that will be divided into units will be integrated into a complete system and tested for proper coordination among modules and system behaves as per the specifications. The bot will be tested by being deployed to Google Cloud for its integration with the telegram bot API to start operational testing. . 3.2.5 DEPLOYMENT . Once the testing is completed and the bot is found to meet the user requirements it will be deployed to Heroku via the git client as Heroku only supports deployment by use of git.Postress(data.heroku.com, 2020) will be used to connect the bot with the database accessible(NovelCOVID REST API (NovelCOVID, 2020)) of the covid-19 cases the to the bots API and displayed to the users. . 3.2.6 MAINTENANCE . It is a never-ending phase. Once the system is running in production environment, problems may come up such as change of the database access URL. The issues that are related to the bot will be solved only after deployment of the system. The problems may arise from time to time and need to be solved. . ## . 3.3 TOTAL POPULATION . The total population to be considered it the world population which has already been counted for use by Worldometer that will be further broken down into Kenyan population and the top most affected countries in the world to see how other countries are doing with the corona virus. . 3.4 SAMPLING PROCEDURE . 3.4.1 Sample size . Kenyan population and the topmost affected countries in the world to see how other countries are doing with the corona virus. . Sampling Design . Out of the world population data available in the API website ill sample Kenyan data to deal with and narrow down to the infected, deaths and recovered persons. . 3.5 DATA COLLECTION METHOD . 3.5.1 Documents and Records . I will examine data from documents containing relevant covid-19 cases such as journals and records containing covid-19 cases such as data of ArcGIS from GitHub spreadsheets . 3.5.2 Internet Research . The Internet will be a great source of information and material, majority of the research to be carried out will be done here to avoid reinventing the wheel. . DATA ANALYSIS . 3.6.1 Test for Covidly functionality . CHAPTER FOUR: DESIGN AND ANALYSIS . 4.1 INTRODUCTION . 4.2 REQUIREMENT ANALYSIS . 4.2.1 Functional Requirements . 4.2.2 Non-Functional Requirements . 4.3 DATA PROCESSING AND ANALYSIS . 4.3.1 Questionnaire . 4.3.2 Charts and Graphs . 4.4 SYSTEM ANALYSIS . 4.4.1 INTRODUCTION . 4.4.2 Sequence Diagram . 4.4.3 Use Case Diagram . CHAPTER FIVE: DISCUSSION, CONCLUSION AND RECOMMENDATIONS . 5.1 INTRODUCTION . This chapter presents a summary of… . 5.2 DISCUSSIONS . 5.3 CONCLUSIONS . 5.4 RECOMMENDATION . 5.5 LIMITATIONS OF THE STUDY . References . AaronWard. (2020). covidify.alfianlosari. (2020). CoronaVirusTrackerSwiftUI.cloud.google.com. (2020). cloud.google.com.code.visualstudio.com. (2020). code.visualstudio.com.creately.com. (2020). creately.com.data.heroku.com. (2020). data.heroku.com.de Groot, R. J., Baker, S. C., Baric, R. S., Brown, C. S., Drosten, C., Enjuanes, L., Fouchier, R. A. M., Galiano, M., Gorbalenya, A. E., Memish, Z. A., Perlman, S., Poon, L. L. M., Snijder, E. J., Stephens, G. M., Woo, P. C. Y., Zaki, A. M., Zambon, M., &amp; Ziebuhr, J. (2013). Middle East Respiratory Syndrome Coronavirus (MERS-CoV): Announcement of the Coronavirus Study Group. Journal of Virology, 87(14), 7790–7792. https://doi.org/10.1128/jvi.01244-13git-scm.com. (n.d.). git-scm.com.github. (2020). covid19-dashboard.heroku.com. (2020). heroku.com.Jester, B. J., Uyeki, T. M., Patel, A., Koonin, L., &amp; Jernigan, D. B. (2018). 100 Years of Medical Countermeasures and Pandemic Influenza Preparedness. American Journal of Public Health, 108(11), 1469–1472. https://doi.org/10.2105/AJPH.2018.304586Jester, B., Uyeki, T. M., Jernigan, D. B., &amp; Tumpey, T. M. (2019). Historical and clinical aspects of the 1918 H1N1 pandemic in the United States. Virology, 527(May 2018), 32–37. https://doi.org/10.1016/j.virol.2018.10.019localeai. (2020). covid19-live-visualization.MOH_Kenya. (2020). #KomeshaCorona.NovelCOVID. (2020). API.Organization, W. H., &amp; others. (2020). Coronavirus disease 2019 (COVID-19): situation report, 72.Rajendran, D. K., Rajagopal, V., Alagumanian, S., Santhosh Kumar, T., Sathiya Prabhakaran, S. P., &amp; Kasilingam, D. (2020). Systematic literature review on novel corona virus SARS-CoV-2: a threat to human era. VirusDisease. https://doi.org/10.1007/s13337-020-00604-zShereen, M. A., Khan, S., Kazmi, A., Bashir, N., &amp; Siddique, R. (2020). COVID-19 infection: Origin, transmission, and characteristics of human coronaviruses. Journal of Advanced Research, 24, 91–98. https://doi.org/10.1016/j.jare.2020.03.005telegram.org. (2020). telegram.org.Worldometers. (2020). COVID-19 Coronavirus Pandemic.Zhang, C., Zheng, W., Huang, X., Bell, E. W., Zhou, X., &amp; Zhang, Y. (2020). Protein Structure and Sequence Reanalysis of 2019-nCoV Genome Refutes Snakes as Its Intermediate Host and the Unique Similarity between Its Spike Protein Insertions and HIV-1. Journal of Proteome Research, 19(4), 1351–1360. https://doi.org/10.1021/acs.jproteome.0c00129Zhang, L., &amp; Liu, Y. (2020). Potential interventions for novel coronavirus in China: A systematic review. In Journal of Medical Virology (Vol. 92, Issue 5). https://doi.org/10.1002/jmv.25707 . Appendix A . A1 PYTHON LANGUAGE GRAMMER SPECIFICATIONS . # Grammar for Python . # NOTE WELL: You should also follow all the steps listed at . # https://devguide.python.org/grammar/ . # Start symbols for the grammar: . # single_input is a single interactive statement; . # file_input is a module or sequence of commands read from an input file; . # eval_input is the input for the eval() functions. . # func_type_input is a PEP 484 Python 2 function type comment . # NB: compound_stmt in single_input is followed by extra NEWLINE! . # NB: due to the way TYPE_COMMENT is tokenized it will always be followed by a NEWLINE . single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE | . file_input: (NEWLINE | stmt)* ENDMARKER | . eval_input: testlist NEWLINE* ENDMARKER . decorator: ‘@’ dotted_name [ ‘(‘ [arglist] ‘)’ ] NEWLINE . decorators: decorator+ . decorated: decorators (classdef | funcdef | async_funcdef) | . async_funcdef: ASYNC funcdef . funcdef: ‘def’ NAME parameters [’-&gt;’ test] ‘:’ [TYPE_COMMENT] func_body_suite . parameters: ‘(‘ [typedargslist] ‘)’ . # The following definition for typedarglist is equivalent to this set of rules: . # . # arguments = argument (‘,’ [TYPE_COMMENT] argument)* . # argument = tfpdef [’=’ test] . # kwargs = ‘**’ tfpdef [’,’] [TYPE_COMMENT] . # args = ‘*’ [tfpdef] . *# kwonly_kwargs = (‘,’ [TYPE_COMMENT] argument)* (TYPE_COMMENT | [’,’ [TYPE_COMMENT] [kwargs]])* | . *# args_kwonly_kwargs = args kwonly_kwargs | kwargs* | . *# poskeyword_args_kwonly_kwargs = arguments ( TYPE_COMMENT | [’,’ [TYPE_COMMENT] [args_kwonly_kwargs]])* | . *# typedargslist_no_posonly = poskeyword_args_kwonly_kwargs | args_kwonly_kwargs* | . *# typedarglist = (arguments ‘,’ [TYPE_COMMENT] ‘/’ [’,’ [[TYPE_COMMENT] typedargslist_no_posonly]]) | (typedargslist_no_posonly)”* | . # . # It needs to be fully expanded to allow our LL(1) parser to work on it. . typedargslist: ( . (tfpdef [’=’ test] (‘,’ [TYPE_COMMENT] tfpdef [’=’ test])* ‘,’ [TYPE_COMMENT] ‘/’ [’,’ [ [TYPE_COMMENT] tfpdef [’=’ test] ( . ’,’ [TYPE_COMMENT] tfpdef [’=’ test])* (TYPE_COMMENT | [’,’ [TYPE_COMMENT] [ | . ’*’ [tfpdef] (‘,’ [TYPE_COMMENT] tfpdef [’=’ test])* (TYPE_COMMENT | [’,’ [TYPE_COMMENT] [’**’ tfpdef [’,’] [TYPE_COMMENT]]]) | . ’**’ tfpdef [’,’] [TYPE_COMMENT]]]) | . ’*’ [tfpdef] (‘,’ [TYPE_COMMENT] tfpdef [’=’ test])* (TYPE_COMMENT | [’,’ [TYPE_COMMENT] [’**’ tfpdef [’,’] [TYPE_COMMENT]]]) | . ’**’ tfpdef [’,’] [TYPE_COMMENT]]] ) | . (tfpdef [’=’ test] (‘,’ [TYPE_COMMENT] tfpdef [’=’ test])* (TYPE_COMMENT | [’,’ [TYPE_COMMENT] [ | . ’*’ [tfpdef] (‘,’ [TYPE_COMMENT] tfpdef [’=’ test])* (TYPE_COMMENT | [’,’ [TYPE_COMMENT] [’**’ tfpdef [’,’] [TYPE_COMMENT]]]) | . ’**’ tfpdef [’,’] [TYPE_COMMENT]]]) | . ’*’ [tfpdef] (‘,’ [TYPE_COMMENT] tfpdef [’=’ test])* (TYPE_COMMENT | [’,’ [TYPE_COMMENT] [’**’ tfpdef [’,’] [TYPE_COMMENT]]]) | . ’**’ tfpdef [’,’] [TYPE_COMMENT]) | . ) . tfpdef: NAME [’:’ test] . # The following definition for varargslist is equivalent to this set of rules: . # . # arguments = argument (‘,’ argument )* . # argument = vfpdef [’=’ test] . # kwargs = ‘**’ vfpdef [’,’] . # args = ‘*’ [vfpdef] . # kwonly_kwargs = (‘,’ argument )* [’,’ [kwargs]] . *# args_kwonly_kwargs = args kwonly_kwargs | kwargs* | . # poskeyword_args_kwonly_kwargs = arguments [’,’ [args_kwonly_kwargs]] . *# vararglist_no_posonly = poskeyword_args_kwonly_kwargs | args_kwonly_kwargs* | . *# varargslist = arguments ‘,’ ‘/’ [’,’[(vararglist_no_posonly)]] | (vararglist_no_posonly)* | . # . # It needs to be fully expanded to allow our LL(1) parser to work on it. . varargslist: vfpdef [’=’ test ](‘,’ vfpdef [’=’ test])* ‘,’ ‘/’ [’,’ [ (vfpdef [’=’ test] (‘,’ vfpdef [’=’ test])* [’,’ [ . ’*’ [vfpdef] (‘,’ vfpdef [’=’ test])* [’,’ [’**’ vfpdef [’,’]]] . ’**’ vfpdef [’,’]]] | . ’*’ [vfpdef] (‘,’ vfpdef [’=’ test])* [’,’ [’**’ vfpdef [’,’]]] | . ’**’ vfpdef [’,’]) ]] | (vfpdef [’=’ test] (‘,’ vfpdef [’=’ test])* [’,’ [ | . ’*’ [vfpdef] (‘,’ vfpdef [’=’ test])* [’,’ [’**’ vfpdef [’,’]]] . ’**’ vfpdef [’,’]]] | . ’*’ [vfpdef] (‘,’ vfpdef [’=’ test])* [’,’ [’**’ vfpdef [’,’]]] | . ’**’ vfpdef [’,’] | . ) . vfpdef: NAME . stmt: simple_stmt | compound_stmt | . simple_stmt: small_stmt (‘;’ small_stmt)* [’;’] NEWLINE . small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt | . import_stmt | global_stmt | nonlocal_stmt | assert_stmt) | . expr_stmt: testlist_star_expr (annassign | augassign (yield_expr | testlist) | . [(‘=’ (yield_expr | testlist_star_expr))+ [TYPE_COMMENT]] ) | . annassign: ‘:’ test [’=’ (yield_expr | testlist_star_expr)] | . testlist_star_expr: (test | star_expr) (‘,’ (test | star_expr))* [’,’] | . augassign: (‘+=’ | ’-=’ | ’*=’ | ’@=’ | ’/=’ | ’%=’ | ‘&amp;=’ | ’ | =’ | ’^=’ | . ’&lt;&lt;=’ | ’&gt;&gt;=’ | ’**=’ | ’//=’) | . # For normal and annotated assignments, additional restrictions enforced by the interpreter . del_stmt: ‘del’ exprlist . pass_stmt: ‘pass’ . flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt | . break_stmt: ‘break’ . continue_stmt: ‘continue’ . return_stmt: ‘return’ [testlist_star_expr] . yield_stmt: yield_expr . raise_stmt: ‘raise’ [test [‘from’ test]] . import_stmt: import_name | import_from | . import_name: ‘import’ dotted_as_names . *# note below: the (‘.’ | ‘…’) is necessary because ‘…’ is tokenized as ELLIPSIS* | . import_from: (‘from’ ((‘.’ | ‘…’)* dotted_name | (‘.’ | ‘…’)+) | . ‘import’ (‘*’ | ’(‘ import_as_names ‘)’ | import_as_names)) | . import_as_name: NAME [‘as’ NAME] . dotted_as_name: dotted_name [‘as’ NAME] . import_as_names: import_as_name (‘,’ import_as_name)* [’,’] . dotted_as_names: dotted_as_name (‘,’ dotted_as_name)* . dotted_name: NAME (‘.’ NAME)* . global_stmt: ‘global’ NAME (‘,’ NAME)* . nonlocal_stmt: ‘nonlocal’ NAME (‘,’ NAME)* . assert_stmt: ‘assert’ test [’,’ test] . compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt | . async_stmt: ASYNC (funcdef | with_stmt | for_stmt) | . if_stmt: ‘if’ namedexpr_test ‘:’ suite (‘elif’ namedexpr_test ‘:’ suite)* [‘else’ ‘:’ suite] . while_stmt: ‘while’ namedexpr_test ‘:’ suite [‘else’ ‘:’ suite] . for_stmt: ‘for’ exprlist ‘in’ testlist ‘:’ [TYPE_COMMENT] suite [‘else’ ‘:’ suite] . try_stmt: (‘try’ ‘:’ suite . ((except_clause ‘:’ suite)+ . [‘else’ ‘:’ suite] . [‘finally’ ‘:’ suite] | . ‘finally’ ‘:’ suite)) . with_stmt: ‘with’ with_item (‘,’ with_item)* ‘:’ [TYPE_COMMENT] suite . with_item: test [‘as’ expr] . # NB compile.c makes sure that the default except clause is last . except_clause: ‘except’ [test [‘as’ NAME]] . suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT | . namedexpr_test: test [’:=’ test] . test: or_test [‘if’ or_test ‘else’ test] | lambdef | . test_nocond: or_test | lambdef_nocond | . lambdef: ‘lambda’ [varargslist] ‘:’ test . lambdef_nocond: ‘lambda’ [varargslist] ‘:’ test_nocond . or_test: and_test (‘or’ and_test)* . and_test: not_test (‘and’ not_test)* . not_test: ‘not’ not_test | comparison | . comparison: expr (comp_op expr)* . # &lt;&gt; isn’t actually a valid comparison operator in Python. It’s here for the . # sake of a __future__ import described in PEP 401 (which really works :-) . comp_op: ‘&lt;’ | ’&gt;’ | ’==’ | ’&gt;=’ | ’&lt;=’ | ’&lt;&gt;’ | ’!=’ | ‘in’ | ‘not’ ‘in’ | ‘is’ | ‘is’ ‘not’ | . star_expr: ‘*’ expr . expr: xor_expr (‘ | ’ xor_expr)* | . xor_expr: and_expr (‘^’ and_expr)* . and_expr: shift_expr (‘&amp;’ shift_expr)* . shift_expr: arith_expr ((‘&lt;&lt;’ | ’&gt;&gt;’) arith_expr)* | . arith_expr: term ((‘+’ | ’-‘) term)* | . term: factor ((‘*’ | ’@’ | ’/’ | ’%’ | ’//’) factor)* | . factor: (‘+’ | ’-‘ | ’~’) factor | power | . power: atom_expr [’**’ factor] . atom_expr: [AWAIT] atom trailer* . atom: (‘(‘ [yield_expr | testlist_comp] ‘)’ | . ’[’ [testlist_comp] ‘]’ | . ’{‘ [dictorsetmaker] ‘}’ | . NAME | NUMBER | STRING+ | ‘…’ | ‘None’ | ‘True’ | ‘False’) | . testlist_comp: (namedexpr_test | star_expr) ( comp_for | (‘,’ (namedexpr_test | star_expr))* [’,’] ) | . trailer: ‘(‘ [arglist] ‘)’ | ’[’ subscriptlist ‘]’ | ’.’ NAME | . subscriptlist: subscript (‘,’ subscript)* [’,’] . subscript: test | [test] ‘:’ [test] [sliceop] | . sliceop: ‘:’ [test] . exprlist: (expr | star_expr) (‘,’ (expr | star_expr))* [’,’] | . testlist: test (‘,’ test)* [’,’] . dictorsetmaker: ( ((test ‘:’ test | ’**’ expr) | . (comp_for | (‘,’ (test ‘:’ test | ’**’ expr))* [’,’])) | . ((test | star_expr) | . (comp_for | (‘,’ (test | star_expr))* [’,’])) ) | . classdef: ‘class’ NAME [’(‘ [arglist] ‘)’] ‘:’ suite . arglist: argument (‘,’ argument)* [’,’] . # The reason that keywords are test nodes instead of NAME is that using NAME . # results in an ambiguity. ast.c makes sure it’s a NAME. . # “test ‘=’ test” is really “keyword ‘=’ test”, but we have no such token. . # These need to be in a single rule to avoid grammar that is ambiguous . # to our LL(1) parser. Even though ‘test’ includes ‘*expr’ in star_expr, . # we explicitly match ‘*’ here, too, to give it proper precedence. . # Illegal combinations and orderings are blocked in ast.c: . # multiple (test comp_for) arguments are blocked; keyword unpackings . # that precede iterable unpackings are blocked; etc. . argument: ( test [comp_for] | . test ‘:=’ test | . test ‘=’ test | . ’**’ test | . ’*’ test ) . comp_iter: comp_for | comp_if | . sync_comp_for: ‘for’ exprlist ‘in’ or_test [comp_iter] . comp_for: [ASYNC] sync_comp_for . comp_if: ‘if’ test_nocond [comp_iter] . # not used in grammar, but may appear in “node” passed from Parser to Compiler . encoding_decl: NAME . yield_expr: ‘yield’ [yield_arg] . yield_arg: ‘from’ test | testlist_star_expr | . # the TYPE_COMMENT in suites is only parsed for funcdefs, . # but can’t go elsewhere due to ambiguity . func_body_suite: simple_stmt | NEWLINE [TYPE_COMMENT NEWLINE] INDENT stmt+ DEDENT | . func_type_input: func_type NEWLINE* ENDMARKER . func_type: ‘(‘ [typelist] ‘)’ ‘-&gt;’ test . # typelist is a modified typedargslist (see above) . typelist: (test (‘,’ test)* [’,’ . [’*’ [test] (‘,’ test)* [’,’ ‘**’ test] | ’**’ test]] | . ’*’ [test] (‘,’ test)* [’,’ ‘**’ test] | ’**’ test) | . ## A2 JSON LANGUAGE GRAMMER SPECIFICATIONS . { .     ”links”: { .       ”self”: ”http://example.com/articles”, .       ”next”: ”http://example.com/articles?page[offset]=2”, .       ”last”: ”http://example.com/articles?page[offset]=10” .     }, .     ”data”: [{ .       ”type”: ”articles”, .       ”id”: ”1”, .       ”attributes”: { .         ”title”: ”JSON:API paints my bikeshed!” .       }, .       ”relationships”: { .         ”author”: { .           ”links”: { .             ”self”: ”http://example.com/articles/1/relationships/author”, .             ”related”: ”http://example.com/articles/1/author” .           }, .           ”data”: { ”type”: ”people”, ”id”: ”9” } .         }, .         ”comments”: { .           ”links”: { .             ”self”: ”http://example.com/articles/1/relationships/comments”, .             ”related”: ”http://example.com/articles/1/comments” .           }, .           ”data”: [ .             { ”type”: ”comments”, ”id”: ”5” }, .             { ”type”: ”comments”, ”id”: ”12” } .           ] .         } .       }, .       ”links”: { .         ”self”: ”http://example.com/articles/1” .       } .     }], .     ”included”: [{ .       ”type”: ”people”, .       ”id”: ”9”, .       ”attributes”: { .         ”firstName”: ”Dan”, .         ”lastName”: ”Gebhardt”, .         ”twitter”: ”dgeb” .       }, .       ”links”: { .         ”self”: ”http://example.com/people/9” .       } .     }, { .       ”type”: ”comments”, .       ”id”: ”5”, .       ”attributes”: { .         ”body”: ”First!” .       }, .       ”relationships”: { .         ”author”: { .           ”data”: { ”type”: ”people”, ”id”: ”2” } .         } .       }, .       ”links”: { .         ”self”: ”http://example.com/comments/5” .       } .     }, { .       ”type”: ”comments”, .       ”id”: ”12”, .       ”attributes”: { .         ”body”: ”I like XML better” .       }, .       ”relationships”: { .         ”author”: { .           ”data”: { ”type”: ”people”, ”id”: ”9” } .         } .       }, .       ”links”: { .         ”self”: ”http://example.com/comments/12” .       } .     }] .   } . Appendix B . Sample source code and output listing . B1 COMMANDS CODE FOR THE BOT AND REPLIES . { .     ”start”: [ .         ”Greetings {}!”, .         ””, .         ”You just found @Coronaviruskenyabot  uD83E uDDA0. This bot gives you up-to-date information on Kenya and worldwide spread of the Covid-19 disease.”, .         ””, .         ”To get a quick overview of the current status, try /today ,/kenya or /world.”, .         ”You can view detailed statistics of your country by using the /list command.”, .         ”Subscribe to daily updates with /subscribe for automatic notifications.”, .         ”*MAKE SURE TO USE THE /setcountry COMMAND TO SET YOUR COUNNTRY FOLLOWED BY /subscribe TO GET DAILY NOTIFICATIONS*”, .         ””, .         ”*To get the FAQs about corona virus disease* use /faqs”, .         ””, .         ”*You have no idea what COVID-19 is or having doubts* use /faqs”, .         ””, .         ”For more, see /help.” .     ], .     ”donate”:[ .         ” uD83E uDDA0 @Coronaviruskenyabot  *Donate*  *#STAYSAFE*”, .         ”Donate to this project for  more exclusive platforms such as WhatsApp. n”, .         ”*If you’d like to donate do it* [HERE](https://mikeowino.com/donation)” .     ], .     ”help”: [ .         ” uD83E uDDA0 @Coronaviruskenyabot Help *#STAYSAFE*”, .         ””, .         ”This bot gives you up-to-date information on the worldwide spread of the COVID-19 disease.”, .         ””, .         ”*/world*   u2022  Worldwide case statistics.”, .         ”*/today*   u2022  Summary of today’s cases.”, .         ”*/list*   u2022  List of countries ordered by number of cases.”, .         ”*/subscribe*   u2022  Subscribe to daily status updates with new case statistics.”, .         ”*/help*   u2022  Show this help.”, .         ””, .         ”You can use this bot in any chat or group without adding it by typing `@Coronaviruskenyabot [country]`.”, .         ””, .         ”—”, .         ” u2139 uFE0F For issues and feedback, [Contact Me](https://t.me/decipha). n”, .         ”Sources: [WORLDOMETERS](https://www.worldometers.info/coronavirus/country/kenya/), [WHO](https://covid19.who.int), [MOH](https://twitter.com/MOH_Kenya). n”, .         ”Data is accessed via [NovelCOVID API](https://github.com/NovelCOVID/API).” .     ], .     ”faqs”: [ .         ” uD83E uDDA0 @Coronaviruskenyabot FAQs *#STAYSAFE*”, .         ””, .         ”*From the Government*”, .         ””, .         ”*IF YOU FEEL UNWELL, HAVE A COLD, A COUGH OR FEVER, PLEASE CALL* 719 *OR TEXT* 719”, .         ””, .         ”*What is a Coronavirus ?*”, .         ”Coronaviruses are a large family of viruses that are known to cause illness ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS) and Severe Acute Respiratory Syndrome (SARS).”, .         ””, .         ”*What is novel coronavirus ?*”, .         ”A novel coronavirus (CoV) is a new strain of coronavirus that has not been previously identified in humans.”, .         ””, .         ”*Can humans get infected from novel coronavirus from animal source ?*”, .         ”Coronaviruses are a large family of viruses that are common in animals. Occasionally, people get infected with these viruses which may then spread to other people.Possible animal sources of COVID-19 have not yet been confirmed.”, .         ”To protect yourself, such as when visiting live animal markets, avoid direct contact with animals and surfaces in contact with animals. Ensure good food safety practices at all times. Handle raw meat, milk or animal organs with care to avoid contamination of uncooked foods and avoid consuming raw or undercooked animal products.”, .         ””, .         ”*What are the symptoms of COVID-19 ?*”, .         ”common signs include respiratory *symptoms, fever, cough, shortness of breath, and breathing difficulties.* In more severe cases, infection can cause *pneumonia, severe acute respiratory syndrome, kidney failure and even death.*”, .         ””, .         ”*Can the virus that causes COVID-19 be transmitted through the air ?*”, .         ”Studies to date suggest that the virus that causes COVID-19 is mainly transmitted through contact with respiratory droplets rather than through the air”, .         ””, .         ”*Is there a vaccine for novel coronavirus ?*”, .         ”Not yet. To date, there is no vaccine and no specific antiviral medicine to prevent or treat COVID-2019. However, those affected should receive care to relieve symptoms. People with serious illness should be hospitalized. Most patients recover thanks to supportive care.” .      .     ], .     ”today”: [ .         ” uD83D uDCDD Status on {:%Y-%m-%d} at {:%H:%m} UTC *#STAYSAFE*”, .         ””, .         ” uD83C uDF10 Worldwide, `{:,}` COVID-19 infections have been reported. `{:,}` infected people died.”, .         ” uD83E uDDA0 Today, there have been `{:,}` new cases.”, .         ” u26B0 uFE0F The number of deaths since 0:00 UTC is `{:,}`.”, .         ”More: /world”, .         ”” .     ], .     ”today_country”: [ .         ”{} In {}, `{:,}` infections have been reported. `{:,}` infected people died.”, .         ” uD83E uDDA0 Today, there have been `{:,}` new cases.”, .         ” u26B0 uFE0F The number of deaths since 0:00 UTC is `{:,}`.”, .         ”More: /{}”, .         ”” .     ], .     ”today_footer”: ”/list   u2022  /setcountry   u2022  /help”, .     ”stats_table”: [ .         ”COVID-19 Statistics for *{}* {}”, .         ””, .         ” uD83E uDDA0  `{:,}`  estimated cases”, .         ” uD83C uDF21  `{:,}`  active (`{:.1%}`)”, .         ” uD83D uDD06  `{:,}`  recovered (`{:.1%}`)”, .         ” u26B0 uFE0F  `{:,}`  deaths (`{:.1%}`)”, .         ””, .         ”_Today_  uD83D uDCC6”, .         ” uD83E uDDA0  `+ {:,}`  new cases”, .         ” u26B0 uFE0F  `+ {:,}`  deaths”, .         ”” .     ], .     ”stats_table_more”: [ .         ” uD83D uDC65  `{:,}`  cases per million people”, .         ” uD83D uDC65  `{:,}` deaths per million people”, .         ”” .     ], .     ”stats_table_simple”: [ .         ”COVID-19 Statistics for *{}* {}”, .         ””, .         ” uD83E uDDA0  `{:,}`  estimated cases”, .         ” u26B0 uFE0F  `{:,}`  deaths (`{:.1%}`)”, .         ”” .     ], .     ”stats_updated”: ”_Updated: {:%Y-%m-%d %H:%m} UTC_”, .     ”stats_more”: ”More”, .     ”stats_less”: ”Less”, .     ”more”: ”More: @Coronaviruskenyabot”, .     ”page_left”: ” u25C0 uFE0F Page {}”, .     ”page_right”: ”Page {}  u25B6 uFE0F”, .     ”to_start”: ” u23EA To Start”, .     ”to_end”: ”To End  u23E9”, .     ”list_header”: ” uD83D uDCCA Countries by *{}* n”, .     ”no_data”: ”Sorry, no data available! Try again later.”, .     ”unknown_place”: ”Please use the available commands to get a reply.”, .     ”no_country_set”: ”IFf you have not configured your country. Use /setcountry to configure it.”, .     ”setcountry_start”: [ .         ”To set your country, send your country name.”, .         ”Send /cancel to cancel.” .     ], .     ”cancel”: ”Cancelled.”, .     ”setcountry_success”: ”Successfully set your country to *{}*.”, .     ”subscribe”: [ .         ”You have subscribed to daily case updates.”, .         ”To unsubscribe, send /unsubscribe.” .     ], .     ”unsubscribe”: [ .         ”You have unsubscribed from daily updates.”, .         ”To re-subscribe, send /subscribe.” .     ], .     ”sort_order”: ”Sort order  uD83D uDCCA”, .     ”back”: ” u25C0 uFE0F Back”, .     ”sort_order_cases”: ” uD83E uDDA0 total”, .     ”sort_order_casesPerOneMillion”: ” uD83E uDDA0 / million”, .     ”sort_order_todayCases”: ” uD83E uDDA0 today”, .     ”sort_order_deaths”: ” u26B0 uFE0F total”, .     ”sort_order_deathsPerOneMillion”: ” u26B0 uFE0F / million”, .     ”sort_order_todayDeaths”: ” u26B0 uFE0F today” . } . B2 CODE FOR ACCESSING THE COVID-19 API SERVERS . import requests . BASE_URL=”https://corona.lmao.ninja/v2/” . class CovidApi: .     ”&quot;”A simple wrapper for the NovelCOVID API (https://github.com/NovelCOVID/API). .     ””” .     def __init__(self): .         self.countries = self._all_countries() .         self.name_map = self._build_name_map(self.countries) .         self.us_states = self._all_us_states() .         self.de_states = self._all_de_states() .     def _clean(self, s): .         s = s.replace(‘ xad’, ’’) .         s = s.replace(‘ n’, ’’) .         return s .     def _build_name_map(self, countries): .         name_map = {} .         for iso2, country in countries.items(): .             name_map[country[‘iso2’].lower()] = iso2 .             name_map[country[‘iso3’].lower()] = iso2 .             name_map[country[‘name’].lower()] = iso2 .         return name_map .     def _all_countries(self): .         response = requests.get(BASE_URL+”countries”) .         if response.status_code == 200: .             countries = {} .             for item in response.json(): .                 iso2 = item[‘countryInfo’][‘iso2’] .                 if iso2: .                     countries[iso2] = item[‘countryInfo’] .                     countries[iso2][‘name’] = item[‘country’] .             return countries .         else: .             return {} .     def _all_us_states(self): .         response = requests.get(BASE_URL+”states”) .         if response.status_code == 200: .             countries = [] .             for item in response.json(): .                 countries.append(item[‘state’]) .             return countries .         else: .             return [] .     def _all_de_states(self): .         response = requests.get(BASE_URL+”gov/de”) .         if response.status_code == 200: .             countries = [] .             for item in response.json(): .                 if item[‘province’].lower() != ’total’: .                     countries.append(self._clean(item[‘province’])) .             return countries .         else: .             return [] .     def cases_world(self): .         response = requests.get(BASE_URL+”all”) .         if response.status_code == 200: .             return response.json() .         else: .             return None .     def cases_country_list(self, sort_by=”cases”): .         response = requests.get(BASE_URL+”countries”, params={‘sort’: sort_by}) .         if response.status_code == 200: .             return [item for item in response.json() if item[‘countryInfo’][‘iso2’]] .         else: .             return [] .     def cases_country(self, country): .         country_code = self.name_map[country.lower()] .         response = requests.get(BASE_URL+”countries/{}”.format(country_code)) .         if response.status_code == 200: .             data = response.json() .             del data[‘countryInfo’] .             return data .         else: .             return None .     def cases_us_state(self, state): .         response = requests.get(BASE_URL+”states/{}”.format(state)) .         if response.status_code == 200: .             data = response.json() .             # additions to unify format with countries .             data[‘recovered’] = data[‘cases’] - data[‘active’] - data[‘deaths’] .             return data .         else: .             return None .     def cases_de_state(self, state): .         response = requests.get(BASE_URL+”gov/de”) .         if response.status_code == 200: .             data = response.json() .             filtered = [item for item in data if self._clean(item[‘province’].lower()) == state.lower()] .             return filtered[0] if len(filtered) &gt; 0 else None .         else: .             return None . B3 MAIN SOURCE CODE OF THE BOT INCLUDING ACCESS TO THE BOT API TOKEN AND NOTIFY TIME FOR SENDING THE DAILY NOTIFICATIONS . #!/usr/bin/env python3 . from datetime import datetime . import json . import logging . import re . import requests . from time import sleep . from telegram import ParseMode . from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent . from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, InlineQueryHandler . from telegram.ext import PicklePersistence, ConversationHandler, DispatcherHandlerStop . from telegram.error import TelegramError . from statistics_api import CovidApi . import wikidata . from resources.resolver import resolve . from utils import * . CONFIG_FILE=”config.json” . logging.basicConfig(format=’%(asctime)s - %(name)s - %(levelname)s - %(message)s’, .                     level=logging.INFO) . logger = logging.getLogger(__name__) . WORLD_IDENT=”world” . api = CovidApi() . # command /start . def command_start(update, context): .     update.message.reply_markdown(resolve(‘start’, lang(update), update.message.from_user.first_name)) . #command /faqs . def command_faqs(update, context): .     update.message.reply_markdown(resolve(‘faqs’, lang(update)), disadle_web_page_preview=True) . #command /donate . def command_donate(update, context): .     update.message.reply_markdown(resolve(‘donate’, lang(update)), disable_web_page_preview=True) . # command /help . @handler_decorator . def command_help(update, context): .     update.message.reply_markdown(resolve(‘help’, lang(update)), disable_web_page_preview=True) . ### World &amp; country stats + status report ### . def format_stats(update, code, data, icon=None, detailed=False): .     if code in api.countries: .         name = api.countries[code][‘name’] .     elif code == WORLD_IDENT: .         name = ”the World” .         icon = ’ U0001f310’ .     else: .         name = code .     if not icon: .         icon = flag(code) .     p_dead = data[‘deaths’] / data[‘cases’] .     if ’active’ in data and ’todayCases’ in data: # we have detailed data, so use more detailed view .         p_active = data[‘active’] / data[‘cases’] .         p_recov = data[‘recovered’] / data[‘cases’] .         text = resolve(‘stats_table’, lang(update), name, icon, data[‘cases’], .                 data[‘active’], p_active, data[‘recovered’], p_recov, data[‘deaths’], p_dead, .                 data[‘todayCases’], data[‘todayDeaths’]) .         if detailed: .             text += ’ n’+resolve(‘stats_table_more’, lang(update), data[‘casesPerOneMillion’] or 0, .                             data[‘deathsPerOneMillion’] or 0) .     else: # we only have limited data .         text = resolve(‘stats_table_simple’, lang(update), name, icon, data[‘cases’], data[‘deaths’], p_dead) .     text += ’ n’+resolve(‘stats_updated’, lang(update), datetime.utcfromtimestamp(data[‘updated’] / 1e3)) .     return text . def get_stats_keyboard(update, country_code, is_detailed=False): .     keyboard = [[]] .     caption_key = ’stats_more’ if not is_detailed else ’stats_less’ .     caption = resolve(caption_key, lang(update)) .     keyboard[0].append(InlineKeyboardButton(caption, .                     callback_data=”stats {} {}”.format(country_code, 1 if is_detailed else 0))) .     return InlineKeyboardMarkup(keyboard) . # the text used for daily notifications and /today . def get_status_report(country_code=None, lang=”en”): .     data = api.cases_world() .     if data: .         dt = datetime.utcfromtimestamp(data[‘updated’] / 1e3) .         text = resolve(‘today’, lang, .                 dt, dt, data[‘cases’], data[‘deaths’], data[‘todayCases’], data[‘todayDeaths’]) .         # fetch data of home country if set .         if country_code: .             country_data = api.cases_country(country_code) .             text += ’ n’+resolve(‘today_country’, lang, flag(country_code), .                             api.countries[country_code][‘name’], country_data[‘cases’], country_data[‘deaths’], .                             country_data[‘todayCases’], country_data[‘todayDeaths’], country_code.lower()) .         else: .             text += ’ n_‘+resolve(‘no_country_set’, lang)+’_ n’ .         text += ’ n’+resolve(‘today_footer’, lang) .     else: .         text = resolve(‘no_data’,lang) .     return text . # command /today . @handler_decorator . def command_today(update, context): .     if ’country’ in context.chat_data: .         country_code = context.chat_data[‘country’] .     else: .         country_code = None .     text = get_status_report(country_code, lang(update)) .     update.message.reply_markdown(text) . def format_list_item(data, order): .     code = data[‘countryInfo’][‘iso2’].lower() .     icon = resolve(‘sort_order_‘+order, None).split(‘ ’)[0] .     number = data[order] .     text = ””” . {} *{}  -  {}*  -  {} `{:,}` .     ””“.format(flag(code), data[‘country’], ’/’+code, icon, number) .     return text . def get_list_keyboard(update, current_index, limit, last=False): .     keyboard = [[]] .     if current_index &gt; 0: .         keyboard[0].append(InlineKeyboardButton(resolve(‘page_left’, lang(update), current_index), .                                 callback_data=”list {} {}”.format(current_index-1, limit))) .     if not last: .         keyboard[0].append(InlineKeyboardButton(resolve(‘page_right’, lang(update), current_index+2), .                                 callback_data=”list {} {}”.format(current_index+1, limit))) .     if current_index &gt; 0: .         keyboard.append([ .             InlineKeyboardButton(resolve(‘to_start’, lang(update)), callback_data=”list 0 {}”.format(limit))]) .     else: .         keyboard.append([ .             InlineKeyboardButton(resolve(‘to_end’, lang(update)), callback_data=”list -1 {}”.format(limit))]) .     keyboard.append([ .         InlineKeyboardButton(resolve(‘sort_order’, lang(update)), .                 callback_data=”list_order_menu 1 ({} {} {})”.format(current_index, limit, int(last))) .     ]) .     return InlineKeyboardMarkup(keyboard) . SORT_ORDERS = [‘cases’, ’deaths’, ’casesPerOneMillion’, ’deathsPerOneMillion’, ’todayCases’, ’todayDeaths’] . def get_list_order_keyboard(update, current_index, limit, last=False): .     keyboard = [] .     for i, sort_order in enumerate(SORT_ORDERS): .         button = InlineKeyboardButton(resolve(“sort_order_“+sort_order, lang(update)), callback_data=”list_order {} {}”.format(sort_order, limit)) .         if i % 2 == 0: .             l = [button] .         else: .             l.append(button) .             keyboard.append(l) .     keyboard.append([InlineKeyboardButton(resolve(‘back’, lang(update)), .                 callback_data=”list_order_menu 0 ({} {} {})”.format(current_index, limit, int(last)))]) .     return InlineKeyboardMarkup(keyboard) . # command /world . @handler_decorator . def command_world(update, context): .     photo_file = wikidata.cases_world_map() .     data = api.cases_world() .     if data: .         text = format_stats(update, WORLD_IDENT, data) .         update.message.reply_photo(photo=photo_file, caption=text, parse_mode=ParseMode.MARKDOWN, .                                    reply_markup=get_stats_keyboard(update, WORLD_IDENT)) .     else: .         update.message.reply_text(resolve(‘no_data’, lang(update))) . # command /[country] . @handler_decorator . def command_country(update, context, country_code): .     photo_file = wikidata.cases_country_map(country_code) .     data = api.cases_country(country_code) .     if data: .         text = format_stats(update, country_code, data) .         if photo_file: .             update.message.reply_photo(photo=photo_file, caption=text, parse_mode=ParseMode.MARKDOWN, .                                        reply_markup=get_stats_keyboard(update, country_code)) .         else: .             update.message.reply_markdown(text, reply_markup=get_stats_keyboard(update, country_code)) .     else: .         update.message.reply_text(resolve(‘no_data’, lang(update))) . def command_us_state(update, context, state): .     data = api.cases_us_state(state) .     if data: .         text = format_stats(update, state.title(), data, icon=’ uD83C uDDFA uD83C uDDF8’) .         update.message.reply_markdown(text) .     else: .         update.message.reply_text(resolve(‘no_data’, lang(update))) . def command_de_state(update, context, state): .     data = api.cases_de_state(state) .     if data: .         text = format_stats(update, state.title(), data, icon=’ uD83C uDDE9 uD83C uDDEA’) .         update.message.reply_markdown(text) .     else: .         update.message.reply_text(resolve(‘no_data’, lang(update))) . def callback_stats(update, context): .     query = update.callback_query .     country_code = context.match.group(1) .     # True if we want to *show* detailed mode, False otherwise .     is_detailed = not bool(int(context.match.group(2))) .     if country_code == WORLD_IDENT: .         data = api.cases_world() .     else: .         data = api.cases_country(country_code) .     if data: .         text = format_stats(update, country_code, data, detailed=is_detailed) .         if query.message.caption: .             query.edit_message_caption(caption=text, parse_mode=ParseMode.MARKDOWN, .                                        reply_markup=get_stats_keyboard(update, country_code, is_detailed)) .         else: .             query.edit_message_text(text=text, parse_mode=ParseMode.MARKDOWN, .                                     reply_markup=get_stats_keyboard(update, country_code, is_detailed)) . ### Country list ### . # command /list . @handler_decorator . def command_list(update, context): .     # set or retrieve sort order .     if len(context.args) &gt; 0: .         order = context.args[0] .         context.chat_data[‘order’] = order .     elif ’order’ in context.chat_data: .         order = context.chat_data[‘order’] .     else: .         # use first possible order as default .         order = SORT_ORDERS[0] .         context.chat_data[‘order’] = order .     # by default, return 7 items. min 2 and max 20. .     limit = int(context.args[1]) if len(context.args) &gt; 1 else 7 .     limit = min(max(2, limit), 20) .     case_list = api.cases_country_list(sort_by=order)[:limit] .     if len(case_list) &gt; 0: .         text = resolve(‘list_header’, lang(update), resolve(“sort_order_“+order, lang(update))) .         for item in case_list: .             text += format_list_item(item, order) .         update.message.reply_markdown(text, reply_markup=get_list_keyboard(update, 0, limit)) .     else: .         update.message.reply_text(resolve(‘no_data’, lang(update))) . def callback_list_pages(update, context): .     query = update.callback_query .     order = context.chat_data.get(‘order’, SORT_ORDERS[0]) # for backward comp .     page, limit = int(context.match.group(1)), int(context.match.group(2)) .     case_list = api.cases_country_list(sort_by=order) .     if page &gt;= 0: .         case_list = case_list[page*limit:(page+1)*limit] .     else: .         # if the given page number is negative, we want to access the last page .         page = len(case_list) // limit .         offset = len(case_list) % limit .         case_list = case_list[-offset:] .     query.answer() .     if len(case_list) &gt; 0: .         text = resolve(‘list_header’, lang(update), resolve(“sort_order_“+order, lang(update))) .         for item in case_list: .             text += format_list_item(item, order) .         query.edit_message_text(text=text, parse_mode=ParseMode.MARKDOWN, .                                 reply_markup=get_list_keyboard(update, page, limit, len(case_list) &lt; limit)) .     else: .         query.edit_message_text(resolve(‘no_data’, lang(update)), .                                 reply_markup=get_list_keyboard(update, page, limit, len(case_list) &lt; limit)) . def callback_list_order_menu(update, context): .     query = update.callback_query .     on = int(context.match.group(1)) .     payload = [int(g) for g in context.match.group(2).split(“ ”)] .     query.answer() .     if on: .         query.edit_message_reply_markup(reply_markup=get_list_order_keyboard(update, *payload)) .     else: .         query.edit_message_reply_markup(reply_markup=get_list_keyboard(update, *payload)) . def callback_list_order(update, context): .     query = update.callback_query .     order = context.match.group(1) .     # save the selected order .     context.chat_data[‘order’] = order .     limit = int(context.match.group(2)) .     case_list = api.cases_country_list(sort_by=order)[:limit] .     query.answer() .     if len(case_list) &gt; 0: .         text = resolve(‘list_header’, lang(update), resolve(“sort_order_“+order, lang(update))) .         for item in case_list: .             text += format_list_item(item, order) .         query.edit_message_text(text=text, parse_mode=ParseMode.MARKDOWN, .                                 reply_markup=get_list_keyboard(update, 0, limit, len(case_list) &lt; limit)) .     else: .         query.edit_message_text(resolve(‘no_data’, lang(update)), .                                 reply_markup=get_list_keyboard(update, 0, limit, len(case_list) &lt; limit)) . ### Free text &amp; inline ### . # free text input . @handler_decorator . def handle_text(update, context): .     query_string = update.message.text.lower() .     if query_string in api.name_map: .         command_country(update, context, api.name_map[query_string]) .     elif WORLD_IDENT in query_string: .         command_world(update, context) .     elif check_flag(query_string): .         code = code_from_flag(query_string).lower() .         if code in api.name_map: .             command_country(update, context, api.name_map[code]) .     elif query_string.title() in api.us_states: .         command_us_state(update, context, query_string) .     elif query_string.title() in api.de_states: .         command_de_state(update, context, query_string) .     else: .         update.message.reply_text(resolve(‘unknown_place’, lang(update))) . # inline queries . def handle_inlinequery(update, context): .     inline_query = update.inline_query .     query_string = inline_query.query.lower() .     if not query_string: .         return .     results = [] .     # a special case matching ’world’ .     if WORLD_IDENT.startswith(query_string): .         results.append((WORLD_IDENT, WORLD_IDENT)) .     for name in api.name_map.keys(): .         if name.startswith(query_string): .             results.append((name, ”country”)) .         # limit to the first threee results .         if len(results) &gt;= 3: .             break .     if len(results) &lt; 3: .         for state in api.us_states: .             if state.lower().startswith(query_string): .                 results.append((state.lower(), ”us_state”)) .             if len(results) &gt;= 3: .                 break .     if len(results) &lt; 3: .         for state in api.de_states: .             if state.lower().startswith(query_string): .                 results.append((state.lower(), ”de_state”)) .             if len(results) &gt;= 3: .                 break .     query_results = [] .     for i,(s, t) in enumerate(results): .         if t == WORLD_IDENT: .             data = api.cases_world() .             text = format_stats(update, WORLD_IDENT, data, detailed=True) .         elif t == ”us_state”: .             data = api.cases_us_state(s) .             text = format_stats(update, s.title(), data, icon=’ uD83C uDDFA uD83C uDDF8’) .         elif t == ”de_state”: .             data = api.cases_de_state(s) .             text = format_stats(update, s.title(), data, icon=’ uD83C uDDE9 uD83C uDDEA’) .         else: .             country_code = api.name_map[s] .             data = api.cases_country(country_code) .             text = format_stats(update, country_code, data, detailed=True) .         text+=’ n’+resolve(‘more’, lang(update)) .         result_content = InputTextMessageContent(text, parse_mode=ParseMode.MARKDOWN) .         query_results.append( .             InlineQueryResultArticle(id=i, title=s, input_message_content=result_content) .         ) .     inline_query.answer(query_results) . ### Set country ### . # command /setcountry . @handler_decorator . def handle_setcountry_start(update, context): .     update.message.reply_markdown(resolve(‘setcountry_start’, lang(update))) .     return 1 . def handle_setcountry_input(update, context): .     query_string = update.message.text.lower() .     if query_string in api.name_map: .         code = api.name_map[query_string] .         context.chat_data[‘country’] = code .         update.message.reply_markdown( .                 resolve(‘setcountry_success’, lang(update), api.countries[code][‘name’])) .         return ConversationHandler.END .     else: .         update.message.reply_text(resolve(‘unknown_place’, lang(update))) . def handle_setcountry_cancel(update, context): .     update.message.reply_text(resolve(‘cancel’, lang(update))) .     return ConversationHandler.END . ### Notification subscription ### . @handler_decorator . def command_subscribe(update, context): .     if not ’subscribers’ in context.bot_data: .         context.bot_data[‘subscribers’] = [update.message.chat.id] .     elif not update.message.chat.id in context.bot_data[‘subscribers’]: .         context.bot_data[‘subscribers’].append(update.message.chat.id) .     update.message.reply_markdown(resolve(‘subscribe’, lang(update))) . @handler_decorator . def command_unsubscribe(update, context): .     if ’subscribers’ in context.bot_data: .         if update.message.chat.id in context.bot_data[‘subscribers’]: .             context.bot_data[‘subscribers’].remove(update.message.chat.id) .     update.message.reply_markdown(resolve(‘unsubscribe’, lang(update))) . # runs the status notification job once per day . def run_notify(context): .     if not ’subscribers’ in context.bot_data: .         logger.warn(“No subscribers list specified.”) .         return .     count = 0 .     for chat_id in context.bot_data[‘subscribers’]: .         try: .             country_code = context.dispatcher.chat_data[chat_id].get(‘country’, None) .             text = get_status_report(country_code=country_code) # TODO always English .             context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.MARKDOWN) .             count+=1 .             sleep(0.05) # try to avoid flood limits .         except Exception as ex: .             # remove user from subscribers if he blocked or kicked the bot .             if isinstance(ex, TelegramError) and ex.message.startswith(“Forbidden: ”): .                 context.bot_data[‘subscribers’].remove(chat_id) .             logger.error(“Failed to send daily notification to {}”.format(chat_id), exc_info=True) .     logger.info(“Successfully sent daily notification to {} users.”.format(count)) . def error(update, context): .     try: .         raise context.error .     except TelegramError: .         logger.warning(‘Update {} caused error ”{}”‘.format(update, context.error)) . def main(config): .     persistence = PicklePersistence(“database.pkl”) .     updater = Updater(config[‘token’], persistence=persistence, use_context=True) .     # add commands .     dp = updater.dispatcher .     dp.add_handler(CommandHandler(“start”, command_start)) .     dp.add_handler(CommandHandler(“help”, command_help)) .     dp.add_handler(CommandHandler(“faqs”, command_faqs)) .     dp.add_handler(CommandHandler(“donate”, command_donate)) .     dp.add_handler(CommandHandler(“today”, command_today)) .     dp.add_handler(CommandHandler(“world”, command_world)) .     dp.add_handler(CommandHandler(“list”, command_list)) .     # callbacks for page buttons in list .     dp.add_handler(CallbackQueryHandler(callback_list_pages, pattern=r”list (-? d+) ( d+)”)) .     dp.add_handler(CallbackQueryHandler(callback_list_order_menu, pattern=r”list_order_menu ( d+)  (([ d s]+) )”)) .     dp.add_handler(CallbackQueryHandler(callback_list_order, pattern=r”list_order ( w+) ( d+)”)) .     # for every country, add a command for the iso2 and iso3 codes and the name .     for iso, country in api.countries.items(): .         callback = lambda update, context, code=iso: command_country(update, context, code) .         dp.add_handler(CommandHandler(iso, callback)) .         if country[‘iso3’]: .             dp.add_handler(CommandHandler(country[‘iso3’], callback)) .         name_normal = re.sub(r”[^a-z]”, ”_”, country[‘name’].lower()) .         dp.add_handler(CommandHandler(name_normal, callback)) .     # country detailed button callback .     dp.add_handler(CallbackQueryHandler(callback_stats, pattern=r”stats ( w+) ( d)”)) .     # set country (this has to be added before the free text handler) .     dp.add_handler(ConversationHandler( .         entry_points=[CommandHandler(“setcountry”, handle_setcountry_start)], .         states={ .             1: [MessageHandler(Filters.text &amp; ~Filters.command, handle_setcountry_input)] .         }, .         fallbacks=[CommandHandler(“cancel”, handle_setcountry_cancel)], .         conversation_timeout=60*10 # = 10 minutes .     )) .     # subscription .     dp.add_handler(CommandHandler(“subscribe”, command_subscribe)) .     dp.add_handler(CommandHandler(“unsubscribe”, command_unsubscribe)) .     # subscription job .     job_queue = updater.job_queue .     if ’notify_time’ in config: .         job_queue.run_daily(run_notify, datetime.strptime(config[‘notify_time’], ’%H:%M’).time()) .     # free text input .     dp.add_handler(MessageHandler(Filters.text &amp; ~Filters.command, handle_text)) .     dp.add_handler(InlineQueryHandler(handle_inlinequery)) .     dp.add_error_handler(error) .     # start the bot .     updater.start_polling() .     updater.idle() . if __name__ == ”__main__”: .     with open(CONFIG_FILE, ’r’) as f: .         config = json.load(f) .     main(config) . B4 JSON CODE CONTAINING BOT TOKEN AND TIMER . { .     ”token”: ”1098397543:pJm4JTpTTI_l7o5IasqeCj7qw”, .     ”notify_time”: ”17:00” . } .",
            "url": "https://mikeowino.com/blog/2020/07/30/MIKE-OWINO-DOCUMENTATION.html",
            "relUrl": "/2020/07/30/MIKE-OWINO-DOCUMENTATION.html",
            "date": " • Jul 30, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides has for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Feautures . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "https://mikeowino.com/blog/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mikeowino.com/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "Microsoft Word Example Post",
            "content": "When writing a blog post with Microsoft Word – the filename becomes the title. In this case the file name is “2020-01-01-Microsoft-Word-Example-Post.docx”. . There is minimal support for Word documents in fastpages compared to Jupyter notebooks. Some known limitations: . alt text in Word documents are not yet supported by fastpages, and will break links to images. . | You can only specify front matter for Word documents globally. See the README for more details. . | . For greater control over the content produced from Word documents, you will need to convert Word to markdown files manually. You can follow the steps in this blog post, which walk you through how to use pandoc to do the conversion. Note: If you wish to customize your Word generated blog post in markdown, make sure you delete your Word document from the _word directory so your markdown file doesn’t get overwritten! . If your primary method of writing blog posts is Word documents, and you plan on always manually editing Word generated markdown files, you are probably better off using fast_template instead of fastpages. . The material below is a reproduction of this blog post, and serves as an illustrative example. . Maintaining a healthy open source project can entail a huge amount of toil. Popular projects often have orders of magnitude more users and episodic contributors opening issues and PRs than core maintainers capable of handling these issues. . Consider this graphic prepared by the NumFOCUS foundation showing the number of maintainers for three widely used scientific computing projects: . . We can see that across these three projects, there is a very low ratio maintainers to users. Fixing this problem is not an easy task and likely requires innovative solutions to address the economics as well as tools. . Due to its recent momentum and popularity, Kubeflow suffers from a similar fate as illustrated by the growth of new issues opened: . . Source: “TensorFlow World 2019, Automating Your Developer Workflow With ML” . Coincidentally, while building out end to end machine learning examples for Kubeflow, we built two examples using publicly available GitHub data: GitHub Issue Summarization and Code Search. While these tutorials were useful for demonstrating components of Kubeflow, we realized that we could take this a step further and build concrete data products that reduce toil for maintainers. . This is why we started the project kubeflow/code-intelligence, with the goals of increasing project velocity and health using data driven tools. Below are two projects we are currently experimenting with : . Issue Label Bot: This is a bot that automatically labels GitHub issues using Machine Learning. This bot is a GitHub App that was originally built for Kubeflow but is now also used by several large open source projects. The current version of this bot only applies a very limited set of labels, however we are currently A/B testing new models that allow personalized labels. Here is a blog post discussing this project in more detail. . | Issue Triage GitHub Action: to compliment the Issue Label Bot, we created a GitHub Action that automatically adds / removes Issues to the Kubeflow project board tracking issues needing triage. . | Together these projects allow us to reduce the toil of triaging issues. The GitHub Action makes it much easier for the Kubeflow maintainers to track issues needing triage. With the label bot we have taken the first steps in using ML to replace human intervention. We plan on using features extracted by ML to automate more steps in the triage process to further reduce toil. . Building Solutions with GitHub Actions . One of the premises of Kubeflow is that a barrier to building data driven, ML powered solutions is getting models into production and integrated into a solution. In the case of building models to improve OSS project health, that often means integrating with GitHub where the project is hosted. . We are really excited by GitHub’s newly released feature GitHub Actions because we think it will make integrating ML with GitHub much easier. . For simple scripts, like the issue triage script, GitHub actions make it easy to automate executing the script in response to GitHub events without having to build and host a GitHub app. . To automate adding/removing issues needing triage to a Kanban board we wrote a simple python script that interfaces with GitHub’s GraphQL API to modify issues. . As we continue to iterate on ML Models to further reduce toil, GitHub Actions will make it easy to leverage Kubeflow to put our models into production faster. A number of prebuilt GitHub Actions make it easy to create Kubernetes resources in response to GitHub events. For example, we have created GitHub Actions to launch Argo Workflows. This means once we have a Kubernetes job or workflow to perform inference we can easily integrate the model with GitHub and have the full power of Kubeflow and Kubernetes (eg. GPUs). We expect this will allow us to iterate much faster compared to building and maintaining GitHub Apps. . Call To Action . We have a lot more work to do in order to achieve our goal of reducing the amount of toil involved in maintaining OSS projects. If your interested in helping out here’s a couple of issues to get started: . Help us create reports that pull and visualize key performance indicators (KPI). https://github.com/kubeflow/code-intelligence/issues/71 . We have defined our KPI here: issue #19 | . | Combine repo specific and non-repo specific label predictions: https://github.com/kubeflow/code-intelligence/issues/70 . | . In addition to the aforementioned issues we welcome contributions for these other issues in our repo. .",
            "url": "https://mikeowino.com/blog/2020/01/01/Microsoft-Word-Example-Post.html",
            "relUrl": "/2020/01/01/Microsoft-Word-Example-Post.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mikeowino.com/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mikeowino.com/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}