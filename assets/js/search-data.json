{
  
    
        "post0": {
            "title": "   Project Management Plan",
            "content": "SE 4351.001 Software Requirements . Fall 2014 . Project Management Plan . . http://www.utdallas.edu/~axp120531/SE4352/ . Team Members . Joe Brown . jsb100120 . | Desmond Lee . dcl102020 . | Giuseppe Mastrolorenzo . mxg106320 . | Michael Raibick . mxr110530 . | . Ryan Chen . rxc109520 . | Robert Lockwood . rll092020 . | Blessing Osakue . boo102020 . | Oscar Reyes . oxr110330 . | . Travis Chun . twc101020 . | Michael Mugger . mxm121531 . | Andrew Pohlmann . axp120531 . | James Williams . jxw110730 . | . | | | Bennilyn Quek . bxq120430 . | . Revision History . Version | Date | Comments | . 1.0.0 | 09/02/2014 | Initial version of Preliminary Project Management Plan. | . 1.1.0 | 09/04/2014 | Updated project plan formatting to conform to template and edited content sections for structure. | . 1.1.1 | 09/04/2014 | Formatted sentence structures in §1.1.1, §1.1.2, §2.3 for clarity. | . 1.1.2 | 09/04/2014 | Revised placeholders for printing. | . 1.1.3 | 09/08/2014 | Filled in §2.2.1, §2.4.1, §3, §4.2, §4.3 | . 1.1.4 | 10/1/2014 | Added ToC . Updated §1.2, §2.4.1,§5.2 . | . 1.2 | 10/16/2014 | Updated §1.2, §2.4.1,§5.2 | . 1.3 | 12/01/2014 | Updated §1.2, §2.4.1,§5.2 . Final Check . | . Table of Contents . 1. Introduction 5 . 1.1 Project Overview 5 . 1.1.1 Project Background 5 . 1.1.2 Project Goals 5 . 1.2 Deliverables 6 . 1.3 Document Evolution 6 . 1.4 References 7 . 1.5 Definitions, Acronyms, Abbreviations 7 . 2. Project Organization 8 . 2.1 Process Model 8 . 2.2 Organizational Structure 8 . 2.2.1 Team Organization 8 . 2.3 Organizational Boundaries and Interfaces 10 . 2.4 Project Responsibilities 11 . 2.4.1 Phase 1 Team Roles and Responsibilities 11 . 3. Managerial Process 13 . 3.1 Management Objectives and Priorities 13 . 3.2 Assumptions, Dependencies and Constraints 13 . 3.2.1 Assumptions 13 . 3.2.2 Dependencies 13 . 3.2.3 Constraints 14 . 3.3 Risk Management 14 . 3.4 Monitoring and Controlling Mechanisms 16 . 4. Technical Process 18 . 4.1 Methods, Tools and Techniques 18 . 4.2 Software Documentation 19 . 4.3 Project Support Functions 19 . 5. Work Elements, Schedule and Budget 20 . 5.1 Work Elements 20 . 5.2 Schedule 20 . 5.3 Budget 22 . 1. Introduction . 1.1 Project Overview . 1.1.1 Project Background . As people get older they tend to experience difficulties in either cognitive or sensory function. These difficulties can turn an independent and free-spirited person’s life into a continuous set of daily challenges. Assistive technology processes sensory data to provide meaningful information to the user. Today’s assistive technologies (known as aids) are expensive, trivial and bulky. Persons who have multiple difficulties require multiple devices. There is a growing need for advanced assistive technologies that are easy to use and convenient for the user. The solution is the use of a device many people already own: the smartphone. Smartphone-based aids do more than traditional assistive devices. For example, a hearing aid should recognize speech to create a visual image. A speaking aid should generate speech from visual data. Finally, a memory aid should produce visual queues based on a variety of input. . ### . 1.1.2 Project Goals . Team Total Recall’s Project Goal is to create an AAC application, running on an Android mobile device that is capable of enhancing a user’s communication abilities who is suffering from stage 3 dementia. . ### . ### . 1.2 Deliverables . Phase . No. . | Phase . Name . | Deliverables | Internal Review . Date . | Delivery . Date . | . | Initial | Preliminary PMP . | | 09/03/2014 | 09/04/2014 | . 1 | Interim | Evolving PMP . | Evolving WRS . | Evolving PPT . | Prototype Mock-ups . | | 09/29/2014 | 09/30/2014 | . | Final | Evolving PMP . | Evolving WRS . | Evolving PPT . | Evolving UM . | Preliminary Prototype Mockups . | | 10/15/2014 | 10/16/2014 | . 2 | Interim | Evolving PMP . | Evolving WRS . | Evolving Process Specification Document . | Evolving Vision Document . | Appendix - Glossary . | Appendix - References . | | 10/17/2014 | 11/11/2014 | . 2 | Final | Final PMP . | Final WRS . | Final Vision Document . | Final Process Specification . | Final User Manual . | Final Prototype . | Final Presentation . | Final Appendix . | | 11/12/2014 | 12/02/2014 | . 1.3 Document Evolution . This is a living document that is updated periodically. The document will be updated in response to feedback from the review process defined in the managerial processes (§3.4.1). This document is to be managed solely in the Google Drive repository established for the team. When changes are made the changes must be documented in the revision history table found at the beginning of this document. Changes must be dated, versioned, described and stamped with the team member who made the changes. The current version is specified on the bottom right of the document on all pages. . The versioning system used by the revision history table conforms to the semantic versioning scheme. The version numbers are indicated as a three decimal numerical in the form of “X.Y.Z”. All X, Y and Z are integers in the range zero to nine inclusive. Where X represents the major version, Y represents the minor version and Z represents patches. Major versions are incremented when the minor version number is exhausted by reaching nine and resetting to zero. Minor versions are incremented when content is added or removed. Patch versions are indicated when sentence structure changes are made but no content is added or removed. . 1.4 References . Please see the document References in the Appendix. . 1.5 Definitions, Acronyms, Abbreviations . Please see the document Glossary in the Appendix. . 2. Project Organization . 2.1 Process Model . The organization will be employing the Spiral Mode. Due to the emphasis on requirements analysis and negotiation, this model serves the organizational requirement of close client collaboration well. . 2.2 Organizational Structure . The organizational structure of three teams and 4 team members each. The project leader is not directly part of a team, but will form a fourth pseudo group that involves the other team leaders. This pseudo team is in place to encourage high cohesion amongst management elements for more effective work unit scheduling. . 2.2.1 Team Organization . Phase 1 - Interim . Team . No. . | Team . Members . | . - | 1. Andrew Pohlmann (Phase Lead) . | . 1 | Michael Raibick (Team Lead) . | Ryan Chen . | Travis Chun . | Oscar Reyes . | | . 2 | Michael Muggler (Team Lead) . | Bennilyn Quek . | Desmond Lee . | Robert Lockwood . | | . 3 | Blessing Osakue (Team Lead) . | Joe Brown . | James Williams . | Giuseppe Mastrolorenzo . | | . Phase 1 - Final . Team . No. . | Team . Members . | . - | 1. Michael Raibick (Phase Lead) . | . 1 | Andrew Pohlmann (Team Lead) . | Michael Muggler . | James Williams . | | . 2 | Michael Raibick (Team Lead) . | Joe Brown . | Desmond Lee . | Oscar Reyes . | | . 3 | Bennilyn Quek (Team Lead) . | Blessing Osakue . | Ryan Chen . | Robert Lockwood . | Giuseppe Mastrolorenzo . | Travis Chun . | | . Phase 2 - Interim . Team . No. . | Team . Members . | . - | Bennilyn Quek (Phase Lead) . | | . 1 | Andrew Pohlmann (Team Lead) . | Michael Muggler . | James Williams . | | . 2 | Desmond Lee (Team Lead) . | Joe Brown . | Michael Raibick . | Oscar Reyes . | | . 3 | Ryan Chen (Team Lead) . | Blessing Osakue . | Michael Raibick . | Robert Lockwood . | Giuseppe Mastrolorenzo . | Travis Chun . | | . Phase 2 - Final . Team . No. . | Team . Members . | . - | James Williams (Phase Lead) . | | . 1 | Joe Brown (Team Lead) . | Michael Muggler . | Bennilyn Quek . | | . 2 | Michael Raibick (Team Lead) . | Andrew Pohlmann . | Desmond Lee . | Oscar Reyes . | | . 3 | Ryan Chen (Team Lead) . | Blessing Osakue . | Michael Raibick . | Robert Lockwood . | Giuseppe Mastrolorenzo . | Travis Chun . | | . 2.3 Organizational Boundaries and Interfaces . Each team is intended to function as a self-contained entity that can complete its work units independently of other teams. Team leaders will function as interfaces to the project leader in management meetings for progress reviews and new workload assignments. If necessary, team leaders will also coordinate with other team leaders and the project leader for the purposes of synchronizing content production toward an aggregated work unit. The project leader is not directly part of a team, but will work closely with all team leaders for workflow synchronization purposes and clarification of project vision and direction. The project leader will also function as a liaison as necessary between all teams in the event that more precise communication is necessary. . 2.4 Project Responsibilities . 2.4.1 Phase 1 Team Roles and Responsibilities . Phase 1 - Interim . Team | Role | Responsibilities | . 1 | Requirements Engineering | Exploration of Domain, Stakeholder, Functional, Non-Functional Objectives. . | Update WRS. . | | . 2 | Requirements Engineering | Exploration of Non-Functional Requirements . | Update WRS. . | Generate preliminary Prototype. . | | . 3 | Requirements Engineering | Exploration of Functional Requirements . | Update WRS. . | | . MG | Management | Update PMP. . | Generate preliminary PPT. . | | . Phase 1 - Final . Team | Role | Responsibilities | . 1 | Requirements Engineering | Create system specifications. . | | . 2 | System Design | Create UI of the front-end . | | . 3 | Documentation | Generate the Initial User Manual . | | . MG | Management | Update PMP, PP . | | . 2.4.2 Phase 2 Team Roles and Responsibilities . Phase 2 - Interim . Team | Role | Responsibilities | . 1 | System Design / Development | Developing System Architecture . | Implement the System . | Generate Product Diagrams. . | | . 2 | System Design / Development / Documentation. | Develop System UI . | Implement the System . | | . 3 | Documentation | Develop User Manual . | Develop Appendix . | | . MG | Management | Develop Evolving Vision Document . | Develop Appendix . | | . Phase 2 - Final . Team | Role | Responsibilities | . 1 | System Development / Documentation. | Finalize Prototype . | Finalize WRS. . | | . 2 | System Development / Documentation. | Finalize Prototype . | Finalize all Product and Process Diagrams . | | . 3 | Documentation. | Finalize User Manual . | Finalize Appendix . | | . MG | Management | Finalize PMP . | Finalize Vision Document . | Finalize Process Specification Document . | Finalize PPT . | | . 3. Managerial Process . 3.1 Management Objectives and Priorities . Accountability: Ensuring that weekly work unit deadlines are met. . | Accuracy: Ensuring that work units are traceable to end-phase deliverables requirements. . | Efficiency: Ensuring that no excessive or redundant work is performed. . | Quality Assurance: Ensuring that all work units completed are free of defects. . | Communication: Ensuring low latency communication between and within teams. . | 3.2 Assumptions, Dependencies and Constraints . 3.2.1 Assumptions . Team members will be cognizant of project schedule deadlines. . | Team members will stay healthy and remain physically capable of carrying out assigned duties. . | Team members will respond to communications from other team members in a timely fashion. . | Team members remain motivated through the duration of the project. . | Team members will always have access to the necessary tools to complete their assigned work units. . | The group will not lose any team members. . | 3.2.2 Dependencies . Management will effectively communicate the project goals. . | Communication mechanisms to maintain low latency communications in the organizational structure . | Management being effective at maintaining linear progression of progress. . | Team members not procrastinating and delaying assigned work units. . | 3.2.3 Constraints . Personal schedule conflicts between team members. . | Personal lives of team members. . | 3.3 Risk Management .       . Risk | Impact | Mitigation | . Inaccurate Estimations about project costs, scheduling, and time to complete | These bad estimates can end up sinking a project into a sea of budget overruns, delayed deliverables, and wasted effort that can potentially end up in a cancellation of a project. | Apply crash techniques to speed up under-performing work units. Work overtime to ensure that work units get completed on time. Modify the schedule as necessary to apply more man hours to work units that are behind. | . Bad Requirements Gathering | Bad requirements gathering in a project ensures that the resulting software architecture will not be compliant with what the client truly needs. This situation is sometimes not seen until later in the project and, when discovered, can lead to critical faults that threaten the success of the project. | Hire a requirements engineer to elicit the proper set of requirements from the client. | . Executing Behind Schedule | Executing behind schedule virtually assures missing deadlines, wasting project resources, and provoking negative client feedback. The worst case of this scenario is that the client cancels the project. | We have taken a multifaceted approach in expecting and mitigating the risks of running behind schedule. Ample time has been set aside to collaborate with the customer on creating a detailed list of specifications and expectations with the project. Time has been set aside to review the project at regular intervals with the customer and additional time has been set aside to handle possible changes or issues brought up during these meetings. The project is internally scheduled to complete early so schedule setbacks don’t push us beyond the hard deadline. A change management system is in place to reduce the impact of changes. We believe these mitigations will be sufficient to handle most high-probability or high-impact scheduling situations that may arise. | . Unforeseen Technical Complexity | Unforeseen technical complexity could introduce delays in implementation of the program, or even worse uncover flaws in the requirements. | Our project manager and developers will ask some questions during specification-gathering to ensure common sources of technical complexity are covered early. Integrations with third party systems, for example using Active Directory to handle user management, need to be identified during the specification phase. Change requests relating to third party integrations after the completion of the design phase will be denied unless an agreed-upon amount of time can be added to the five-month deadline. | . Data Loss | Data loss can easily derail current project progress and make blown deadlines a guaranteed reality. Man-hours spent backtracking and redoing work units could easily lead to serious delays in the schedule and trigger another risk scenario “Executing behind schedule.” Regeneration of the lost data could also produce inaccurate or incorrect work that could cause future problems. | Backup database nightly, have a slave database ready at a different location. | . Scope Changes | Scope changes can cause serious changes in the functional and non-functional requirements of the program. Scope changes almost always impact scheduled tasks and work-units because of the refactoring of the scope into all phases of the development process. | Expand timeline to accommodate additions or reject additions depending upon contract restrictions, feasibility, meetings with the customer, etc. | . User Interface Usability Issues | The client may find the program difficult to use and then issue new requirements to “simplify” program operation. The client may not see the program as fulfilling its requirements and refuse payment of services. | We will make use of tools such as UserTesting.com to ensure our application is easy to use and follows today’s best practices for user interface design. | . Personnel Loss | Project work units could be delayed. Other team members may become strained from having to take on the extra work from the departing employee. The project even may suffer schedule delays if management cannot replace the lost manpower. | Hire a qualified replacement, divide work between remaining employees while replacement is located. | . ### . 3.4 Monitoring and Controlling Mechanisms . Living Announcement and Meeting Agenda documents will be constantly updated on Google Drive as a means to support project vision and maintain schedule work unit deadlines. . Doodle will be used to schedule team member meetings. . Glassboard will be used as a group collaboration platform. . Github will be used for version control for all code. . ### . ### . ### . ### . 4. Technical Process . ## . 4.1 Methods, Tools and Techniques . The following methods, tools and techniques will be used: . Method | Tool | Technique(s) | . Communication | Email . Doodle Glassboard . | Emails are used for direct communication between group members. Doodle will be used to schedule team member meetings. Glassboard will be used as a group collaboration device. | . Storage | Google Drive | Any document pertaining to a deliverable must be stored on the team accessible Google Drive share folder. Including any preliminary or draft documents. All documents must be shared with the entire team. | . Version Control | Github | Github will be the primary tool for storing the codebase, documenting changes and typing the code documentation. The user manual is to be stored in the Google Drive. The Github repository is exclusively for code and code related materials. | . Documentation | Astah UML Editor . RE Tools . Star UML . | Any documentation pertaining to the software must be done in Astah, Star, or RE Tools and submitted in the Google Drive. Do not place UML files under version control. | . Visual Editing | MS Paint . Visio . | Prototype Mockups and graphics will be drawn using these tool. | . System Development | Ionic . JavaScript . HTML5 . CSS5 . | System development will be done using the Ionic SDK platform, which uses JavaScript, HTML5, and CSS5 to create mobile applications. | . ### . 4.2 Software Documentation . The software architecture will be documented with UML using Astah, Star, and RE Tools diagrams. A user manual will be created for the application that shows graphical images to demonstrate how to use the system. . 4.3 Project Support Functions . Living Announcement and Meeting Agenda documents will be constantly updated on Google Drive as a means to support project vision and maintain schedule work unit deadlines. Doodle will be used to schedule team member meetings. Glassboard will be used as a group collaboration device. Github will be used for version control for all code. . 5. Work Elements, Schedule and Budget . ## . 5.1 Work Elements . Project Management Plan . | WRS . | Process Specification . | Product Specification (Vision) . | Prototype . | User Manual . | PowerPoint Presentation . | Appendix . | 5.2 Schedule . Phase 1 Interim . Deliverable(s) | Team . Assignments . | Assign Date | Internal Due Date | Official Due Date | . Evolving WRS . | | RE Team 1: WRS §2.1 . RE Team 2: WRS §2.3 . RE Team 3: WRS §2.2 . | 09/8/14 | 09/14/14 | 09/30/14 | . Evolving WRS . | | RE Team 1: §3.1 . RE Team 2: §2.3 . RE Team 3: §2.2 . | 09/15/14 | 09/21/14 | 09/30/14 | . Evolving PPT . | | RE Team 1: Traceability | 09/22/14 | 09/28/14 | 09/30/14 | . Evolving WRS . | | RE Team 3: §3.2 | 09/22/14 | 09/28/14 | 09/30/14 | . Evolving WRS . | | RE Team 2: §3.1 | 09/22/14 | 09/28/14 | 09/30/14 | . All Deliverables . | | Management | 09/29/14 | 09/29/14 | 09/30/14 | . Phase I Final (Due 10/16/2014) . Deliverable(s) | Team . Assignments . | Assign Date | Internal Due Date | Official Due Date | . Evolving WRS . | | Architecture Team: . Develop System Specifications . | | 10/01 | 10/8 | 10/16 | . Evolving Prototype . | | UI/UX Team . Develop prototype wireframes from specifications. . | | 10/09 | 10/13 | 10/16 | . Evolving User Manual . | | UM/Testing Team . Develop user manual. . | | 10/11 | 10/14 | 10/16 | . Evolving PMP . | Evolving PP . | | Management . Update PMP, PP . | | 10/15 | 10/15 | 10/16 | . Phase 2 Interim (Due 11/11/2014) . Deliverable(s) | Team . Assignments . | Assign Date | Internal Due Date | Official Due Date | . Evolving Prototype . | | UI/UX Team: . Develop System UI . | Generate Appendix. . | | 10/16 | 10/25 | 11/11 | . Evolving Prototype . | | Architecture Team: . Develop System Architecture . | Implement the System. . | Generate Diagrams. . | | 10/16 | 10/25 | 11/11 | . Evolving User Manual . | | UM/Testing Team . Develop User Manual . | | 10/16 | 10/25 | 11/11 | . Evolving Prototype . | | UI/UX + Architecture Team . Develop Prototype . | | 10/27 | 11/10 | 11/11 | . Evolving Vision Document . | | UM/Testing: . Develop Vision Document . | | 10/27 | 11/10 | 11/11 | . All Deliverables . | | Management | 11/10 | 11/10 | 11/11 | . Phase 2 Final (Due 12/05/2014) . Deliverable(s) | Team . Assignments . | Assign Date | Internal Due Date | Official Due Date | . Evolving Prototype . | | Architecture Team . Finalize prototype. . | Finalize Diagrams. . | | 11/12 | 11/15 | 12/05 | . Evolving User Manual . | | UM/Testing: . Finalize User Manual . | | 11/12 | 11/15 | 12/05 | . Evolving Vision Document . | | UI/UX . Finalize Vision Document. . | | 11/12 | 11/15 | 12/05 | . Appendix . | | UM/Testing: . Finalize Appendix . | | 11/16 | 12/01 | 12/05 | . Process Specification Document . | | Management . Finalize Process Specification . | | 11/16 | 12/01 | 12/05 | . All Deliverables | Management | 12/02 | 12/05 | 12/05 | . 5.3 Budget . No budget is allotted for this project. .",
            "url": "https://mikeowino.com/blog/2020/07/28/Project-Management-Plan.html",
            "relUrl": "/2020/07/28/Project-Management-Plan.html",
            "date": " • Jul 28, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides has for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Feautures . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "https://mikeowino.com/blog/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mikeowino.com/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Microsoft Word Example Post",
            "content": "When writing a blog post with Microsoft Word – the filename becomes the title. In this case the file name is “2020-01-01-Microsoft-Word-Example-Post.docx”. . There is minimal support for Word documents in fastpages compared to Jupyter notebooks. Some known limitations: . alt text in Word documents are not yet supported by fastpages, and will break links to images. . | You can only specify front matter for Word documents globally. See the README for more details. . | . For greater control over the content produced from Word documents, you will need to convert Word to markdown files manually. You can follow the steps in this blog post, which walk you through how to use pandoc to do the conversion. Note: If you wish to customize your Word generated blog post in markdown, make sure you delete your Word document from the _word directory so your markdown file doesn’t get overwritten! . If your primary method of writing blog posts is Word documents, and you plan on always manually editing Word generated markdown files, you are probably better off using fast_template instead of fastpages. . The material below is a reproduction of this blog post, and serves as an illustrative example. . Maintaining a healthy open source project can entail a huge amount of toil. Popular projects often have orders of magnitude more users and episodic contributors opening issues and PRs than core maintainers capable of handling these issues. . Consider this graphic prepared by the NumFOCUS foundation showing the number of maintainers for three widely used scientific computing projects: . . We can see that across these three projects, there is a very low ratio maintainers to users. Fixing this problem is not an easy task and likely requires innovative solutions to address the economics as well as tools. . Due to its recent momentum and popularity, Kubeflow suffers from a similar fate as illustrated by the growth of new issues opened: . . Source: “TensorFlow World 2019, Automating Your Developer Workflow With ML” . Coincidentally, while building out end to end machine learning examples for Kubeflow, we built two examples using publicly available GitHub data: GitHub Issue Summarization and Code Search. While these tutorials were useful for demonstrating components of Kubeflow, we realized that we could take this a step further and build concrete data products that reduce toil for maintainers. . This is why we started the project kubeflow/code-intelligence, with the goals of increasing project velocity and health using data driven tools. Below are two projects we are currently experimenting with : . Issue Label Bot: This is a bot that automatically labels GitHub issues using Machine Learning. This bot is a GitHub App that was originally built for Kubeflow but is now also used by several large open source projects. The current version of this bot only applies a very limited set of labels, however we are currently A/B testing new models that allow personalized labels. Here is a blog post discussing this project in more detail. . | Issue Triage GitHub Action: to compliment the Issue Label Bot, we created a GitHub Action that automatically adds / removes Issues to the Kubeflow project board tracking issues needing triage. . | Together these projects allow us to reduce the toil of triaging issues. The GitHub Action makes it much easier for the Kubeflow maintainers to track issues needing triage. With the label bot we have taken the first steps in using ML to replace human intervention. We plan on using features extracted by ML to automate more steps in the triage process to further reduce toil. . Building Solutions with GitHub Actions . One of the premises of Kubeflow is that a barrier to building data driven, ML powered solutions is getting models into production and integrated into a solution. In the case of building models to improve OSS project health, that often means integrating with GitHub where the project is hosted. . We are really excited by GitHub’s newly released feature GitHub Actions because we think it will make integrating ML with GitHub much easier. . For simple scripts, like the issue triage script, GitHub actions make it easy to automate executing the script in response to GitHub events without having to build and host a GitHub app. . To automate adding/removing issues needing triage to a Kanban board we wrote a simple python script that interfaces with GitHub’s GraphQL API to modify issues. . As we continue to iterate on ML Models to further reduce toil, GitHub Actions will make it easy to leverage Kubeflow to put our models into production faster. A number of prebuilt GitHub Actions make it easy to create Kubernetes resources in response to GitHub events. For example, we have created GitHub Actions to launch Argo Workflows. This means once we have a Kubernetes job or workflow to perform inference we can easily integrate the model with GitHub and have the full power of Kubeflow and Kubernetes (eg. GPUs). We expect this will allow us to iterate much faster compared to building and maintaining GitHub Apps. . Call To Action . We have a lot more work to do in order to achieve our goal of reducing the amount of toil involved in maintaining OSS projects. If your interested in helping out here’s a couple of issues to get started: . Help us create reports that pull and visualize key performance indicators (KPI). https://github.com/kubeflow/code-intelligence/issues/71 . We have defined our KPI here: issue #19 | . | Combine repo specific and non-repo specific label predictions: https://github.com/kubeflow/code-intelligence/issues/70 . | . In addition to the aforementioned issues we welcome contributions for these other issues in our repo. .",
            "url": "https://mikeowino.com/blog/2020/01/01/Microsoft-Word-Example-Post.html",
            "relUrl": "/2020/01/01/Microsoft-Word-Example-Post.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mikeowino.com/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mikeowino.com/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}